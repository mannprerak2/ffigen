// Part of the LLVM Project, under the Apache License v2.0 with LLVM
// Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Holds bindings to LibClang.
class LibClang {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibClang(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibClang.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Retrieve the character data associated with the given string.
  ffi.Pointer<ffi.Int8> clang_getCString(
    CXString string,
  ) {
    return _clang_getCString(
      string,
    );
  }

  late final _clang_getCString_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(CXString)>>(
          'clang_getCString');
  late final _clang_getCString = _clang_getCString_ptr
      .asFunction<ffi.Pointer<ffi.Int8> Function(CXString)>();

  /// Free the given string.
  void clang_disposeString(
    CXString string,
  ) {
    return _clang_disposeString(
      string,
    );
  }

  late final _clang_disposeString_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXString)>>(
          'clang_disposeString');
  late final _clang_disposeString =
      _clang_disposeString_ptr.asFunction<void Function(CXString)>();

  /// Free the given string set.
  void clang_disposeStringSet(
    ffi.Pointer<CXStringSet> set_1,
  ) {
    return _clang_disposeStringSet(
      set_1,
    );
  }

  late final _clang_disposeStringSet_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CXStringSet>)>>(
          'clang_disposeStringSet');
  late final _clang_disposeStringSet = _clang_disposeStringSet_ptr
      .asFunction<void Function(ffi.Pointer<CXStringSet>)>();

  /// Provides a shared context for creating translation units.
  ///
  /// It provides two options:
  ///
  /// - excludeDeclarationsFromPCH: When non-zero, allows enumeration of "local"
  /// declarations (when loading any new translation units). A "local" declaration
  /// is one that belongs in the translation unit itself and not in a precompiled
  /// header that was used by the translation unit. If zero, all declarations
  /// will be enumerated.
  ///
  /// Here is an example:
  ///
  /// \code
  /// // excludeDeclsFromPCH = 1, displayDiagnostics=1
  /// Idx = clang_createIndex(1, 1);
  ///
  /// // IndexTest.pch was produced with the following command:
  /// // "clang -x c IndexTest.h -emit-ast -o IndexTest.pch"
  /// TU = clang_createTranslationUnit(Idx, "IndexTest.pch");
  ///
  /// // This will load all the symbols from 'IndexTest.pch'
  /// clang_visitChildren(clang_getTranslationUnitCursor(TU),
  /// TranslationUnitVisitor, 0);
  /// clang_disposeTranslationUnit(TU);
  ///
  /// // This will load all the symbols from 'IndexTest.c', excluding symbols
  /// // from 'IndexTest.pch'.
  /// char *args[] = { "-Xclang", "-include-pch=IndexTest.pch" };
  /// TU = clang_createTranslationUnitFromSourceFile(Idx, "IndexTest.c", 2, args,
  /// 0, 0);
  /// clang_visitChildren(clang_getTranslationUnitCursor(TU),
  /// TranslationUnitVisitor, 0);
  /// clang_disposeTranslationUnit(TU);
  /// \endcode
  ///
  /// This process of creating the 'pch', loading it separately, and using it (via
  /// -include-pch) allows 'excludeDeclsFromPCH' to remove redundant callbacks
  /// (which gives the indexer the same performance benefit as the compiler).
  CXIndex clang_createIndex(
    int excludeDeclarationsFromPCH,
    int displayDiagnostics,
  ) {
    return _clang_createIndex(
      excludeDeclarationsFromPCH,
      displayDiagnostics,
    );
  }

  late final _clang_createIndex_ptr =
      _lookup<ffi.NativeFunction<CXIndex Function(ffi.Int32, ffi.Int32)>>(
          'clang_createIndex');
  late final _clang_createIndex =
      _clang_createIndex_ptr.asFunction<CXIndex Function(int, int)>();

  /// Destroy the given index.
  ///
  /// The index must not be destroyed until all of the translation units created
  /// within that index have been destroyed.
  void clang_disposeIndex(
    CXIndex index,
  ) {
    return _clang_disposeIndex(
      index,
    );
  }

  late final _clang_disposeIndex_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXIndex)>>(
          'clang_disposeIndex');
  late final _clang_disposeIndex =
      _clang_disposeIndex_ptr.asFunction<void Function(CXIndex)>();

  /// Sets general options associated with a CXIndex.
  ///
  /// For example:
  /// \code
  /// CXIndex idx = ...;
  /// clang_CXIndex_setGlobalOptions(idx,
  /// clang_CXIndex_getGlobalOptions(idx) |
  /// CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
  /// \endcode
  ///
  /// \param options A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags.
  void clang_CXIndex_setGlobalOptions(
    CXIndex arg0,
    int options,
  ) {
    return _clang_CXIndex_setGlobalOptions(
      arg0,
      options,
    );
  }

  late final _clang_CXIndex_setGlobalOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXIndex, ffi.Uint32)>>(
          'clang_CXIndex_setGlobalOptions');
  late final _clang_CXIndex_setGlobalOptions =
      _clang_CXIndex_setGlobalOptions_ptr
          .asFunction<void Function(CXIndex, int)>();

  /// Gets the general options associated with a CXIndex.
  ///
  /// \returns A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags that
  /// are associated with the given CXIndex object.
  int clang_CXIndex_getGlobalOptions(
    CXIndex arg0,
  ) {
    return _clang_CXIndex_getGlobalOptions(
      arg0,
    );
  }

  late final _clang_CXIndex_getGlobalOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXIndex)>>(
          'clang_CXIndex_getGlobalOptions');
  late final _clang_CXIndex_getGlobalOptions =
      _clang_CXIndex_getGlobalOptions_ptr.asFunction<int Function(CXIndex)>();

  /// Sets the invocation emission path option in a CXIndex.
  ///
  /// The invocation emission path specifies a path which will contain log
  /// files for certain libclang invocations. A null value (default) implies that
  /// libclang invocations are not logged..
  void clang_CXIndex_setInvocationEmissionPathOption(
    CXIndex arg0,
    ffi.Pointer<ffi.Int8> Path,
  ) {
    return _clang_CXIndex_setInvocationEmissionPathOption(
      arg0,
      Path,
    );
  }

  late final _clang_CXIndex_setInvocationEmissionPathOption_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CXIndex, ffi.Pointer<ffi.Int8>)>>(
      'clang_CXIndex_setInvocationEmissionPathOption');
  late final _clang_CXIndex_setInvocationEmissionPathOption =
      _clang_CXIndex_setInvocationEmissionPathOption_ptr
          .asFunction<void Function(CXIndex, ffi.Pointer<ffi.Int8>)>();

  /// Retrieve the complete file and path name of the given file.
  CXString clang_getFileName(
    CXFile SFile,
  ) {
    return _clang_getFileName(
      SFile,
    );
  }

  late final _clang_getFileName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXFile)>>(
          'clang_getFileName');
  late final _clang_getFileName =
      _clang_getFileName_ptr.asFunction<CXString Function(CXFile)>();

  /// Retrieve the last modification time of the given file.
  int clang_getFileTime(
    CXFile SFile,
  ) {
    return _clang_getFileTime(
      SFile,
    );
  }

  late final _clang_getFileTime_ptr =
      _lookup<ffi.NativeFunction<time_t Function(CXFile)>>('clang_getFileTime');
  late final _clang_getFileTime =
      _clang_getFileTime_ptr.asFunction<int Function(CXFile)>();

  /// Retrieve the unique ID for the given \c file.
  ///
  /// \param file the file to get the ID for.
  /// \param outID stores the returned CXFileUniqueID.
  /// \returns If there was a failure getting the unique ID, returns non-zero,
  /// otherwise returns 0.
  int clang_getFileUniqueID(
    CXFile file,
    ffi.Pointer<CXFileUniqueID> outID,
  ) {
    return _clang_getFileUniqueID(
      file,
      outID,
    );
  }

  late final _clang_getFileUniqueID_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXFile, ffi.Pointer<CXFileUniqueID>)>>('clang_getFileUniqueID');
  late final _clang_getFileUniqueID = _clang_getFileUniqueID_ptr
      .asFunction<int Function(CXFile, ffi.Pointer<CXFileUniqueID>)>();

  /// Determine whether the given header is guarded against
  /// multiple inclusions, either with the conventional
  /// \#ifndef/\#define/\#endif macro guards or with \#pragma once.
  int clang_isFileMultipleIncludeGuarded(
    CXTranslationUnit tu,
    CXFile file,
  ) {
    return _clang_isFileMultipleIncludeGuarded(
      tu,
      file,
    );
  }

  late final _clang_isFileMultipleIncludeGuarded_ptr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit, CXFile)>>(
      'clang_isFileMultipleIncludeGuarded');
  late final _clang_isFileMultipleIncludeGuarded =
      _clang_isFileMultipleIncludeGuarded_ptr
          .asFunction<int Function(CXTranslationUnit, CXFile)>();

  /// Retrieve a file handle within the given translation unit.
  ///
  /// \param tu the translation unit
  ///
  /// \param file_name the name of the file.
  ///
  /// \returns the file handle for the named file in the translation unit \p tu,
  /// or a NULL file handle if the file was not a part of this translation unit.
  CXFile clang_getFile(
    CXTranslationUnit tu,
    ffi.Pointer<ffi.Int8> file_name,
  ) {
    return _clang_getFile(
      tu,
      file_name,
    );
  }

  late final _clang_getFile_ptr = _lookup<
      ffi.NativeFunction<
          CXFile Function(
              CXTranslationUnit, ffi.Pointer<ffi.Int8>)>>('clang_getFile');
  late final _clang_getFile = _clang_getFile_ptr
      .asFunction<CXFile Function(CXTranslationUnit, ffi.Pointer<ffi.Int8>)>();

  /// Retrieve the buffer associated with the given file.
  ///
  /// \param tu the translation unit
  ///
  /// \param file the file for which to retrieve the buffer.
  ///
  /// \param size [out] if non-NULL, will be set to the size of the buffer.
  ///
  /// \returns a pointer to the buffer in memory that holds the contents of
  /// \p file, or a NULL pointer when the file is not loaded.
  ffi.Pointer<ffi.Int8> clang_getFileContents(
    CXTranslationUnit tu,
    CXFile file,
    ffi.Pointer<size_t> size,
  ) {
    return _clang_getFileContents(
      tu,
      file,
      size,
    );
  }

  late final _clang_getFileContents_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(CXTranslationUnit, CXFile,
              ffi.Pointer<size_t>)>>('clang_getFileContents');
  late final _clang_getFileContents = _clang_getFileContents_ptr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          CXTranslationUnit, CXFile, ffi.Pointer<size_t>)>();

  /// Returns non-zero if the \c file1 and \c file2 point to the same file,
  /// or they are both NULL.
  int clang_File_isEqual(
    CXFile file1,
    CXFile file2,
  ) {
    return _clang_File_isEqual(
      file1,
      file2,
    );
  }

  late final _clang_File_isEqual_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXFile, CXFile)>>(
          'clang_File_isEqual');
  late final _clang_File_isEqual =
      _clang_File_isEqual_ptr.asFunction<int Function(CXFile, CXFile)>();

  /// Returns the real path name of \c file.
  ///
  /// An empty string may be returned. Use \c clang_getFileName() in that case.
  CXString clang_File_tryGetRealPathName(
    CXFile file,
  ) {
    return _clang_File_tryGetRealPathName(
      file,
    );
  }

  late final _clang_File_tryGetRealPathName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXFile)>>(
          'clang_File_tryGetRealPathName');
  late final _clang_File_tryGetRealPathName = _clang_File_tryGetRealPathName_ptr
      .asFunction<CXString Function(CXFile)>();

  /// Retrieve a NULL (invalid) source location.
  CXSourceLocation clang_getNullLocation() {
    return _clang_getNullLocation();
  }

  late final _clang_getNullLocation_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function()>>(
          'clang_getNullLocation');
  late final _clang_getNullLocation =
      _clang_getNullLocation_ptr.asFunction<CXSourceLocation Function()>();

  /// Determine whether two source locations, which must refer into
  /// the same translation unit, refer to exactly the same point in the source
  /// code.
  ///
  /// \returns non-zero if the source locations refer to the same location, zero
  /// if they refer to different locations.
  int clang_equalLocations(
    CXSourceLocation loc1,
    CXSourceLocation loc2,
  ) {
    return _clang_equalLocations(
      loc1,
      loc2,
    );
  }

  late final _clang_equalLocations_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXSourceLocation, CXSourceLocation)>>('clang_equalLocations');
  late final _clang_equalLocations = _clang_equalLocations_ptr
      .asFunction<int Function(CXSourceLocation, CXSourceLocation)>();

  /// Retrieves the source location associated with a given file/line/column
  /// in a particular translation unit.
  CXSourceLocation clang_getLocation(
    CXTranslationUnit tu,
    CXFile file,
    int line,
    int column,
  ) {
    return _clang_getLocation(
      tu,
      file,
      line,
      column,
    );
  }

  late final _clang_getLocation_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceLocation Function(CXTranslationUnit, CXFile, ffi.Uint32,
              ffi.Uint32)>>('clang_getLocation');
  late final _clang_getLocation = _clang_getLocation_ptr.asFunction<
      CXSourceLocation Function(CXTranslationUnit, CXFile, int, int)>();

  /// Retrieves the source location associated with a given character offset
  /// in a particular translation unit.
  CXSourceLocation clang_getLocationForOffset(
    CXTranslationUnit tu,
    CXFile file,
    int offset,
  ) {
    return _clang_getLocationForOffset(
      tu,
      file,
      offset,
    );
  }

  late final _clang_getLocationForOffset_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceLocation Function(CXTranslationUnit, CXFile,
              ffi.Uint32)>>('clang_getLocationForOffset');
  late final _clang_getLocationForOffset = _clang_getLocationForOffset_ptr
      .asFunction<CXSourceLocation Function(CXTranslationUnit, CXFile, int)>();

  /// Returns non-zero if the given source location is in a system header.
  int clang_Location_isInSystemHeader(
    CXSourceLocation location,
  ) {
    return _clang_Location_isInSystemHeader(
      location,
    );
  }

  late final _clang_Location_isInSystemHeader_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXSourceLocation)>>(
          'clang_Location_isInSystemHeader');
  late final _clang_Location_isInSystemHeader =
      _clang_Location_isInSystemHeader_ptr
          .asFunction<int Function(CXSourceLocation)>();

  /// Returns non-zero if the given source location is in the main file of
  /// the corresponding translation unit.
  int clang_Location_isFromMainFile(
    CXSourceLocation location,
  ) {
    return _clang_Location_isFromMainFile(
      location,
    );
  }

  late final _clang_Location_isFromMainFile_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXSourceLocation)>>(
          'clang_Location_isFromMainFile');
  late final _clang_Location_isFromMainFile = _clang_Location_isFromMainFile_ptr
      .asFunction<int Function(CXSourceLocation)>();

  /// Retrieve a NULL (invalid) source range.
  CXSourceRange clang_getNullRange() {
    return _clang_getNullRange();
  }

  late final _clang_getNullRange_ptr =
      _lookup<ffi.NativeFunction<CXSourceRange Function()>>(
          'clang_getNullRange');
  late final _clang_getNullRange =
      _clang_getNullRange_ptr.asFunction<CXSourceRange Function()>();

  /// Retrieve a source range given the beginning and ending source
  /// locations.
  CXSourceRange clang_getRange(
    CXSourceLocation begin,
    CXSourceLocation end,
  ) {
    return _clang_getRange(
      begin,
      end,
    );
  }

  late final _clang_getRange_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceRange Function(
              CXSourceLocation, CXSourceLocation)>>('clang_getRange');
  late final _clang_getRange = _clang_getRange_ptr
      .asFunction<CXSourceRange Function(CXSourceLocation, CXSourceLocation)>();

  /// Determine whether two ranges are equivalent.
  ///
  /// \returns non-zero if the ranges are the same, zero if they differ.
  int clang_equalRanges(
    CXSourceRange range1,
    CXSourceRange range2,
  ) {
    return _clang_equalRanges(
      range1,
      range2,
    );
  }

  late final _clang_equalRanges_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXSourceRange, CXSourceRange)>>('clang_equalRanges');
  late final _clang_equalRanges = _clang_equalRanges_ptr
      .asFunction<int Function(CXSourceRange, CXSourceRange)>();

  /// Returns non-zero if \p range is null.
  int clang_Range_isNull(
    CXSourceRange range,
  ) {
    return _clang_Range_isNull(
      range,
    );
  }

  late final _clang_Range_isNull_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXSourceRange)>>(
          'clang_Range_isNull');
  late final _clang_Range_isNull =
      _clang_Range_isNull_ptr.asFunction<int Function(CXSourceRange)>();

  /// Retrieve the file, line, column, and offset represented by
  /// the given source location.
  ///
  /// If the location refers into a macro expansion, retrieves the
  /// location of the macro expansion.
  ///
  /// \param location the location within a source file that will be decomposed
  /// into its parts.
  ///
  /// \param file [out] if non-NULL, will be set to the file to which the given
  /// source location points.
  ///
  /// \param line [out] if non-NULL, will be set to the line to which the given
  /// source location points.
  ///
  /// \param column [out] if non-NULL, will be set to the column to which the given
  /// source location points.
  ///
  /// \param offset [out] if non-NULL, will be set to the offset into the
  /// buffer to which the given source location points.
  void clang_getExpansionLocation(
    CXSourceLocation location,
    ffi.Pointer<CXFile> file,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _clang_getExpansionLocation(
      location,
      file,
      line,
      column,
      offset,
    );
  }

  late final _clang_getExpansionLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getExpansionLocation');
  late final _clang_getExpansionLocation =
      _clang_getExpansionLocation_ptr.asFunction<
          void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Retrieve the file, line and column represented by the given source
  /// location, as specified in a # line directive.
  ///
  /// Example: given the following source code in a file somefile.c
  ///
  /// \code
  /// #123 "dummy.c" 1
  ///
  /// static int func(void)
  /// {
  /// return 0;
  /// }
  /// \endcode
  ///
  /// the location information returned by this function would be
  ///
  /// File: dummy.c Line: 124 Column: 12
  ///
  /// whereas clang_getExpansionLocation would have returned
  ///
  /// File: somefile.c Line: 3 Column: 12
  ///
  /// \param location the location within a source file that will be decomposed
  /// into its parts.
  ///
  /// \param filename [out] if non-NULL, will be set to the filename of the
  /// source location. Note that filenames returned will be for "virtual" files,
  /// which don't necessarily exist on the machine running clang - e.g. when
  /// parsing preprocessed output obtained from a different environment. If
  /// a non-NULL value is passed in, remember to dispose of the returned value
  /// using \c clang_disposeString() once you've finished with it. For an invalid
  /// source location, an empty string is returned.
  ///
  /// \param line [out] if non-NULL, will be set to the line number of the
  /// source location. For an invalid source location, zero is returned.
  ///
  /// \param column [out] if non-NULL, will be set to the column number of the
  /// source location. For an invalid source location, zero is returned.
  void clang_getPresumedLocation(
    CXSourceLocation location,
    ffi.Pointer<CXString> filename,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
  ) {
    return _clang_getPresumedLocation(
      location,
      filename,
      line,
      column,
    );
  }

  late final _clang_getPresumedLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getPresumedLocation');
  late final _clang_getPresumedLocation =
      _clang_getPresumedLocation_ptr.asFunction<
          void Function(CXSourceLocation, ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  /// Legacy API to retrieve the file, line, column, and offset represented
  /// by the given source location.
  ///
  /// This interface has been replaced by the newer interface
  /// #clang_getExpansionLocation(). See that interface's documentation for
  /// details.
  void clang_getInstantiationLocation(
    CXSourceLocation location,
    ffi.Pointer<CXFile> file,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _clang_getInstantiationLocation(
      location,
      file,
      line,
      column,
      offset,
    );
  }

  late final _clang_getInstantiationLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getInstantiationLocation');
  late final _clang_getInstantiationLocation =
      _clang_getInstantiationLocation_ptr.asFunction<
          void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Retrieve the file, line, column, and offset represented by
  /// the given source location.
  ///
  /// If the location refers into a macro instantiation, return where the
  /// location was originally spelled in the source file.
  ///
  /// \param location the location within a source file that will be decomposed
  /// into its parts.
  ///
  /// \param file [out] if non-NULL, will be set to the file to which the given
  /// source location points.
  ///
  /// \param line [out] if non-NULL, will be set to the line to which the given
  /// source location points.
  ///
  /// \param column [out] if non-NULL, will be set to the column to which the given
  /// source location points.
  ///
  /// \param offset [out] if non-NULL, will be set to the offset into the
  /// buffer to which the given source location points.
  void clang_getSpellingLocation(
    CXSourceLocation location,
    ffi.Pointer<CXFile> file,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _clang_getSpellingLocation(
      location,
      file,
      line,
      column,
      offset,
    );
  }

  late final _clang_getSpellingLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getSpellingLocation');
  late final _clang_getSpellingLocation =
      _clang_getSpellingLocation_ptr.asFunction<
          void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Retrieve the file, line, column, and offset represented by
  /// the given source location.
  ///
  /// If the location refers into a macro expansion, return where the macro was
  /// expanded or where the macro argument was written, if the location points at
  /// a macro argument.
  ///
  /// \param location the location within a source file that will be decomposed
  /// into its parts.
  ///
  /// \param file [out] if non-NULL, will be set to the file to which the given
  /// source location points.
  ///
  /// \param line [out] if non-NULL, will be set to the line to which the given
  /// source location points.
  ///
  /// \param column [out] if non-NULL, will be set to the column to which the given
  /// source location points.
  ///
  /// \param offset [out] if non-NULL, will be set to the offset into the
  /// buffer to which the given source location points.
  void clang_getFileLocation(
    CXSourceLocation location,
    ffi.Pointer<CXFile> file,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _clang_getFileLocation(
      location,
      file,
      line,
      column,
      offset,
    );
  }

  late final _clang_getFileLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getFileLocation');
  late final _clang_getFileLocation = _clang_getFileLocation_ptr.asFunction<
      void Function(
          CXSourceLocation,
          ffi.Pointer<CXFile>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  /// Retrieve a source location representing the first character within a
  /// source range.
  CXSourceLocation clang_getRangeStart(
    CXSourceRange range,
  ) {
    return _clang_getRangeStart(
      range,
    );
  }

  late final _clang_getRangeStart_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function(CXSourceRange)>>(
          'clang_getRangeStart');
  late final _clang_getRangeStart = _clang_getRangeStart_ptr
      .asFunction<CXSourceLocation Function(CXSourceRange)>();

  /// Retrieve a source location representing the last character within a
  /// source range.
  CXSourceLocation clang_getRangeEnd(
    CXSourceRange range,
  ) {
    return _clang_getRangeEnd(
      range,
    );
  }

  late final _clang_getRangeEnd_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function(CXSourceRange)>>(
          'clang_getRangeEnd');
  late final _clang_getRangeEnd = _clang_getRangeEnd_ptr
      .asFunction<CXSourceLocation Function(CXSourceRange)>();

  /// Retrieve all ranges that were skipped by the preprocessor.
  ///
  /// The preprocessor will skip lines when they are surrounded by an
  /// if/ifdef/ifndef directive whose condition does not evaluate to true.
  ffi.Pointer<CXSourceRangeList> clang_getSkippedRanges(
    CXTranslationUnit tu,
    CXFile file,
  ) {
    return _clang_getSkippedRanges(
      tu,
      file,
    );
  }

  late final _clang_getSkippedRanges_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CXSourceRangeList> Function(
              CXTranslationUnit, CXFile)>>('clang_getSkippedRanges');
  late final _clang_getSkippedRanges = _clang_getSkippedRanges_ptr.asFunction<
      ffi.Pointer<CXSourceRangeList> Function(CXTranslationUnit, CXFile)>();

  /// Retrieve all ranges from all files that were skipped by the
  /// preprocessor.
  ///
  /// The preprocessor will skip lines when they are surrounded by an
  /// if/ifdef/ifndef directive whose condition does not evaluate to true.
  ffi.Pointer<CXSourceRangeList> clang_getAllSkippedRanges(
    CXTranslationUnit tu,
  ) {
    return _clang_getAllSkippedRanges(
      tu,
    );
  }

  late final _clang_getAllSkippedRanges_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CXSourceRangeList> Function(
              CXTranslationUnit)>>('clang_getAllSkippedRanges');
  late final _clang_getAllSkippedRanges = _clang_getAllSkippedRanges_ptr
      .asFunction<ffi.Pointer<CXSourceRangeList> Function(CXTranslationUnit)>();

  /// Destroy the given \c CXSourceRangeList.
  void clang_disposeSourceRangeList(
    ffi.Pointer<CXSourceRangeList> ranges,
  ) {
    return _clang_disposeSourceRangeList(
      ranges,
    );
  }

  late final _clang_disposeSourceRangeList_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CXSourceRangeList>)>>('clang_disposeSourceRangeList');
  late final _clang_disposeSourceRangeList = _clang_disposeSourceRangeList_ptr
      .asFunction<void Function(ffi.Pointer<CXSourceRangeList>)>();

  /// Determine the number of diagnostics in a CXDiagnosticSet.
  int clang_getNumDiagnosticsInSet(
    CXDiagnosticSet Diags,
  ) {
    return _clang_getNumDiagnosticsInSet(
      Diags,
    );
  }

  late final _clang_getNumDiagnosticsInSet_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnosticSet)>>(
          'clang_getNumDiagnosticsInSet');
  late final _clang_getNumDiagnosticsInSet = _clang_getNumDiagnosticsInSet_ptr
      .asFunction<int Function(CXDiagnosticSet)>();

  /// Retrieve a diagnostic associated with the given CXDiagnosticSet.
  ///
  /// \param Diags the CXDiagnosticSet to query.
  /// \param Index the zero-based diagnostic number to retrieve.
  ///
  /// \returns the requested diagnostic. This diagnostic must be freed
  /// via a call to \c clang_disposeDiagnostic().
  CXDiagnostic clang_getDiagnosticInSet(
    CXDiagnosticSet Diags,
    int Index,
  ) {
    return _clang_getDiagnosticInSet(
      Diags,
      Index,
    );
  }

  late final _clang_getDiagnosticInSet_ptr = _lookup<
      ffi.NativeFunction<
          CXDiagnostic Function(
              CXDiagnosticSet, ffi.Uint32)>>('clang_getDiagnosticInSet');
  late final _clang_getDiagnosticInSet = _clang_getDiagnosticInSet_ptr
      .asFunction<CXDiagnostic Function(CXDiagnosticSet, int)>();

  /// Deserialize a set of diagnostics from a Clang diagnostics bitcode
  /// file.
  ///
  /// \param file The name of the file to deserialize.
  /// \param error A pointer to a enum value recording if there was a problem
  /// deserializing the diagnostics.
  /// \param errorString A pointer to a CXString for recording the error string
  /// if the file was not successfully loaded.
  ///
  /// \returns A loaded CXDiagnosticSet if successful, and NULL otherwise.  These
  /// diagnostics should be released using clang_disposeDiagnosticSet().
  CXDiagnosticSet clang_loadDiagnostics(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int32> error,
    ffi.Pointer<CXString> errorString,
  ) {
    return _clang_loadDiagnostics(
      file,
      error,
      errorString,
    );
  }

  late final _clang_loadDiagnostics_ptr = _lookup<
      ffi.NativeFunction<
          CXDiagnosticSet Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>)>>('clang_loadDiagnostics');
  late final _clang_loadDiagnostics = _clang_loadDiagnostics_ptr.asFunction<
      CXDiagnosticSet Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<CXString>)>();

  /// Release a CXDiagnosticSet and all of its contained diagnostics.
  void clang_disposeDiagnosticSet(
    CXDiagnosticSet Diags,
  ) {
    return _clang_disposeDiagnosticSet(
      Diags,
    );
  }

  late final _clang_disposeDiagnosticSet_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXDiagnosticSet)>>(
          'clang_disposeDiagnosticSet');
  late final _clang_disposeDiagnosticSet = _clang_disposeDiagnosticSet_ptr
      .asFunction<void Function(CXDiagnosticSet)>();

  /// Retrieve the child diagnostics of a CXDiagnostic.
  ///
  /// This CXDiagnosticSet does not need to be released by
  /// clang_disposeDiagnosticSet.
  CXDiagnosticSet clang_getChildDiagnostics(
    CXDiagnostic D,
  ) {
    return _clang_getChildDiagnostics(
      D,
    );
  }

  late final _clang_getChildDiagnostics_ptr =
      _lookup<ffi.NativeFunction<CXDiagnosticSet Function(CXDiagnostic)>>(
          'clang_getChildDiagnostics');
  late final _clang_getChildDiagnostics = _clang_getChildDiagnostics_ptr
      .asFunction<CXDiagnosticSet Function(CXDiagnostic)>();

  /// Determine the number of diagnostics produced for the given
  /// translation unit.
  int clang_getNumDiagnostics(
    CXTranslationUnit Unit,
  ) {
    return _clang_getNumDiagnostics(
      Unit,
    );
  }

  late final _clang_getNumDiagnostics_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>(
          'clang_getNumDiagnostics');
  late final _clang_getNumDiagnostics = _clang_getNumDiagnostics_ptr
      .asFunction<int Function(CXTranslationUnit)>();

  /// Retrieve a diagnostic associated with the given translation unit.
  ///
  /// \param Unit the translation unit to query.
  /// \param Index the zero-based diagnostic number to retrieve.
  ///
  /// \returns the requested diagnostic. This diagnostic must be freed
  /// via a call to \c clang_disposeDiagnostic().
  CXDiagnostic clang_getDiagnostic(
    CXTranslationUnit Unit,
    int Index,
  ) {
    return _clang_getDiagnostic(
      Unit,
      Index,
    );
  }

  late final _clang_getDiagnostic_ptr = _lookup<
      ffi.NativeFunction<
          CXDiagnostic Function(
              CXTranslationUnit, ffi.Uint32)>>('clang_getDiagnostic');
  late final _clang_getDiagnostic = _clang_getDiagnostic_ptr
      .asFunction<CXDiagnostic Function(CXTranslationUnit, int)>();

  /// Retrieve the complete set of diagnostics associated with a
  /// translation unit.
  ///
  /// \param Unit the translation unit to query.
  CXDiagnosticSet clang_getDiagnosticSetFromTU(
    CXTranslationUnit Unit,
  ) {
    return _clang_getDiagnosticSetFromTU(
      Unit,
    );
  }

  late final _clang_getDiagnosticSetFromTU_ptr =
      _lookup<ffi.NativeFunction<CXDiagnosticSet Function(CXTranslationUnit)>>(
          'clang_getDiagnosticSetFromTU');
  late final _clang_getDiagnosticSetFromTU = _clang_getDiagnosticSetFromTU_ptr
      .asFunction<CXDiagnosticSet Function(CXTranslationUnit)>();

  /// Destroy a diagnostic.
  void clang_disposeDiagnostic(
    CXDiagnostic Diagnostic,
  ) {
    return _clang_disposeDiagnostic(
      Diagnostic,
    );
  }

  late final _clang_disposeDiagnostic_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXDiagnostic)>>(
          'clang_disposeDiagnostic');
  late final _clang_disposeDiagnostic =
      _clang_disposeDiagnostic_ptr.asFunction<void Function(CXDiagnostic)>();

  /// Format the given diagnostic in a manner that is suitable for display.
  ///
  /// This routine will format the given diagnostic to a string, rendering
  /// the diagnostic according to the various options given. The
  /// \c clang_defaultDiagnosticDisplayOptions() function returns the set of
  /// options that most closely mimics the behavior of the clang compiler.
  ///
  /// \param Diagnostic The diagnostic to print.
  ///
  /// \param Options A set of options that control the diagnostic display,
  /// created by combining \c CXDiagnosticDisplayOptions values.
  ///
  /// \returns A new string containing for formatted diagnostic.
  CXString clang_formatDiagnostic(
    CXDiagnostic Diagnostic,
    int Options,
  ) {
    return _clang_formatDiagnostic(
      Diagnostic,
      Options,
    );
  }

  late final _clang_formatDiagnostic_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXDiagnostic, ffi.Uint32)>>(
          'clang_formatDiagnostic');
  late final _clang_formatDiagnostic = _clang_formatDiagnostic_ptr
      .asFunction<CXString Function(CXDiagnostic, int)>();

  /// Retrieve the set of display options most similar to the
  /// default behavior of the clang compiler.
  ///
  /// \returns A set of display options suitable for use with \c
  /// clang_formatDiagnostic().
  int clang_defaultDiagnosticDisplayOptions() {
    return _clang_defaultDiagnosticDisplayOptions();
  }

  late final _clang_defaultDiagnosticDisplayOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'clang_defaultDiagnosticDisplayOptions');
  late final _clang_defaultDiagnosticDisplayOptions =
      _clang_defaultDiagnosticDisplayOptions_ptr.asFunction<int Function()>();

  /// Determine the severity of the given diagnostic.
  int clang_getDiagnosticSeverity(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticSeverity(
      arg0,
    );
  }

  late final _clang_getDiagnosticSeverity_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXDiagnostic)>>(
          'clang_getDiagnosticSeverity');
  late final _clang_getDiagnosticSeverity =
      _clang_getDiagnosticSeverity_ptr.asFunction<int Function(CXDiagnostic)>();

  /// Retrieve the source location of the given diagnostic.
  ///
  /// This location is where Clang would print the caret ('^') when
  /// displaying the diagnostic on the command line.
  CXSourceLocation clang_getDiagnosticLocation(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticLocation(
      arg0,
    );
  }

  late final _clang_getDiagnosticLocation_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function(CXDiagnostic)>>(
          'clang_getDiagnosticLocation');
  late final _clang_getDiagnosticLocation = _clang_getDiagnosticLocation_ptr
      .asFunction<CXSourceLocation Function(CXDiagnostic)>();

  /// Retrieve the text of the given diagnostic.
  CXString clang_getDiagnosticSpelling(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticSpelling(
      arg0,
    );
  }

  late final _clang_getDiagnosticSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXDiagnostic)>>(
          'clang_getDiagnosticSpelling');
  late final _clang_getDiagnosticSpelling = _clang_getDiagnosticSpelling_ptr
      .asFunction<CXString Function(CXDiagnostic)>();

  /// Retrieve the name of the command-line option that enabled this
  /// diagnostic.
  ///
  /// \param Diag The diagnostic to be queried.
  ///
  /// \param Disable If non-NULL, will be set to the option that disables this
  /// diagnostic (if any).
  ///
  /// \returns A string that contains the command-line option used to enable this
  /// warning, such as "-Wconversion" or "-pedantic".
  CXString clang_getDiagnosticOption(
    CXDiagnostic Diag,
    ffi.Pointer<CXString> Disable,
  ) {
    return _clang_getDiagnosticOption(
      Diag,
      Disable,
    );
  }

  late final _clang_getDiagnosticOption_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(CXDiagnostic,
              ffi.Pointer<CXString>)>>('clang_getDiagnosticOption');
  late final _clang_getDiagnosticOption = _clang_getDiagnosticOption_ptr
      .asFunction<CXString Function(CXDiagnostic, ffi.Pointer<CXString>)>();

  /// Retrieve the category number for this diagnostic.
  ///
  /// Diagnostics can be categorized into groups along with other, related
  /// diagnostics (e.g., diagnostics under the same warning flag). This routine
  /// retrieves the category number for the given diagnostic.
  ///
  /// \returns The number of the category that contains this diagnostic, or zero
  /// if this diagnostic is uncategorized.
  int clang_getDiagnosticCategory(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticCategory(
      arg0,
    );
  }

  late final _clang_getDiagnosticCategory_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>(
          'clang_getDiagnosticCategory');
  late final _clang_getDiagnosticCategory =
      _clang_getDiagnosticCategory_ptr.asFunction<int Function(CXDiagnostic)>();

  /// Retrieve the name of a particular diagnostic category.  This
  /// is now deprecated.  Use clang_getDiagnosticCategoryText()
  /// instead.
  ///
  /// \param Category A diagnostic category number, as returned by
  /// \c clang_getDiagnosticCategory().
  ///
  /// \returns The name of the given diagnostic category.
  CXString clang_getDiagnosticCategoryName(
    int Category,
  ) {
    return _clang_getDiagnosticCategoryName(
      Category,
    );
  }

  late final _clang_getDiagnosticCategoryName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(ffi.Uint32)>>(
          'clang_getDiagnosticCategoryName');
  late final _clang_getDiagnosticCategoryName =
      _clang_getDiagnosticCategoryName_ptr.asFunction<CXString Function(int)>();

  /// Retrieve the diagnostic category text for a given diagnostic.
  ///
  /// \returns The text of the given diagnostic category.
  CXString clang_getDiagnosticCategoryText(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticCategoryText(
      arg0,
    );
  }

  late final _clang_getDiagnosticCategoryText_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXDiagnostic)>>(
          'clang_getDiagnosticCategoryText');
  late final _clang_getDiagnosticCategoryText =
      _clang_getDiagnosticCategoryText_ptr
          .asFunction<CXString Function(CXDiagnostic)>();

  /// Determine the number of source ranges associated with the given
  /// diagnostic.
  int clang_getDiagnosticNumRanges(
    CXDiagnostic arg0,
  ) {
    return _clang_getDiagnosticNumRanges(
      arg0,
    );
  }

  late final _clang_getDiagnosticNumRanges_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>(
          'clang_getDiagnosticNumRanges');
  late final _clang_getDiagnosticNumRanges = _clang_getDiagnosticNumRanges_ptr
      .asFunction<int Function(CXDiagnostic)>();

  /// Retrieve a source range associated with the diagnostic.
  ///
  /// A diagnostic's source ranges highlight important elements in the source
  /// code. On the command line, Clang displays source ranges by
  /// underlining them with '~' characters.
  ///
  /// \param Diagnostic the diagnostic whose range is being extracted.
  ///
  /// \param Range the zero-based index specifying which range to
  ///
  /// \returns the requested source range.
  CXSourceRange clang_getDiagnosticRange(
    CXDiagnostic Diagnostic,
    int Range,
  ) {
    return _clang_getDiagnosticRange(
      Diagnostic,
      Range,
    );
  }

  late final _clang_getDiagnosticRange_ptr = _lookup<
          ffi.NativeFunction<CXSourceRange Function(CXDiagnostic, ffi.Uint32)>>(
      'clang_getDiagnosticRange');
  late final _clang_getDiagnosticRange = _clang_getDiagnosticRange_ptr
      .asFunction<CXSourceRange Function(CXDiagnostic, int)>();

  /// Determine the number of fix-it hints associated with the
  /// given diagnostic.
  int clang_getDiagnosticNumFixIts(
    CXDiagnostic Diagnostic,
  ) {
    return _clang_getDiagnosticNumFixIts(
      Diagnostic,
    );
  }

  late final _clang_getDiagnosticNumFixIts_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>(
          'clang_getDiagnosticNumFixIts');
  late final _clang_getDiagnosticNumFixIts = _clang_getDiagnosticNumFixIts_ptr
      .asFunction<int Function(CXDiagnostic)>();

  /// Retrieve the replacement information for a given fix-it.
  ///
  /// Fix-its are described in terms of a source range whose contents
  /// should be replaced by a string. This approach generalizes over
  /// three kinds of operations: removal of source code (the range covers
  /// the code to be removed and the replacement string is empty),
  /// replacement of source code (the range covers the code to be
  /// replaced and the replacement string provides the new code), and
  /// insertion (both the start and end of the range point at the
  /// insertion location, and the replacement string provides the text to
  /// insert).
  ///
  /// \param Diagnostic The diagnostic whose fix-its are being queried.
  ///
  /// \param FixIt The zero-based index of the fix-it.
  ///
  /// \param ReplacementRange The source range whose contents will be
  /// replaced with the returned replacement string. Note that source
  /// ranges are half-open ranges [a, b), so the source code should be
  /// replaced from a and up to (but not including) b.
  ///
  /// \returns A string containing text that should be replace the source
  /// code indicated by the \c ReplacementRange.
  CXString clang_getDiagnosticFixIt(
    CXDiagnostic Diagnostic,
    int FixIt,
    ffi.Pointer<CXSourceRange> ReplacementRange,
  ) {
    return _clang_getDiagnosticFixIt(
      Diagnostic,
      FixIt,
      ReplacementRange,
    );
  }

  late final _clang_getDiagnosticFixIt_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(CXDiagnostic, ffi.Uint32,
              ffi.Pointer<CXSourceRange>)>>('clang_getDiagnosticFixIt');
  late final _clang_getDiagnosticFixIt =
      _clang_getDiagnosticFixIt_ptr.asFunction<
          CXString Function(CXDiagnostic, int, ffi.Pointer<CXSourceRange>)>();

  /// Get the original translation unit source file name.
  CXString clang_getTranslationUnitSpelling(
    CXTranslationUnit CTUnit,
  ) {
    return _clang_getTranslationUnitSpelling(
      CTUnit,
    );
  }

  late final _clang_getTranslationUnitSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXTranslationUnit)>>(
          'clang_getTranslationUnitSpelling');
  late final _clang_getTranslationUnitSpelling =
      _clang_getTranslationUnitSpelling_ptr
          .asFunction<CXString Function(CXTranslationUnit)>();

  /// Return the CXTranslationUnit for a given source file and the provided
  /// command line arguments one would pass to the compiler.
  ///
  /// Note: The 'source_filename' argument is optional.  If the caller provides a
  /// NULL pointer, the name of the source file is expected to reside in the
  /// specified command line arguments.
  ///
  /// Note: When encountered in 'clang_command_line_args', the following options
  /// are ignored:
  ///
  /// '-c'
  /// '-emit-ast'
  /// '-fsyntax-only'
  /// '-o \<output file>'  (both '-o' and '\<output file>' are ignored)
  ///
  /// \param CIdx The index object with which the translation unit will be
  /// associated.
  ///
  /// \param source_filename The name of the source file to load, or NULL if the
  /// source file is included in \p clang_command_line_args.
  ///
  /// \param num_clang_command_line_args The number of command-line arguments in
  /// \p clang_command_line_args.
  ///
  /// \param clang_command_line_args The command-line arguments that would be
  /// passed to the \c clang executable if it were being invoked out-of-process.
  /// These command-line options will be parsed and will affect how the translation
  /// unit is parsed. Note that the following options are ignored: '-c',
  /// '-emit-ast', '-fsyntax-only' (which is the default), and '-o \<output file>'.
  ///
  /// \param num_unsaved_files the number of unsaved file entries in \p
  /// unsaved_files.
  ///
  /// \param unsaved_files the files that have not yet been saved to disk
  /// but may be required for code completion, including the contents of
  /// those files.  The contents and name of these files (as specified by
  /// CXUnsavedFile) are copied when necessary, so the client only needs to
  /// guarantee their validity until the call to this function returns.
  CXTranslationUnit clang_createTranslationUnitFromSourceFile(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> source_filename,
    int num_clang_command_line_args,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> clang_command_line_args,
    int num_unsaved_files,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
  ) {
    return _clang_createTranslationUnitFromSourceFile(
      CIdx,
      source_filename,
      num_clang_command_line_args,
      clang_command_line_args,
      num_unsaved_files,
      unsaved_files,
    );
  }

  late final _clang_createTranslationUnitFromSourceFile_ptr = _lookup<
          ffi.NativeFunction<
              CXTranslationUnit Function(
                  CXIndex,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Uint32,
                  ffi.Pointer<CXUnsavedFile>)>>(
      'clang_createTranslationUnitFromSourceFile');
  late final _clang_createTranslationUnitFromSourceFile =
      _clang_createTranslationUnitFromSourceFile_ptr.asFunction<
          CXTranslationUnit Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              int,
              ffi.Pointer<CXUnsavedFile>)>();

  /// Same as \c clang_createTranslationUnit2, but returns
  /// the \c CXTranslationUnit instead of an error code.  In case of an error this
  /// routine returns a \c NULL \c CXTranslationUnit, without further detailed
  /// error codes.
  CXTranslationUnit clang_createTranslationUnit(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> ast_filename,
  ) {
    return _clang_createTranslationUnit(
      CIdx,
      ast_filename,
    );
  }

  late final _clang_createTranslationUnit_ptr = _lookup<
      ffi.NativeFunction<
          CXTranslationUnit Function(
              CXIndex, ffi.Pointer<ffi.Int8>)>>('clang_createTranslationUnit');
  late final _clang_createTranslationUnit = _clang_createTranslationUnit_ptr
      .asFunction<CXTranslationUnit Function(CXIndex, ffi.Pointer<ffi.Int8>)>();

  /// Create a translation unit from an AST file (\c -emit-ast).
  ///
  /// \param[out] out_TU A non-NULL pointer to store the created
  /// \c CXTranslationUnit.
  ///
  /// \returns Zero on success, otherwise returns an error code.
  int clang_createTranslationUnit2(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> ast_filename,
    ffi.Pointer<CXTranslationUnit> out_TU,
  ) {
    return _clang_createTranslationUnit2(
      CIdx,
      ast_filename,
      out_TU,
    );
  }

  late final _clang_createTranslationUnit2_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CXIndex, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<CXTranslationUnit>)>>('clang_createTranslationUnit2');
  late final _clang_createTranslationUnit2 =
      _clang_createTranslationUnit2_ptr.asFunction<
          int Function(CXIndex, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<CXTranslationUnit>)>();

  /// Returns the set of flags that is suitable for parsing a translation
  /// unit that is being edited.
  ///
  /// The set of flags returned provide options for \c clang_parseTranslationUnit()
  /// to indicate that the translation unit is likely to be reparsed many times,
  /// either explicitly (via \c clang_reparseTranslationUnit()) or implicitly
  /// (e.g., by code completion (\c clang_codeCompletionAt())). The returned flag
  /// set contains an unspecified set of optimizations (e.g., the precompiled
  /// preamble) geared toward improving the performance of these routines. The
  /// set of optimizations enabled may change from one version to the next.
  int clang_defaultEditingTranslationUnitOptions() {
    return _clang_defaultEditingTranslationUnitOptions();
  }

  late final _clang_defaultEditingTranslationUnitOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'clang_defaultEditingTranslationUnitOptions');
  late final _clang_defaultEditingTranslationUnitOptions =
      _clang_defaultEditingTranslationUnitOptions_ptr
          .asFunction<int Function()>();

  /// Same as \c clang_parseTranslationUnit2, but returns
  /// the \c CXTranslationUnit instead of an error code.  In case of an error this
  /// routine returns a \c NULL \c CXTranslationUnit, without further detailed
  /// error codes.
  CXTranslationUnit clang_parseTranslationUnit(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> source_filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_args,
    int num_command_line_args,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    int options,
  ) {
    return _clang_parseTranslationUnit(
      CIdx,
      source_filename,
      command_line_args,
      num_command_line_args,
      unsaved_files,
      num_unsaved_files,
      options,
    );
  }

  late final _clang_parseTranslationUnit_ptr = _lookup<
      ffi.NativeFunction<
          CXTranslationUnit Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Uint32)>>('clang_parseTranslationUnit');
  late final _clang_parseTranslationUnit =
      _clang_parseTranslationUnit_ptr.asFunction<
          CXTranslationUnit Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              int,
              ffi.Pointer<CXUnsavedFile>,
              int,
              int)>();

  /// Parse the given source file and the translation unit corresponding
  /// to that file.
  ///
  /// This routine is the main entry point for the Clang C API, providing the
  /// ability to parse a source file into a translation unit that can then be
  /// queried by other functions in the API. This routine accepts a set of
  /// command-line arguments so that the compilation can be configured in the same
  /// way that the compiler is configured on the command line.
  ///
  /// \param CIdx The index object with which the translation unit will be
  /// associated.
  ///
  /// \param source_filename The name of the source file to load, or NULL if the
  /// source file is included in \c command_line_args.
  ///
  /// \param command_line_args The command-line arguments that would be
  /// passed to the \c clang executable if it were being invoked out-of-process.
  /// These command-line options will be parsed and will affect how the translation
  /// unit is parsed. Note that the following options are ignored: '-c',
  /// '-emit-ast', '-fsyntax-only' (which is the default), and '-o \<output file>'.
  ///
  /// \param num_command_line_args The number of command-line arguments in
  /// \c command_line_args.
  ///
  /// \param unsaved_files the files that have not yet been saved to disk
  /// but may be required for parsing, including the contents of
  /// those files.  The contents and name of these files (as specified by
  /// CXUnsavedFile) are copied when necessary, so the client only needs to
  /// guarantee their validity until the call to this function returns.
  ///
  /// \param num_unsaved_files the number of unsaved file entries in \p
  /// unsaved_files.
  ///
  /// \param options A bitmask of options that affects how the translation unit
  /// is managed but not its compilation. This should be a bitwise OR of the
  /// CXTranslationUnit_XXX flags.
  ///
  /// \param[out] out_TU A non-NULL pointer to store the created
  /// \c CXTranslationUnit, describing the parsed code and containing any
  /// diagnostics produced by the compiler.
  ///
  /// \returns Zero on success, otherwise returns an error code.
  int clang_parseTranslationUnit2(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> source_filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_args,
    int num_command_line_args,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    int options,
    ffi.Pointer<CXTranslationUnit> out_TU,
  ) {
    return _clang_parseTranslationUnit2(
      CIdx,
      source_filename,
      command_line_args,
      num_command_line_args,
      unsaved_files,
      num_unsaved_files,
      options,
      out_TU,
    );
  }

  late final _clang_parseTranslationUnit2_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<CXTranslationUnit>)>>('clang_parseTranslationUnit2');
  late final _clang_parseTranslationUnit2 =
      _clang_parseTranslationUnit2_ptr.asFunction<
          int Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              int,
              ffi.Pointer<CXUnsavedFile>,
              int,
              int,
              ffi.Pointer<CXTranslationUnit>)>();

  /// Same as clang_parseTranslationUnit2 but requires a full command line
  /// for \c command_line_args including argv[0]. This is useful if the standard
  /// library paths are relative to the binary.
  int clang_parseTranslationUnit2FullArgv(
    CXIndex CIdx,
    ffi.Pointer<ffi.Int8> source_filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_args,
    int num_command_line_args,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    int options,
    ffi.Pointer<CXTranslationUnit> out_TU,
  ) {
    return _clang_parseTranslationUnit2FullArgv(
      CIdx,
      source_filename,
      command_line_args,
      num_command_line_args,
      unsaved_files,
      num_unsaved_files,
      options,
      out_TU,
    );
  }

  late final _clang_parseTranslationUnit2FullArgv_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  CXIndex,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Int32,
                  ffi.Pointer<CXUnsavedFile>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<CXTranslationUnit>)>>(
      'clang_parseTranslationUnit2FullArgv');
  late final _clang_parseTranslationUnit2FullArgv =
      _clang_parseTranslationUnit2FullArgv_ptr.asFunction<
          int Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              int,
              ffi.Pointer<CXUnsavedFile>,
              int,
              int,
              ffi.Pointer<CXTranslationUnit>)>();

  /// Returns the set of flags that is suitable for saving a translation
  /// unit.
  ///
  /// The set of flags returned provide options for
  /// \c clang_saveTranslationUnit() by default. The returned flag
  /// set contains an unspecified set of options that save translation units with
  /// the most commonly-requested data.
  int clang_defaultSaveOptions(
    CXTranslationUnit TU,
  ) {
    return _clang_defaultSaveOptions(
      TU,
    );
  }

  late final _clang_defaultSaveOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>(
          'clang_defaultSaveOptions');
  late final _clang_defaultSaveOptions = _clang_defaultSaveOptions_ptr
      .asFunction<int Function(CXTranslationUnit)>();

  /// Saves a translation unit into a serialized representation of
  /// that translation unit on disk.
  ///
  /// Any translation unit that was parsed without error can be saved
  /// into a file. The translation unit can then be deserialized into a
  /// new \c CXTranslationUnit with \c clang_createTranslationUnit() or,
  /// if it is an incomplete translation unit that corresponds to a
  /// header, used as a precompiled header when parsing other translation
  /// units.
  ///
  /// \param TU The translation unit to save.
  ///
  /// \param FileName The file to which the translation unit will be saved.
  ///
  /// \param options A bitmask of options that affects how the translation unit
  /// is saved. This should be a bitwise OR of the
  /// CXSaveTranslationUnit_XXX flags.
  ///
  /// \returns A value that will match one of the enumerators of the CXSaveError
  /// enumeration. Zero (CXSaveError_None) indicates that the translation unit was
  /// saved successfully, while a non-zero value indicates that a problem occurred.
  int clang_saveTranslationUnit(
    CXTranslationUnit TU,
    ffi.Pointer<ffi.Int8> FileName,
    int options,
  ) {
    return _clang_saveTranslationUnit(
      TU,
      FileName,
      options,
    );
  }

  late final _clang_saveTranslationUnit_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CXTranslationUnit, ffi.Pointer<ffi.Int8>,
              ffi.Uint32)>>('clang_saveTranslationUnit');
  late final _clang_saveTranslationUnit =
      _clang_saveTranslationUnit_ptr.asFunction<
          int Function(CXTranslationUnit, ffi.Pointer<ffi.Int8>, int)>();

  /// Suspend a translation unit in order to free memory associated with it.
  ///
  /// A suspended translation unit uses significantly less memory but on the other
  /// side does not support any other calls than \c clang_reparseTranslationUnit
  /// to resume it or \c clang_disposeTranslationUnit to dispose it completely.
  int clang_suspendTranslationUnit(
    CXTranslationUnit arg0,
  ) {
    return _clang_suspendTranslationUnit(
      arg0,
    );
  }

  late final _clang_suspendTranslationUnit_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>(
          'clang_suspendTranslationUnit');
  late final _clang_suspendTranslationUnit = _clang_suspendTranslationUnit_ptr
      .asFunction<int Function(CXTranslationUnit)>();

  /// Destroy the specified CXTranslationUnit object.
  void clang_disposeTranslationUnit(
    CXTranslationUnit arg0,
  ) {
    return _clang_disposeTranslationUnit(
      arg0,
    );
  }

  late final _clang_disposeTranslationUnit_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXTranslationUnit)>>(
          'clang_disposeTranslationUnit');
  late final _clang_disposeTranslationUnit = _clang_disposeTranslationUnit_ptr
      .asFunction<void Function(CXTranslationUnit)>();

  /// Returns the set of flags that is suitable for reparsing a translation
  /// unit.
  ///
  /// The set of flags returned provide options for
  /// \c clang_reparseTranslationUnit() by default. The returned flag
  /// set contains an unspecified set of optimizations geared toward common uses
  /// of reparsing. The set of optimizations enabled may change from one version
  /// to the next.
  int clang_defaultReparseOptions(
    CXTranslationUnit TU,
  ) {
    return _clang_defaultReparseOptions(
      TU,
    );
  }

  late final _clang_defaultReparseOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>(
          'clang_defaultReparseOptions');
  late final _clang_defaultReparseOptions = _clang_defaultReparseOptions_ptr
      .asFunction<int Function(CXTranslationUnit)>();

  /// Reparse the source files that produced this translation unit.
  ///
  /// This routine can be used to re-parse the source files that originally
  /// created the given translation unit, for example because those source files
  /// have changed (either on disk or as passed via \p unsaved_files). The
  /// source code will be reparsed with the same command-line options as it
  /// was originally parsed.
  ///
  /// Reparsing a translation unit invalidates all cursors and source locations
  /// that refer into that translation unit. This makes reparsing a translation
  /// unit semantically equivalent to destroying the translation unit and then
  /// creating a new translation unit with the same command-line arguments.
  /// However, it may be more efficient to reparse a translation
  /// unit using this routine.
  ///
  /// \param TU The translation unit whose contents will be re-parsed. The
  /// translation unit must originally have been built with
  /// \c clang_createTranslationUnitFromSourceFile().
  ///
  /// \param num_unsaved_files The number of unsaved file entries in \p
  /// unsaved_files.
  ///
  /// \param unsaved_files The files that have not yet been saved to disk
  /// but may be required for parsing, including the contents of
  /// those files.  The contents and name of these files (as specified by
  /// CXUnsavedFile) are copied when necessary, so the client only needs to
  /// guarantee their validity until the call to this function returns.
  ///
  /// \param options A bitset of options composed of the flags in CXReparse_Flags.
  /// The function \c clang_defaultReparseOptions() produces a default set of
  /// options recommended for most uses, based on the translation unit.
  ///
  /// \returns 0 if the sources could be reparsed.  A non-zero error code will be
  /// returned if reparsing was impossible, such that the translation unit is
  /// invalid. In such cases, the only valid call for \c TU is
  /// \c clang_disposeTranslationUnit(TU).  The error codes returned by this
  /// routine are described by the \c CXErrorCode enum.
  int clang_reparseTranslationUnit(
    CXTranslationUnit TU,
    int num_unsaved_files,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int options,
  ) {
    return _clang_reparseTranslationUnit(
      TU,
      num_unsaved_files,
      unsaved_files,
      options,
    );
  }

  late final _clang_reparseTranslationUnit_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXTranslationUnit,
              ffi.Uint32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32)>>('clang_reparseTranslationUnit');
  late final _clang_reparseTranslationUnit =
      _clang_reparseTranslationUnit_ptr.asFunction<
          int Function(
              CXTranslationUnit, int, ffi.Pointer<CXUnsavedFile>, int)>();

  /// Returns the human-readable null-terminated C string that represents
  /// the name of the memory category.  This string should never be freed.
  ffi.Pointer<ffi.Int8> clang_getTUResourceUsageName(
    int kind,
  ) {
    return _clang_getTUResourceUsageName(
      kind,
    );
  }

  late final _clang_getTUResourceUsageName_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'clang_getTUResourceUsageName');
  late final _clang_getTUResourceUsageName = _clang_getTUResourceUsageName_ptr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  /// Return the memory usage of a translation unit.  This object
  /// should be released with clang_disposeCXTUResourceUsage().
  CXTUResourceUsage clang_getCXTUResourceUsage(
    CXTranslationUnit TU,
  ) {
    return _clang_getCXTUResourceUsage(
      TU,
    );
  }

  late final _clang_getCXTUResourceUsage_ptr = _lookup<
          ffi.NativeFunction<CXTUResourceUsage Function(CXTranslationUnit)>>(
      'clang_getCXTUResourceUsage');
  late final _clang_getCXTUResourceUsage = _clang_getCXTUResourceUsage_ptr
      .asFunction<CXTUResourceUsage Function(CXTranslationUnit)>();

  void clang_disposeCXTUResourceUsage(
    CXTUResourceUsage usage,
  ) {
    return _clang_disposeCXTUResourceUsage(
      usage,
    );
  }

  late final _clang_disposeCXTUResourceUsage_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXTUResourceUsage)>>(
          'clang_disposeCXTUResourceUsage');
  late final _clang_disposeCXTUResourceUsage =
      _clang_disposeCXTUResourceUsage_ptr
          .asFunction<void Function(CXTUResourceUsage)>();

  /// Get target information for this translation unit.
  ///
  /// The CXTargetInfo object cannot outlive the CXTranslationUnit object.
  CXTargetInfo clang_getTranslationUnitTargetInfo(
    CXTranslationUnit CTUnit,
  ) {
    return _clang_getTranslationUnitTargetInfo(
      CTUnit,
    );
  }

  late final _clang_getTranslationUnitTargetInfo_ptr =
      _lookup<ffi.NativeFunction<CXTargetInfo Function(CXTranslationUnit)>>(
          'clang_getTranslationUnitTargetInfo');
  late final _clang_getTranslationUnitTargetInfo =
      _clang_getTranslationUnitTargetInfo_ptr
          .asFunction<CXTargetInfo Function(CXTranslationUnit)>();

  /// Destroy the CXTargetInfo object.
  void clang_TargetInfo_dispose(
    CXTargetInfo Info,
  ) {
    return _clang_TargetInfo_dispose(
      Info,
    );
  }

  late final _clang_TargetInfo_dispose_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXTargetInfo)>>(
          'clang_TargetInfo_dispose');
  late final _clang_TargetInfo_dispose =
      _clang_TargetInfo_dispose_ptr.asFunction<void Function(CXTargetInfo)>();

  /// Get the normalized target triple as a string.
  ///
  /// Returns the empty string in case of any error.
  CXString clang_TargetInfo_getTriple(
    CXTargetInfo Info,
  ) {
    return _clang_TargetInfo_getTriple(
      Info,
    );
  }

  late final _clang_TargetInfo_getTriple_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXTargetInfo)>>(
          'clang_TargetInfo_getTriple');
  late final _clang_TargetInfo_getTriple = _clang_TargetInfo_getTriple_ptr
      .asFunction<CXString Function(CXTargetInfo)>();

  /// Get the pointer width of the target in bits.
  ///
  /// Returns -1 in case of error.
  int clang_TargetInfo_getPointerWidth(
    CXTargetInfo Info,
  ) {
    return _clang_TargetInfo_getPointerWidth(
      Info,
    );
  }

  late final _clang_TargetInfo_getPointerWidth_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXTargetInfo)>>(
          'clang_TargetInfo_getPointerWidth');
  late final _clang_TargetInfo_getPointerWidth =
      _clang_TargetInfo_getPointerWidth_ptr
          .asFunction<int Function(CXTargetInfo)>();

  /// Retrieve the NULL cursor, which represents no entity.
  CXCursor clang_getNullCursor() {
    return _clang_getNullCursor();
  }

  late final _clang_getNullCursor_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function()>>('clang_getNullCursor');
  late final _clang_getNullCursor =
      _clang_getNullCursor_ptr.asFunction<CXCursor Function()>();

  /// Retrieve the cursor that represents the given translation unit.
  ///
  /// The translation unit cursor can be used to start traversing the
  /// various declarations within the given translation unit.
  CXCursor clang_getTranslationUnitCursor(
    CXTranslationUnit arg0,
  ) {
    return _clang_getTranslationUnitCursor(
      arg0,
    );
  }

  late final _clang_getTranslationUnitCursor_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXTranslationUnit)>>(
          'clang_getTranslationUnitCursor');
  late final _clang_getTranslationUnitCursor =
      _clang_getTranslationUnitCursor_ptr
          .asFunction<CXCursor Function(CXTranslationUnit)>();

  /// Determine whether two cursors are equivalent.
  int clang_equalCursors(
    CXCursor arg0,
    CXCursor arg1,
  ) {
    return _clang_equalCursors(
      arg0,
      arg1,
    );
  }

  late final _clang_equalCursors_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor, CXCursor)>>(
          'clang_equalCursors');
  late final _clang_equalCursors =
      _clang_equalCursors_ptr.asFunction<int Function(CXCursor, CXCursor)>();

  /// Returns non-zero if \p cursor is null.
  int clang_Cursor_isNull(
    CXCursor cursor,
  ) {
    return _clang_Cursor_isNull(
      cursor,
    );
  }

  late final _clang_Cursor_isNull_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_isNull');
  late final _clang_Cursor_isNull =
      _clang_Cursor_isNull_ptr.asFunction<int Function(CXCursor)>();

  /// Compute a hash value for the given cursor.
  int clang_hashCursor(
    CXCursor arg0,
  ) {
    return _clang_hashCursor(
      arg0,
    );
  }

  late final _clang_hashCursor_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_hashCursor');
  late final _clang_hashCursor =
      _clang_hashCursor_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve the kind of the given cursor.
  int clang_getCursorKind(
    CXCursor arg0,
  ) {
    return _clang_getCursorKind(
      arg0,
    );
  }

  late final _clang_getCursorKind_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorKind');
  late final _clang_getCursorKind =
      _clang_getCursorKind_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor kind represents a declaration.
  int clang_isDeclaration(
    int arg0,
  ) {
    return _clang_isDeclaration(
      arg0,
    );
  }

  late final _clang_isDeclaration_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isDeclaration');
  late final _clang_isDeclaration =
      _clang_isDeclaration_ptr.asFunction<int Function(int)>();

  /// Determine whether the given declaration is invalid.
  ///
  /// A declaration is invalid if it could not be parsed successfully.
  ///
  /// \returns non-zero if the cursor represents a declaration and it is
  /// invalid, otherwise NULL.
  int clang_isInvalidDeclaration(
    CXCursor arg0,
  ) {
    return _clang_isInvalidDeclaration(
      arg0,
    );
  }

  late final _clang_isInvalidDeclaration_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_isInvalidDeclaration');
  late final _clang_isInvalidDeclaration =
      _clang_isInvalidDeclaration_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor kind represents a simple
  /// reference.
  ///
  /// Note that other kinds of cursors (such as expressions) can also refer to
  /// other cursors. Use clang_getCursorReferenced() to determine whether a
  /// particular cursor refers to another entity.
  int clang_isReference(
    int arg0,
  ) {
    return _clang_isReference(
      arg0,
    );
  }

  late final _clang_isReference_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isReference');
  late final _clang_isReference =
      _clang_isReference_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor kind represents an expression.
  int clang_isExpression(
    int arg0,
  ) {
    return _clang_isExpression(
      arg0,
    );
  }

  late final _clang_isExpression_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isExpression');
  late final _clang_isExpression =
      _clang_isExpression_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor kind represents a statement.
  int clang_isStatement(
    int arg0,
  ) {
    return _clang_isStatement(
      arg0,
    );
  }

  late final _clang_isStatement_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isStatement');
  late final _clang_isStatement =
      _clang_isStatement_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor kind represents an attribute.
  int clang_isAttribute(
    int arg0,
  ) {
    return _clang_isAttribute(
      arg0,
    );
  }

  late final _clang_isAttribute_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isAttribute');
  late final _clang_isAttribute =
      _clang_isAttribute_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor has any attributes.
  int clang_Cursor_hasAttrs(
    CXCursor C,
  ) {
    return _clang_Cursor_hasAttrs(
      C,
    );
  }

  late final _clang_Cursor_hasAttrs_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_hasAttrs');
  late final _clang_Cursor_hasAttrs =
      _clang_Cursor_hasAttrs_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor kind represents an invalid
  /// cursor.
  int clang_isInvalid(
    int arg0,
  ) {
    return _clang_isInvalid(
      arg0,
    );
  }

  late final _clang_isInvalid_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isInvalid');
  late final _clang_isInvalid =
      _clang_isInvalid_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor kind represents a translation
  /// unit.
  int clang_isTranslationUnit(
    int arg0,
  ) {
    return _clang_isTranslationUnit(
      arg0,
    );
  }

  late final _clang_isTranslationUnit_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isTranslationUnit');
  late final _clang_isTranslationUnit =
      _clang_isTranslationUnit_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor represents a preprocessing
  /// element, such as a preprocessor directive or macro instantiation.
  int clang_isPreprocessing(
    int arg0,
  ) {
    return _clang_isPreprocessing(
      arg0,
    );
  }

  late final _clang_isPreprocessing_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isPreprocessing');
  late final _clang_isPreprocessing =
      _clang_isPreprocessing_ptr.asFunction<int Function(int)>();

  /// Determine whether the given cursor represents a currently
  /// unexposed piece of the AST (e.g., CXCursor_UnexposedStmt).
  int clang_isUnexposed(
    int arg0,
  ) {
    return _clang_isUnexposed(
      arg0,
    );
  }

  late final _clang_isUnexposed_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'clang_isUnexposed');
  late final _clang_isUnexposed =
      _clang_isUnexposed_ptr.asFunction<int Function(int)>();

  /// Determine the linkage of the entity referred to by a given cursor.
  int clang_getCursorLinkage(
    CXCursor cursor,
  ) {
    return _clang_getCursorLinkage(
      cursor,
    );
  }

  late final _clang_getCursorLinkage_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorLinkage');
  late final _clang_getCursorLinkage =
      _clang_getCursorLinkage_ptr.asFunction<int Function(CXCursor)>();

  /// Describe the visibility of the entity referred to by a cursor.
  ///
  /// This returns the default visibility if not explicitly specified by
  /// a visibility attribute. The default visibility may be changed by
  /// commandline arguments.
  ///
  /// \param cursor The cursor to query.
  ///
  /// \returns The visibility of the cursor.
  int clang_getCursorVisibility(
    CXCursor cursor,
  ) {
    return _clang_getCursorVisibility(
      cursor,
    );
  }

  late final _clang_getCursorVisibility_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorVisibility');
  late final _clang_getCursorVisibility =
      _clang_getCursorVisibility_ptr.asFunction<int Function(CXCursor)>();

  /// Determine the availability of the entity that this cursor refers to,
  /// taking the current target platform into account.
  ///
  /// \param cursor The cursor to query.
  ///
  /// \returns The availability of the cursor.
  int clang_getCursorAvailability(
    CXCursor cursor,
  ) {
    return _clang_getCursorAvailability(
      cursor,
    );
  }

  late final _clang_getCursorAvailability_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorAvailability');
  late final _clang_getCursorAvailability =
      _clang_getCursorAvailability_ptr.asFunction<int Function(CXCursor)>();

  /// Determine the availability of the entity that this cursor refers to
  /// on any platforms for which availability information is known.
  ///
  /// \param cursor The cursor to query.
  ///
  /// \param always_deprecated If non-NULL, will be set to indicate whether the
  /// entity is deprecated on all platforms.
  ///
  /// \param deprecated_message If non-NULL, will be set to the message text
  /// provided along with the unconditional deprecation of this entity. The client
  /// is responsible for deallocating this string.
  ///
  /// \param always_unavailable If non-NULL, will be set to indicate whether the
  /// entity is unavailable on all platforms.
  ///
  /// \param unavailable_message If non-NULL, will be set to the message text
  /// provided along with the unconditional unavailability of this entity. The
  /// client is responsible for deallocating this string.
  ///
  /// \param availability If non-NULL, an array of CXPlatformAvailability instances
  /// that will be populated with platform availability information, up to either
  /// the number of platforms for which availability information is available (as
  /// returned by this function) or \c availability_size, whichever is smaller.
  ///
  /// \param availability_size The number of elements available in the
  /// \c availability array.
  ///
  /// \returns The number of platforms (N) for which availability information is
  /// available (which is unrelated to \c availability_size).
  ///
  /// Note that the client is responsible for calling
  /// \c clang_disposeCXPlatformAvailability to free each of the
  /// platform-availability structures returned. There are
  /// \c min(N, availability_size) such structures.
  int clang_getCursorPlatformAvailability(
    CXCursor cursor,
    ffi.Pointer<ffi.Int32> always_deprecated,
    ffi.Pointer<CXString> deprecated_message,
    ffi.Pointer<ffi.Int32> always_unavailable,
    ffi.Pointer<CXString> unavailable_message,
    ffi.Pointer<CXPlatformAvailability> availability,
    int availability_size,
  ) {
    return _clang_getCursorPlatformAvailability(
      cursor,
      always_deprecated,
      deprecated_message,
      always_unavailable,
      unavailable_message,
      availability,
      availability_size,
    );
  }

  late final _clang_getCursorPlatformAvailability_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXCursor,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<CXPlatformAvailability>,
              ffi.Int32)>>('clang_getCursorPlatformAvailability');
  late final _clang_getCursorPlatformAvailability =
      _clang_getCursorPlatformAvailability_ptr.asFunction<
          int Function(
              CXCursor,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<CXPlatformAvailability>,
              int)>();

  /// Free the memory associated with a \c CXPlatformAvailability structure.
  void clang_disposeCXPlatformAvailability(
    ffi.Pointer<CXPlatformAvailability> availability,
  ) {
    return _clang_disposeCXPlatformAvailability(
      availability,
    );
  }

  late final _clang_disposeCXPlatformAvailability_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CXPlatformAvailability>)>>(
      'clang_disposeCXPlatformAvailability');
  late final _clang_disposeCXPlatformAvailability =
      _clang_disposeCXPlatformAvailability_ptr
          .asFunction<void Function(ffi.Pointer<CXPlatformAvailability>)>();

  /// Determine the "language" of the entity referred to by a given cursor.
  int clang_getCursorLanguage(
    CXCursor cursor,
  ) {
    return _clang_getCursorLanguage(
      cursor,
    );
  }

  late final _clang_getCursorLanguage_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorLanguage');
  late final _clang_getCursorLanguage =
      _clang_getCursorLanguage_ptr.asFunction<int Function(CXCursor)>();

  /// Determine the "thread-local storage (TLS) kind" of the declaration
  /// referred to by a cursor.
  int clang_getCursorTLSKind(
    CXCursor cursor,
  ) {
    return _clang_getCursorTLSKind(
      cursor,
    );
  }

  late final _clang_getCursorTLSKind_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorTLSKind');
  late final _clang_getCursorTLSKind =
      _clang_getCursorTLSKind_ptr.asFunction<int Function(CXCursor)>();

  /// Returns the translation unit that a cursor originated from.
  CXTranslationUnit clang_Cursor_getTranslationUnit(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getTranslationUnit(
      arg0,
    );
  }

  late final _clang_Cursor_getTranslationUnit_ptr =
      _lookup<ffi.NativeFunction<CXTranslationUnit Function(CXCursor)>>(
          'clang_Cursor_getTranslationUnit');
  late final _clang_Cursor_getTranslationUnit =
      _clang_Cursor_getTranslationUnit_ptr
          .asFunction<CXTranslationUnit Function(CXCursor)>();

  /// Creates an empty CXCursorSet.
  CXCursorSet clang_createCXCursorSet() {
    return _clang_createCXCursorSet();
  }

  late final _clang_createCXCursorSet_ptr =
      _lookup<ffi.NativeFunction<CXCursorSet Function()>>(
          'clang_createCXCursorSet');
  late final _clang_createCXCursorSet =
      _clang_createCXCursorSet_ptr.asFunction<CXCursorSet Function()>();

  /// Disposes a CXCursorSet and releases its associated memory.
  void clang_disposeCXCursorSet(
    CXCursorSet cset,
  ) {
    return _clang_disposeCXCursorSet(
      cset,
    );
  }

  late final _clang_disposeCXCursorSet_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXCursorSet)>>(
          'clang_disposeCXCursorSet');
  late final _clang_disposeCXCursorSet =
      _clang_disposeCXCursorSet_ptr.asFunction<void Function(CXCursorSet)>();

  /// Queries a CXCursorSet to see if it contains a specific CXCursor.
  ///
  /// \returns non-zero if the set contains the specified cursor.
  int clang_CXCursorSet_contains(
    CXCursorSet cset,
    CXCursor cursor,
  ) {
    return _clang_CXCursorSet_contains(
      cset,
      cursor,
    );
  }

  late final _clang_CXCursorSet_contains_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursorSet, CXCursor)>>(
          'clang_CXCursorSet_contains');
  late final _clang_CXCursorSet_contains = _clang_CXCursorSet_contains_ptr
      .asFunction<int Function(CXCursorSet, CXCursor)>();

  /// Inserts a CXCursor into a CXCursorSet.
  ///
  /// \returns zero if the CXCursor was already in the set, and non-zero otherwise.
  int clang_CXCursorSet_insert(
    CXCursorSet cset,
    CXCursor cursor,
  ) {
    return _clang_CXCursorSet_insert(
      cset,
      cursor,
    );
  }

  late final _clang_CXCursorSet_insert_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursorSet, CXCursor)>>(
          'clang_CXCursorSet_insert');
  late final _clang_CXCursorSet_insert = _clang_CXCursorSet_insert_ptr
      .asFunction<int Function(CXCursorSet, CXCursor)>();

  /// Determine the semantic parent of the given cursor.
  ///
  /// The semantic parent of a cursor is the cursor that semantically contains
  /// the given \p cursor. For many declarations, the lexical and semantic parents
  /// are equivalent (the lexical parent is returned by
  /// \c clang_getCursorLexicalParent()). They diverge when declarations or
  /// definitions are provided out-of-line. For example:
  ///
  /// \code
  /// class C {
  /// void f();
  /// };
  ///
  /// void C::f() { }
  /// \endcode
  ///
  /// In the out-of-line definition of \c C::f, the semantic parent is
  /// the class \c C, of which this function is a member. The lexical parent is
  /// the place where the declaration actually occurs in the source code; in this
  /// case, the definition occurs in the translation unit. In general, the
  /// lexical parent for a given entity can change without affecting the semantics
  /// of the program, and the lexical parent of different declarations of the
  /// same entity may be different. Changing the semantic parent of a declaration,
  /// on the other hand, can have a major impact on semantics, and redeclarations
  /// of a particular entity should all have the same semantic context.
  ///
  /// In the example above, both declarations of \c C::f have \c C as their
  /// semantic context, while the lexical context of the first \c C::f is \c C
  /// and the lexical context of the second \c C::f is the translation unit.
  ///
  /// For global declarations, the semantic parent is the translation unit.
  CXCursor clang_getCursorSemanticParent(
    CXCursor cursor,
  ) {
    return _clang_getCursorSemanticParent(
      cursor,
    );
  }

  late final _clang_getCursorSemanticParent_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getCursorSemanticParent');
  late final _clang_getCursorSemanticParent = _clang_getCursorSemanticParent_ptr
      .asFunction<CXCursor Function(CXCursor)>();

  /// Determine the lexical parent of the given cursor.
  ///
  /// The lexical parent of a cursor is the cursor in which the given \p cursor
  /// was actually written. For many declarations, the lexical and semantic parents
  /// are equivalent (the semantic parent is returned by
  /// \c clang_getCursorSemanticParent()). They diverge when declarations or
  /// definitions are provided out-of-line. For example:
  ///
  /// \code
  /// class C {
  /// void f();
  /// };
  ///
  /// void C::f() { }
  /// \endcode
  ///
  /// In the out-of-line definition of \c C::f, the semantic parent is
  /// the class \c C, of which this function is a member. The lexical parent is
  /// the place where the declaration actually occurs in the source code; in this
  /// case, the definition occurs in the translation unit. In general, the
  /// lexical parent for a given entity can change without affecting the semantics
  /// of the program, and the lexical parent of different declarations of the
  /// same entity may be different. Changing the semantic parent of a declaration,
  /// on the other hand, can have a major impact on semantics, and redeclarations
  /// of a particular entity should all have the same semantic context.
  ///
  /// In the example above, both declarations of \c C::f have \c C as their
  /// semantic context, while the lexical context of the first \c C::f is \c C
  /// and the lexical context of the second \c C::f is the translation unit.
  ///
  /// For declarations written in the global scope, the lexical parent is
  /// the translation unit.
  CXCursor clang_getCursorLexicalParent(
    CXCursor cursor,
  ) {
    return _clang_getCursorLexicalParent(
      cursor,
    );
  }

  late final _clang_getCursorLexicalParent_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getCursorLexicalParent');
  late final _clang_getCursorLexicalParent = _clang_getCursorLexicalParent_ptr
      .asFunction<CXCursor Function(CXCursor)>();

  /// Determine the set of methods that are overridden by the given
  /// method.
  ///
  /// In both Objective-C and C++, a method (aka virtual member function,
  /// in C++) can override a virtual method in a base class. For
  /// Objective-C, a method is said to override any method in the class's
  /// base class, its protocols, or its categories' protocols, that has the same
  /// selector and is of the same kind (class or instance).
  /// If no such method exists, the search continues to the class's superclass,
  /// its protocols, and its categories, and so on. A method from an Objective-C
  /// implementation is considered to override the same methods as its
  /// corresponding method in the interface.
  ///
  /// For C++, a virtual member function overrides any virtual member
  /// function with the same signature that occurs in its base
  /// classes. With multiple inheritance, a virtual member function can
  /// override several virtual member functions coming from different
  /// base classes.
  ///
  /// In all cases, this function determines the immediate overridden
  /// method, rather than all of the overridden methods. For example, if
  /// a method is originally declared in a class A, then overridden in B
  /// (which in inherits from A) and also in C (which inherited from B),
  /// then the only overridden method returned from this function when
  /// invoked on C's method will be B's method. The client may then
  /// invoke this function again, given the previously-found overridden
  /// methods, to map out the complete method-override set.
  ///
  /// \param cursor A cursor representing an Objective-C or C++
  /// method. This routine will compute the set of methods that this
  /// method overrides.
  ///
  /// \param overridden A pointer whose pointee will be replaced with a
  /// pointer to an array of cursors, representing the set of overridden
  /// methods. If there are no overridden methods, the pointee will be
  /// set to NULL. The pointee must be freed via a call to
  /// \c clang_disposeOverriddenCursors().
  ///
  /// \param num_overridden A pointer to the number of overridden
  /// functions, will be set to the number of overridden functions in the
  /// array pointed to by \p overridden.
  void clang_getOverriddenCursors(
    CXCursor cursor,
    ffi.Pointer<ffi.Pointer<CXCursor>> overridden,
    ffi.Pointer<ffi.Uint32> num_overridden,
  ) {
    return _clang_getOverriddenCursors(
      cursor,
      overridden,
      num_overridden,
    );
  }

  late final _clang_getOverriddenCursors_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXCursor, ffi.Pointer<ffi.Pointer<CXCursor>>,
              ffi.Pointer<ffi.Uint32>)>>('clang_getOverriddenCursors');
  late final _clang_getOverriddenCursors =
      _clang_getOverriddenCursors_ptr.asFunction<
          void Function(CXCursor, ffi.Pointer<ffi.Pointer<CXCursor>>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Free the set of overridden cursors returned by \c
  /// clang_getOverriddenCursors().
  void clang_disposeOverriddenCursors(
    ffi.Pointer<CXCursor> overridden,
  ) {
    return _clang_disposeOverriddenCursors(
      overridden,
    );
  }

  late final _clang_disposeOverriddenCursors_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CXCursor>)>>(
          'clang_disposeOverriddenCursors');
  late final _clang_disposeOverriddenCursors =
      _clang_disposeOverriddenCursors_ptr
          .asFunction<void Function(ffi.Pointer<CXCursor>)>();

  /// Retrieve the file that is included by the given inclusion directive
  /// cursor.
  CXFile clang_getIncludedFile(
    CXCursor cursor,
  ) {
    return _clang_getIncludedFile(
      cursor,
    );
  }

  late final _clang_getIncludedFile_ptr =
      _lookup<ffi.NativeFunction<CXFile Function(CXCursor)>>(
          'clang_getIncludedFile');
  late final _clang_getIncludedFile =
      _clang_getIncludedFile_ptr.asFunction<CXFile Function(CXCursor)>();

  /// Map a source location to the cursor that describes the entity at that
  /// location in the source code.
  ///
  /// clang_getCursor() maps an arbitrary source location within a translation
  /// unit down to the most specific cursor that describes the entity at that
  /// location. For example, given an expression \c x + y, invoking
  /// clang_getCursor() with a source location pointing to "x" will return the
  /// cursor for "x"; similarly for "y". If the cursor points anywhere between
  /// "x" or "y" (e.g., on the + or the whitespace around it), clang_getCursor()
  /// will return a cursor referring to the "+" expression.
  ///
  /// \returns a cursor representing the entity at the given source location, or
  /// a NULL cursor if no such entity can be found.
  CXCursor clang_getCursor(
    CXTranslationUnit arg0,
    CXSourceLocation arg1,
  ) {
    return _clang_getCursor(
      arg0,
      arg1,
    );
  }

  late final _clang_getCursor_ptr = _lookup<
      ffi.NativeFunction<
          CXCursor Function(
              CXTranslationUnit, CXSourceLocation)>>('clang_getCursor');
  late final _clang_getCursor = _clang_getCursor_ptr
      .asFunction<CXCursor Function(CXTranslationUnit, CXSourceLocation)>();

  /// Retrieve the physical location of the source constructor referenced
  /// by the given cursor.
  ///
  /// The location of a declaration is typically the location of the name of that
  /// declaration, where the name of that declaration would occur if it is
  /// unnamed, or some keyword that introduces that particular declaration.
  /// The location of a reference is where that reference occurs within the
  /// source code.
  CXSourceLocation clang_getCursorLocation(
    CXCursor arg0,
  ) {
    return _clang_getCursorLocation(
      arg0,
    );
  }

  late final _clang_getCursorLocation_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function(CXCursor)>>(
          'clang_getCursorLocation');
  late final _clang_getCursorLocation = _clang_getCursorLocation_ptr
      .asFunction<CXSourceLocation Function(CXCursor)>();

  /// Retrieve the physical extent of the source construct referenced by
  /// the given cursor.
  ///
  /// The extent of a cursor starts with the file/line/column pointing at the
  /// first character within the source construct that the cursor refers to and
  /// ends with the last character within that source construct. For a
  /// declaration, the extent covers the declaration itself. For a reference,
  /// the extent covers the location of the reference (e.g., where the referenced
  /// entity was actually used).
  CXSourceRange clang_getCursorExtent(
    CXCursor arg0,
  ) {
    return _clang_getCursorExtent(
      arg0,
    );
  }

  late final _clang_getCursorExtent_ptr =
      _lookup<ffi.NativeFunction<CXSourceRange Function(CXCursor)>>(
          'clang_getCursorExtent');
  late final _clang_getCursorExtent =
      _clang_getCursorExtent_ptr.asFunction<CXSourceRange Function(CXCursor)>();

  /// Retrieve the type of a CXCursor (if any).
  CXType clang_getCursorType(
    CXCursor C,
  ) {
    return _clang_getCursorType(
      C,
    );
  }

  late final _clang_getCursorType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_getCursorType');
  late final _clang_getCursorType =
      _clang_getCursorType_ptr.asFunction<CXType Function(CXCursor)>();

  /// Pretty-print the underlying type using the rules of the
  /// language of the translation unit from which it came.
  ///
  /// If the type is invalid, an empty string is returned.
  CXString clang_getTypeSpelling(
    CXType CT,
  ) {
    return _clang_getTypeSpelling(
      CT,
    );
  }

  late final _clang_getTypeSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXType)>>(
          'clang_getTypeSpelling');
  late final _clang_getTypeSpelling =
      _clang_getTypeSpelling_ptr.asFunction<CXString Function(CXType)>();

  /// Retrieve the underlying type of a typedef declaration.
  ///
  /// If the cursor does not reference a typedef declaration, an invalid type is
  /// returned.
  CXType clang_getTypedefDeclUnderlyingType(
    CXCursor C,
  ) {
    return _clang_getTypedefDeclUnderlyingType(
      C,
    );
  }

  late final _clang_getTypedefDeclUnderlyingType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_getTypedefDeclUnderlyingType');
  late final _clang_getTypedefDeclUnderlyingType =
      _clang_getTypedefDeclUnderlyingType_ptr
          .asFunction<CXType Function(CXCursor)>();

  /// Retrieve the integer type of an enum declaration.
  ///
  /// If the cursor does not reference an enum declaration, an invalid type is
  /// returned.
  CXType clang_getEnumDeclIntegerType(
    CXCursor C,
  ) {
    return _clang_getEnumDeclIntegerType(
      C,
    );
  }

  late final _clang_getEnumDeclIntegerType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_getEnumDeclIntegerType');
  late final _clang_getEnumDeclIntegerType =
      _clang_getEnumDeclIntegerType_ptr.asFunction<CXType Function(CXCursor)>();

  /// Retrieve the integer value of an enum constant declaration as a signed
  /// long long.
  ///
  /// If the cursor does not reference an enum constant declaration, LLONG_MIN is returned.
  /// Since this is also potentially a valid constant value, the kind of the cursor
  /// must be verified before calling this function.
  int clang_getEnumConstantDeclValue(
    CXCursor C,
  ) {
    return _clang_getEnumConstantDeclValue(
      C,
    );
  }

  late final _clang_getEnumConstantDeclValue_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXCursor)>>(
          'clang_getEnumConstantDeclValue');
  late final _clang_getEnumConstantDeclValue =
      _clang_getEnumConstantDeclValue_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve the integer value of an enum constant declaration as an unsigned
  /// long long.
  ///
  /// If the cursor does not reference an enum constant declaration, ULLONG_MAX is returned.
  /// Since this is also potentially a valid constant value, the kind of the cursor
  /// must be verified before calling this function.
  int clang_getEnumConstantDeclUnsignedValue(
    CXCursor C,
  ) {
    return _clang_getEnumConstantDeclUnsignedValue(
      C,
    );
  }

  late final _clang_getEnumConstantDeclUnsignedValue_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(CXCursor)>>(
          'clang_getEnumConstantDeclUnsignedValue');
  late final _clang_getEnumConstantDeclUnsignedValue =
      _clang_getEnumConstantDeclUnsignedValue_ptr
          .asFunction<int Function(CXCursor)>();

  /// Retrieve the bit width of a bit field declaration as an integer.
  ///
  /// If a cursor that is not a bit field declaration is passed in, -1 is returned.
  int clang_getFieldDeclBitWidth(
    CXCursor C,
  ) {
    return _clang_getFieldDeclBitWidth(
      C,
    );
  }

  late final _clang_getFieldDeclBitWidth_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getFieldDeclBitWidth');
  late final _clang_getFieldDeclBitWidth =
      _clang_getFieldDeclBitWidth_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve the number of non-variadic arguments associated with a given
  /// cursor.
  ///
  /// The number of arguments can be determined for calls as well as for
  /// declarations of functions or methods. For other cursors -1 is returned.
  int clang_Cursor_getNumArguments(
    CXCursor C,
  ) {
    return _clang_Cursor_getNumArguments(
      C,
    );
  }

  late final _clang_Cursor_getNumArguments_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_getNumArguments');
  late final _clang_Cursor_getNumArguments =
      _clang_Cursor_getNumArguments_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve the argument cursor of a function or method.
  ///
  /// The argument cursor can be determined for calls as well as for declarations
  /// of functions or methods. For other cursors and for invalid indices, an
  /// invalid cursor is returned.
  CXCursor clang_Cursor_getArgument(
    CXCursor C,
    int i,
  ) {
    return _clang_Cursor_getArgument(
      C,
      i,
    );
  }

  late final _clang_Cursor_getArgument_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getArgument');
  late final _clang_Cursor_getArgument = _clang_Cursor_getArgument_ptr
      .asFunction<CXCursor Function(CXCursor, int)>();

  /// Returns the number of template args of a function decl representing a
  /// template specialization.
  ///
  /// If the argument cursor cannot be converted into a template function
  /// declaration, -1 is returned.
  ///
  /// For example, for the following declaration and specialization:
  /// template <typename T, int kInt, bool kBool>
  /// void foo() { ... }
  ///
  /// template <>
  /// void foo<float, -7, true>();
  ///
  /// The value 3 would be returned from this call.
  int clang_Cursor_getNumTemplateArguments(
    CXCursor C,
  ) {
    return _clang_Cursor_getNumTemplateArguments(
      C,
    );
  }

  late final _clang_Cursor_getNumTemplateArguments_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_getNumTemplateArguments');
  late final _clang_Cursor_getNumTemplateArguments =
      _clang_Cursor_getNumTemplateArguments_ptr
          .asFunction<int Function(CXCursor)>();

  /// Retrieve the kind of the I'th template argument of the CXCursor C.
  ///
  /// If the argument CXCursor does not represent a FunctionDecl, an invalid
  /// template argument kind is returned.
  ///
  /// For example, for the following declaration and specialization:
  /// template <typename T, int kInt, bool kBool>
  /// void foo() { ... }
  ///
  /// template <>
  /// void foo<float, -7, true>();
  ///
  /// For I = 0, 1, and 2, Type, Integral, and Integral will be returned,
  /// respectively.
  int clang_Cursor_getTemplateArgumentKind(
    CXCursor C,
    int I,
  ) {
    return _clang_Cursor_getTemplateArgumentKind(
      C,
      I,
    );
  }

  late final _clang_Cursor_getTemplateArgumentKind_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getTemplateArgumentKind');
  late final _clang_Cursor_getTemplateArgumentKind =
      _clang_Cursor_getTemplateArgumentKind_ptr
          .asFunction<int Function(CXCursor, int)>();

  /// Retrieve a CXType representing the type of a TemplateArgument of a
  /// function decl representing a template specialization.
  ///
  /// If the argument CXCursor does not represent a FunctionDecl whose I'th
  /// template argument has a kind of CXTemplateArgKind_Integral, an invalid type
  /// is returned.
  ///
  /// For example, for the following declaration and specialization:
  /// template <typename T, int kInt, bool kBool>
  /// void foo() { ... }
  ///
  /// template <>
  /// void foo<float, -7, true>();
  ///
  /// If called with I = 0, "float", will be returned.
  /// Invalid types will be returned for I == 1 or 2.
  CXType clang_Cursor_getTemplateArgumentType(
    CXCursor C,
    int I,
  ) {
    return _clang_Cursor_getTemplateArgumentType(
      C,
      I,
    );
  }

  late final _clang_Cursor_getTemplateArgumentType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getTemplateArgumentType');
  late final _clang_Cursor_getTemplateArgumentType =
      _clang_Cursor_getTemplateArgumentType_ptr
          .asFunction<CXType Function(CXCursor, int)>();

  /// Retrieve the value of an Integral TemplateArgument (of a function
  /// decl representing a template specialization) as a signed long long.
  ///
  /// It is undefined to call this function on a CXCursor that does not represent a
  /// FunctionDecl or whose I'th template argument is not an integral value.
  ///
  /// For example, for the following declaration and specialization:
  /// template <typename T, int kInt, bool kBool>
  /// void foo() { ... }
  ///
  /// template <>
  /// void foo<float, -7, true>();
  ///
  /// If called with I = 1 or 2, -7 or true will be returned, respectively.
  /// For I == 0, this function's behavior is undefined.
  int clang_Cursor_getTemplateArgumentValue(
    CXCursor C,
    int I,
  ) {
    return _clang_Cursor_getTemplateArgumentValue(
      C,
      I,
    );
  }

  late final _clang_Cursor_getTemplateArgumentValue_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getTemplateArgumentValue');
  late final _clang_Cursor_getTemplateArgumentValue =
      _clang_Cursor_getTemplateArgumentValue_ptr
          .asFunction<int Function(CXCursor, int)>();

  /// Retrieve the value of an Integral TemplateArgument (of a function
  /// decl representing a template specialization) as an unsigned long long.
  ///
  /// It is undefined to call this function on a CXCursor that does not represent a
  /// FunctionDecl or whose I'th template argument is not an integral value.
  ///
  /// For example, for the following declaration and specialization:
  /// template <typename T, int kInt, bool kBool>
  /// void foo() { ... }
  ///
  /// template <>
  /// void foo<float, 2147483649, true>();
  ///
  /// If called with I = 1 or 2, 2147483649 or true will be returned, respectively.
  /// For I == 0, this function's behavior is undefined.
  int clang_Cursor_getTemplateArgumentUnsignedValue(
    CXCursor C,
    int I,
  ) {
    return _clang_Cursor_getTemplateArgumentUnsignedValue(
      C,
      I,
    );
  }

  late final _clang_Cursor_getTemplateArgumentUnsignedValue_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getTemplateArgumentUnsignedValue');
  late final _clang_Cursor_getTemplateArgumentUnsignedValue =
      _clang_Cursor_getTemplateArgumentUnsignedValue_ptr
          .asFunction<int Function(CXCursor, int)>();

  /// Determine whether two CXTypes represent the same type.
  ///
  /// \returns non-zero if the CXTypes represent the same type and
  /// zero otherwise.
  int clang_equalTypes(
    CXType A,
    CXType B,
  ) {
    return _clang_equalTypes(
      A,
      B,
    );
  }

  late final _clang_equalTypes_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType, CXType)>>(
          'clang_equalTypes');
  late final _clang_equalTypes =
      _clang_equalTypes_ptr.asFunction<int Function(CXType, CXType)>();

  /// Return the canonical type for a CXType.
  ///
  /// Clang's type system explicitly models typedefs and all the ways
  /// a specific type can be represented.  The canonical type is the underlying
  /// type with all the "sugar" removed.  For example, if 'T' is a typedef
  /// for 'int', the canonical type for 'T' would be 'int'.
  CXType clang_getCanonicalType(
    CXType T,
  ) {
    return _clang_getCanonicalType(
      T,
    );
  }

  late final _clang_getCanonicalType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_getCanonicalType');
  late final _clang_getCanonicalType =
      _clang_getCanonicalType_ptr.asFunction<CXType Function(CXType)>();

  /// Determine whether a CXType has the "const" qualifier set,
  /// without looking through typedefs that may have added "const" at a
  /// different level.
  int clang_isConstQualifiedType(
    CXType T,
  ) {
    return _clang_isConstQualifiedType(
      T,
    );
  }

  late final _clang_isConstQualifiedType_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_isConstQualifiedType');
  late final _clang_isConstQualifiedType =
      _clang_isConstQualifiedType_ptr.asFunction<int Function(CXType)>();

  /// Determine whether a  CXCursor that is a macro, is
  /// function like.
  int clang_Cursor_isMacroFunctionLike(
    CXCursor C,
  ) {
    return _clang_Cursor_isMacroFunctionLike(
      C,
    );
  }

  late final _clang_Cursor_isMacroFunctionLike_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isMacroFunctionLike');
  late final _clang_Cursor_isMacroFunctionLike =
      _clang_Cursor_isMacroFunctionLike_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine whether a  CXCursor that is a macro, is a
  /// builtin one.
  int clang_Cursor_isMacroBuiltin(
    CXCursor C,
  ) {
    return _clang_Cursor_isMacroBuiltin(
      C,
    );
  }

  late final _clang_Cursor_isMacroBuiltin_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isMacroBuiltin');
  late final _clang_Cursor_isMacroBuiltin =
      _clang_Cursor_isMacroBuiltin_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether a  CXCursor that is a function declaration, is an
  /// inline declaration.
  int clang_Cursor_isFunctionInlined(
    CXCursor C,
  ) {
    return _clang_Cursor_isFunctionInlined(
      C,
    );
  }

  late final _clang_Cursor_isFunctionInlined_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isFunctionInlined');
  late final _clang_Cursor_isFunctionInlined =
      _clang_Cursor_isFunctionInlined_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether a CXType has the "volatile" qualifier set,
  /// without looking through typedefs that may have added "volatile" at
  /// a different level.
  int clang_isVolatileQualifiedType(
    CXType T,
  ) {
    return _clang_isVolatileQualifiedType(
      T,
    );
  }

  late final _clang_isVolatileQualifiedType_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_isVolatileQualifiedType');
  late final _clang_isVolatileQualifiedType =
      _clang_isVolatileQualifiedType_ptr.asFunction<int Function(CXType)>();

  /// Determine whether a CXType has the "restrict" qualifier set,
  /// without looking through typedefs that may have added "restrict" at a
  /// different level.
  int clang_isRestrictQualifiedType(
    CXType T,
  ) {
    return _clang_isRestrictQualifiedType(
      T,
    );
  }

  late final _clang_isRestrictQualifiedType_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_isRestrictQualifiedType');
  late final _clang_isRestrictQualifiedType =
      _clang_isRestrictQualifiedType_ptr.asFunction<int Function(CXType)>();

  /// Returns the address space of the given type.
  int clang_getAddressSpace(
    CXType T,
  ) {
    return _clang_getAddressSpace(
      T,
    );
  }

  late final _clang_getAddressSpace_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_getAddressSpace');
  late final _clang_getAddressSpace =
      _clang_getAddressSpace_ptr.asFunction<int Function(CXType)>();

  /// Returns the typedef name of the given type.
  CXString clang_getTypedefName(
    CXType CT,
  ) {
    return _clang_getTypedefName(
      CT,
    );
  }

  late final _clang_getTypedefName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXType)>>(
          'clang_getTypedefName');
  late final _clang_getTypedefName =
      _clang_getTypedefName_ptr.asFunction<CXString Function(CXType)>();

  /// For pointer types, returns the type of the pointee.
  CXType clang_getPointeeType(
    CXType T,
  ) {
    return _clang_getPointeeType(
      T,
    );
  }

  late final _clang_getPointeeType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_getPointeeType');
  late final _clang_getPointeeType =
      _clang_getPointeeType_ptr.asFunction<CXType Function(CXType)>();

  /// Return the cursor for the declaration of the given type.
  CXCursor clang_getTypeDeclaration(
    CXType T,
  ) {
    return _clang_getTypeDeclaration(
      T,
    );
  }

  late final _clang_getTypeDeclaration_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXType)>>(
          'clang_getTypeDeclaration');
  late final _clang_getTypeDeclaration =
      _clang_getTypeDeclaration_ptr.asFunction<CXCursor Function(CXType)>();

  /// Returns the Objective-C type encoding for the specified declaration.
  CXString clang_getDeclObjCTypeEncoding(
    CXCursor C,
  ) {
    return _clang_getDeclObjCTypeEncoding(
      C,
    );
  }

  late final _clang_getDeclObjCTypeEncoding_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_getDeclObjCTypeEncoding');
  late final _clang_getDeclObjCTypeEncoding = _clang_getDeclObjCTypeEncoding_ptr
      .asFunction<CXString Function(CXCursor)>();

  /// Returns the Objective-C type encoding for the specified CXType.
  CXString clang_Type_getObjCEncoding(
    CXType type,
  ) {
    return _clang_Type_getObjCEncoding(
      type,
    );
  }

  late final _clang_Type_getObjCEncoding_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXType)>>(
          'clang_Type_getObjCEncoding');
  late final _clang_Type_getObjCEncoding =
      _clang_Type_getObjCEncoding_ptr.asFunction<CXString Function(CXType)>();

  /// Retrieve the spelling of a given CXTypeKind.
  CXString clang_getTypeKindSpelling(
    int K,
  ) {
    return _clang_getTypeKindSpelling(
      K,
    );
  }

  late final _clang_getTypeKindSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(ffi.Int32)>>(
          'clang_getTypeKindSpelling');
  late final _clang_getTypeKindSpelling =
      _clang_getTypeKindSpelling_ptr.asFunction<CXString Function(int)>();

  /// Retrieve the calling convention associated with a function type.
  ///
  /// If a non-function type is passed in, CXCallingConv_Invalid is returned.
  int clang_getFunctionTypeCallingConv(
    CXType T,
  ) {
    return _clang_getFunctionTypeCallingConv(
      T,
    );
  }

  late final _clang_getFunctionTypeCallingConv_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_getFunctionTypeCallingConv');
  late final _clang_getFunctionTypeCallingConv =
      _clang_getFunctionTypeCallingConv_ptr.asFunction<int Function(CXType)>();

  /// Retrieve the return type associated with a function type.
  ///
  /// If a non-function type is passed in, an invalid type is returned.
  CXType clang_getResultType(
    CXType T,
  ) {
    return _clang_getResultType(
      T,
    );
  }

  late final _clang_getResultType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_getResultType');
  late final _clang_getResultType =
      _clang_getResultType_ptr.asFunction<CXType Function(CXType)>();

  /// Retrieve the exception specification type associated with a function type.
  /// This is a value of type CXCursor_ExceptionSpecificationKind.
  ///
  /// If a non-function type is passed in, an error code of -1 is returned.
  int clang_getExceptionSpecificationType(
    CXType T,
  ) {
    return _clang_getExceptionSpecificationType(
      T,
    );
  }

  late final _clang_getExceptionSpecificationType_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_getExceptionSpecificationType');
  late final _clang_getExceptionSpecificationType =
      _clang_getExceptionSpecificationType_ptr
          .asFunction<int Function(CXType)>();

  /// Retrieve the number of non-variadic parameters associated with a
  /// function type.
  ///
  /// If a non-function type is passed in, -1 is returned.
  int clang_getNumArgTypes(
    CXType T,
  ) {
    return _clang_getNumArgTypes(
      T,
    );
  }

  late final _clang_getNumArgTypes_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_getNumArgTypes');
  late final _clang_getNumArgTypes =
      _clang_getNumArgTypes_ptr.asFunction<int Function(CXType)>();

  /// Retrieve the type of a parameter of a function type.
  ///
  /// If a non-function type is passed in or the function does not have enough
  /// parameters, an invalid type is returned.
  CXType clang_getArgType(
    CXType T,
    int i,
  ) {
    return _clang_getArgType(
      T,
      i,
    );
  }

  late final _clang_getArgType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>(
          'clang_getArgType');
  late final _clang_getArgType =
      _clang_getArgType_ptr.asFunction<CXType Function(CXType, int)>();

  /// Retrieves the base type of the ObjCObjectType.
  ///
  /// If the type is not an ObjC object, an invalid type is returned.
  CXType clang_Type_getObjCObjectBaseType(
    CXType T,
  ) {
    return _clang_Type_getObjCObjectBaseType(
      T,
    );
  }

  late final _clang_Type_getObjCObjectBaseType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_Type_getObjCObjectBaseType');
  late final _clang_Type_getObjCObjectBaseType =
      _clang_Type_getObjCObjectBaseType_ptr
          .asFunction<CXType Function(CXType)>();

  /// Retrieve the number of protocol references associated with an ObjC object/id.
  ///
  /// If the type is not an ObjC object, 0 is returned.
  int clang_Type_getNumObjCProtocolRefs(
    CXType T,
  ) {
    return _clang_Type_getNumObjCProtocolRefs(
      T,
    );
  }

  late final _clang_Type_getNumObjCProtocolRefs_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_Type_getNumObjCProtocolRefs');
  late final _clang_Type_getNumObjCProtocolRefs =
      _clang_Type_getNumObjCProtocolRefs_ptr.asFunction<int Function(CXType)>();

  /// Retrieve the decl for a protocol reference for an ObjC object/id.
  ///
  /// If the type is not an ObjC object or there are not enough protocol
  /// references, an invalid cursor is returned.
  CXCursor clang_Type_getObjCProtocolDecl(
    CXType T,
    int i,
  ) {
    return _clang_Type_getObjCProtocolDecl(
      T,
      i,
    );
  }

  late final _clang_Type_getObjCProtocolDecl_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXType, ffi.Uint32)>>(
          'clang_Type_getObjCProtocolDecl');
  late final _clang_Type_getObjCProtocolDecl =
      _clang_Type_getObjCProtocolDecl_ptr
          .asFunction<CXCursor Function(CXType, int)>();

  /// Retreive the number of type arguments associated with an ObjC object.
  ///
  /// If the type is not an ObjC object, 0 is returned.
  int clang_Type_getNumObjCTypeArgs(
    CXType T,
  ) {
    return _clang_Type_getNumObjCTypeArgs(
      T,
    );
  }

  late final _clang_Type_getNumObjCTypeArgs_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_Type_getNumObjCTypeArgs');
  late final _clang_Type_getNumObjCTypeArgs =
      _clang_Type_getNumObjCTypeArgs_ptr.asFunction<int Function(CXType)>();

  /// Retrieve a type argument associated with an ObjC object.
  ///
  /// If the type is not an ObjC or the index is not valid,
  /// an invalid type is returned.
  CXType clang_Type_getObjCTypeArg(
    CXType T,
    int i,
  ) {
    return _clang_Type_getObjCTypeArg(
      T,
      i,
    );
  }

  late final _clang_Type_getObjCTypeArg_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>(
          'clang_Type_getObjCTypeArg');
  late final _clang_Type_getObjCTypeArg =
      _clang_Type_getObjCTypeArg_ptr.asFunction<CXType Function(CXType, int)>();

  /// Return 1 if the CXType is a variadic function type, and 0 otherwise.
  int clang_isFunctionTypeVariadic(
    CXType T,
  ) {
    return _clang_isFunctionTypeVariadic(
      T,
    );
  }

  late final _clang_isFunctionTypeVariadic_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_isFunctionTypeVariadic');
  late final _clang_isFunctionTypeVariadic =
      _clang_isFunctionTypeVariadic_ptr.asFunction<int Function(CXType)>();

  /// Retrieve the return type associated with a given cursor.
  ///
  /// This only returns a valid type if the cursor refers to a function or method.
  CXType clang_getCursorResultType(
    CXCursor C,
  ) {
    return _clang_getCursorResultType(
      C,
    );
  }

  late final _clang_getCursorResultType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_getCursorResultType');
  late final _clang_getCursorResultType =
      _clang_getCursorResultType_ptr.asFunction<CXType Function(CXCursor)>();

  /// Retrieve the exception specification type associated with a given cursor.
  /// This is a value of type CXCursor_ExceptionSpecificationKind.
  ///
  /// This only returns a valid result if the cursor refers to a function or method.
  int clang_getCursorExceptionSpecificationType(
    CXCursor C,
  ) {
    return _clang_getCursorExceptionSpecificationType(
      C,
    );
  }

  late final _clang_getCursorExceptionSpecificationType_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCursorExceptionSpecificationType');
  late final _clang_getCursorExceptionSpecificationType =
      _clang_getCursorExceptionSpecificationType_ptr
          .asFunction<int Function(CXCursor)>();

  /// Return 1 if the CXType is a POD (plain old data) type, and 0
  /// otherwise.
  int clang_isPODType(
    CXType T,
  ) {
    return _clang_isPODType(
      T,
    );
  }

  late final _clang_isPODType_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_isPODType');
  late final _clang_isPODType =
      _clang_isPODType_ptr.asFunction<int Function(CXType)>();

  /// Return the element type of an array, complex, or vector type.
  ///
  /// If a type is passed in that is not an array, complex, or vector type,
  /// an invalid type is returned.
  CXType clang_getElementType(
    CXType T,
  ) {
    return _clang_getElementType(
      T,
    );
  }

  late final _clang_getElementType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_getElementType');
  late final _clang_getElementType =
      _clang_getElementType_ptr.asFunction<CXType Function(CXType)>();

  /// Return the number of elements of an array or vector type.
  ///
  /// If a type is passed in that is not an array or vector type,
  /// -1 is returned.
  int clang_getNumElements(
    CXType T,
  ) {
    return _clang_getNumElements(
      T,
    );
  }

  late final _clang_getNumElements_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXType)>>(
          'clang_getNumElements');
  late final _clang_getNumElements =
      _clang_getNumElements_ptr.asFunction<int Function(CXType)>();

  /// Return the element type of an array type.
  ///
  /// If a non-array type is passed in, an invalid type is returned.
  CXType clang_getArrayElementType(
    CXType T,
  ) {
    return _clang_getArrayElementType(
      T,
    );
  }

  late final _clang_getArrayElementType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_getArrayElementType');
  late final _clang_getArrayElementType =
      _clang_getArrayElementType_ptr.asFunction<CXType Function(CXType)>();

  /// Return the array size of a constant array.
  ///
  /// If a non-array type is passed in, -1 is returned.
  int clang_getArraySize(
    CXType T,
  ) {
    return _clang_getArraySize(
      T,
    );
  }

  late final _clang_getArraySize_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXType)>>(
          'clang_getArraySize');
  late final _clang_getArraySize =
      _clang_getArraySize_ptr.asFunction<int Function(CXType)>();

  /// Retrieve the type named by the qualified-id.
  ///
  /// If a non-elaborated type is passed in, an invalid type is returned.
  CXType clang_Type_getNamedType(
    CXType T,
  ) {
    return _clang_Type_getNamedType(
      T,
    );
  }

  late final _clang_Type_getNamedType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_Type_getNamedType');
  late final _clang_Type_getNamedType =
      _clang_Type_getNamedType_ptr.asFunction<CXType Function(CXType)>();

  /// Determine if a typedef is 'transparent' tag.
  ///
  /// A typedef is considered 'transparent' if it shares a name and spelling
  /// location with its underlying tag type, as is the case with the NS_ENUM macro.
  ///
  /// \returns non-zero if transparent and zero otherwise.
  int clang_Type_isTransparentTagTypedef(
    CXType T,
  ) {
    return _clang_Type_isTransparentTagTypedef(
      T,
    );
  }

  late final _clang_Type_isTransparentTagTypedef_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>(
          'clang_Type_isTransparentTagTypedef');
  late final _clang_Type_isTransparentTagTypedef =
      _clang_Type_isTransparentTagTypedef_ptr
          .asFunction<int Function(CXType)>();

  /// Retrieve the nullability kind of a pointer type.
  int clang_Type_getNullability(
    CXType T,
  ) {
    return _clang_Type_getNullability(
      T,
    );
  }

  late final _clang_Type_getNullability_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_Type_getNullability');
  late final _clang_Type_getNullability =
      _clang_Type_getNullability_ptr.asFunction<int Function(CXType)>();

  /// Return the alignment of a type in bytes as per C++[expr.alignof]
  /// standard.
  ///
  /// If the type declaration is invalid, CXTypeLayoutError_Invalid is returned.
  /// If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete
  /// is returned.
  /// If the type declaration is a dependent type, CXTypeLayoutError_Dependent is
  /// returned.
  /// If the type declaration is not a constant size type,
  /// CXTypeLayoutError_NotConstantSize is returned.
  int clang_Type_getAlignOf(
    CXType T,
  ) {
    return _clang_Type_getAlignOf(
      T,
    );
  }

  late final _clang_Type_getAlignOf_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXType)>>(
          'clang_Type_getAlignOf');
  late final _clang_Type_getAlignOf =
      _clang_Type_getAlignOf_ptr.asFunction<int Function(CXType)>();

  /// Return the class type of an member pointer type.
  ///
  /// If a non-member-pointer type is passed in, an invalid type is returned.
  CXType clang_Type_getClassType(
    CXType T,
  ) {
    return _clang_Type_getClassType(
      T,
    );
  }

  late final _clang_Type_getClassType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_Type_getClassType');
  late final _clang_Type_getClassType =
      _clang_Type_getClassType_ptr.asFunction<CXType Function(CXType)>();

  /// Return the size of a type in bytes as per C++[expr.sizeof] standard.
  ///
  /// If the type declaration is invalid, CXTypeLayoutError_Invalid is returned.
  /// If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete
  /// is returned.
  /// If the type declaration is a dependent type, CXTypeLayoutError_Dependent is
  /// returned.
  int clang_Type_getSizeOf(
    CXType T,
  ) {
    return _clang_Type_getSizeOf(
      T,
    );
  }

  late final _clang_Type_getSizeOf_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXType)>>(
          'clang_Type_getSizeOf');
  late final _clang_Type_getSizeOf =
      _clang_Type_getSizeOf_ptr.asFunction<int Function(CXType)>();

  /// Return the offset of a field named S in a record of type T in bits
  /// as it would be returned by __offsetof__ as per C++11[18.2p4]
  ///
  /// If the cursor is not a record field declaration, CXTypeLayoutError_Invalid
  /// is returned.
  /// If the field's type declaration is an incomplete type,
  /// CXTypeLayoutError_Incomplete is returned.
  /// If the field's type declaration is a dependent type,
  /// CXTypeLayoutError_Dependent is returned.
  /// If the field's name S is not found,
  /// CXTypeLayoutError_InvalidFieldName is returned.
  int clang_Type_getOffsetOf(
    CXType T,
    ffi.Pointer<ffi.Int8> S,
  ) {
    return _clang_Type_getOffsetOf(
      T,
      S,
    );
  }

  late final _clang_Type_getOffsetOf_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              CXType, ffi.Pointer<ffi.Int8>)>>('clang_Type_getOffsetOf');
  late final _clang_Type_getOffsetOf = _clang_Type_getOffsetOf_ptr
      .asFunction<int Function(CXType, ffi.Pointer<ffi.Int8>)>();

  /// Return the type that was modified by this attributed type.
  ///
  /// If the type is not an attributed type, an invalid type is returned.
  CXType clang_Type_getModifiedType(
    CXType T,
  ) {
    return _clang_Type_getModifiedType(
      T,
    );
  }

  late final _clang_Type_getModifiedType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType)>>(
          'clang_Type_getModifiedType');
  late final _clang_Type_getModifiedType =
      _clang_Type_getModifiedType_ptr.asFunction<CXType Function(CXType)>();

  /// Return the offset of the field represented by the Cursor.
  ///
  /// If the cursor is not a field declaration, -1 is returned.
  /// If the cursor semantic parent is not a record field declaration,
  /// CXTypeLayoutError_Invalid is returned.
  /// If the field's type declaration is an incomplete type,
  /// CXTypeLayoutError_Incomplete is returned.
  /// If the field's type declaration is a dependent type,
  /// CXTypeLayoutError_Dependent is returned.
  /// If the field's name S is not found,
  /// CXTypeLayoutError_InvalidFieldName is returned.
  int clang_Cursor_getOffsetOfField(
    CXCursor C,
  ) {
    return _clang_Cursor_getOffsetOfField(
      C,
    );
  }

  late final _clang_Cursor_getOffsetOfField_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXCursor)>>(
          'clang_Cursor_getOffsetOfField');
  late final _clang_Cursor_getOffsetOfField =
      _clang_Cursor_getOffsetOfField_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor represents an anonymous
  /// tag or namespace
  int clang_Cursor_isAnonymous(
    CXCursor C,
  ) {
    return _clang_Cursor_isAnonymous(
      C,
    );
  }

  late final _clang_Cursor_isAnonymous_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isAnonymous');
  late final _clang_Cursor_isAnonymous =
      _clang_Cursor_isAnonymous_ptr.asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor represents an anonymous record
  /// declaration.
  int clang_Cursor_isAnonymousRecordDecl(
    CXCursor C,
  ) {
    return _clang_Cursor_isAnonymousRecordDecl(
      C,
    );
  }

  late final _clang_Cursor_isAnonymousRecordDecl_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isAnonymousRecordDecl');
  late final _clang_Cursor_isAnonymousRecordDecl =
      _clang_Cursor_isAnonymousRecordDecl_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine whether the given cursor represents an inline namespace
  /// declaration.
  int clang_Cursor_isInlineNamespace(
    CXCursor C,
  ) {
    return _clang_Cursor_isInlineNamespace(
      C,
    );
  }

  late final _clang_Cursor_isInlineNamespace_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isInlineNamespace');
  late final _clang_Cursor_isInlineNamespace =
      _clang_Cursor_isInlineNamespace_ptr.asFunction<int Function(CXCursor)>();

  /// Returns the number of template arguments for given template
  /// specialization, or -1 if type \c T is not a template specialization.
  int clang_Type_getNumTemplateArguments(
    CXType T,
  ) {
    return _clang_Type_getNumTemplateArguments(
      T,
    );
  }

  late final _clang_Type_getNumTemplateArguments_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_Type_getNumTemplateArguments');
  late final _clang_Type_getNumTemplateArguments =
      _clang_Type_getNumTemplateArguments_ptr
          .asFunction<int Function(CXType)>();

  /// Returns the type template argument of a template class specialization
  /// at given index.
  ///
  /// This function only returns template type arguments and does not handle
  /// template template arguments or variadic packs.
  CXType clang_Type_getTemplateArgumentAsType(
    CXType T,
    int i,
  ) {
    return _clang_Type_getTemplateArgumentAsType(
      T,
      i,
    );
  }

  late final _clang_Type_getTemplateArgumentAsType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>(
          'clang_Type_getTemplateArgumentAsType');
  late final _clang_Type_getTemplateArgumentAsType =
      _clang_Type_getTemplateArgumentAsType_ptr
          .asFunction<CXType Function(CXType, int)>();

  /// Retrieve the ref-qualifier kind of a function or method.
  ///
  /// The ref-qualifier is returned for C++ functions or methods. For other types
  /// or non-C++ declarations, CXRefQualifier_None is returned.
  int clang_Type_getCXXRefQualifier(
    CXType T,
  ) {
    return _clang_Type_getCXXRefQualifier(
      T,
    );
  }

  late final _clang_Type_getCXXRefQualifier_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXType)>>(
          'clang_Type_getCXXRefQualifier');
  late final _clang_Type_getCXXRefQualifier =
      _clang_Type_getCXXRefQualifier_ptr.asFunction<int Function(CXType)>();

  /// Returns non-zero if the cursor specifies a Record member that is a
  /// bitfield.
  int clang_Cursor_isBitField(
    CXCursor C,
  ) {
    return _clang_Cursor_isBitField(
      C,
    );
  }

  late final _clang_Cursor_isBitField_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isBitField');
  late final _clang_Cursor_isBitField =
      _clang_Cursor_isBitField_ptr.asFunction<int Function(CXCursor)>();

  /// Returns 1 if the base class specified by the cursor with kind
  /// CX_CXXBaseSpecifier is virtual.
  int clang_isVirtualBase(
    CXCursor arg0,
  ) {
    return _clang_isVirtualBase(
      arg0,
    );
  }

  late final _clang_isVirtualBase_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_isVirtualBase');
  late final _clang_isVirtualBase =
      _clang_isVirtualBase_ptr.asFunction<int Function(CXCursor)>();

  /// Returns the access control level for the referenced object.
  ///
  /// If the cursor refers to a C++ declaration, its access control level within its
  /// parent scope is returned. Otherwise, if the cursor refers to a base specifier or
  /// access specifier, the specifier itself is returned.
  int clang_getCXXAccessSpecifier(
    CXCursor arg0,
  ) {
    return _clang_getCXXAccessSpecifier(
      arg0,
    );
  }

  late final _clang_getCXXAccessSpecifier_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getCXXAccessSpecifier');
  late final _clang_getCXXAccessSpecifier =
      _clang_getCXXAccessSpecifier_ptr.asFunction<int Function(CXCursor)>();

  /// Returns the storage class for a function or variable declaration.
  ///
  /// If the passed in Cursor is not a function or variable declaration,
  /// CX_SC_Invalid is returned else the storage class.
  int clang_Cursor_getStorageClass(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getStorageClass(
      arg0,
    );
  }

  late final _clang_Cursor_getStorageClass_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_getStorageClass');
  late final _clang_Cursor_getStorageClass =
      _clang_Cursor_getStorageClass_ptr.asFunction<int Function(CXCursor)>();

  /// Determine the number of overloaded declarations referenced by a
  /// \c CXCursor_OverloadedDeclRef cursor.
  ///
  /// \param cursor The cursor whose overloaded declarations are being queried.
  ///
  /// \returns The number of overloaded declarations referenced by \c cursor. If it
  /// is not a \c CXCursor_OverloadedDeclRef cursor, returns 0.
  int clang_getNumOverloadedDecls(
    CXCursor cursor,
  ) {
    return _clang_getNumOverloadedDecls(
      cursor,
    );
  }

  late final _clang_getNumOverloadedDecls_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_getNumOverloadedDecls');
  late final _clang_getNumOverloadedDecls =
      _clang_getNumOverloadedDecls_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve a cursor for one of the overloaded declarations referenced
  /// by a \c CXCursor_OverloadedDeclRef cursor.
  ///
  /// \param cursor The cursor whose overloaded declarations are being queried.
  ///
  /// \param index The zero-based index into the set of overloaded declarations in
  /// the cursor.
  ///
  /// \returns A cursor representing the declaration referenced by the given
  /// \c cursor at the specified \c index. If the cursor does not have an
  /// associated set of overloaded declarations, or if the index is out of bounds,
  /// returns \c clang_getNullCursor();
  CXCursor clang_getOverloadedDecl(
    CXCursor cursor,
    int index,
  ) {
    return _clang_getOverloadedDecl(
      cursor,
      index,
    );
  }

  late final _clang_getOverloadedDecl_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor, ffi.Uint32)>>(
          'clang_getOverloadedDecl');
  late final _clang_getOverloadedDecl = _clang_getOverloadedDecl_ptr
      .asFunction<CXCursor Function(CXCursor, int)>();

  /// For cursors representing an iboutletcollection attribute,
  /// this function returns the collection element type.
  CXType clang_getIBOutletCollectionType(
    CXCursor arg0,
  ) {
    return _clang_getIBOutletCollectionType(
      arg0,
    );
  }

  late final _clang_getIBOutletCollectionType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_getIBOutletCollectionType');
  late final _clang_getIBOutletCollectionType =
      _clang_getIBOutletCollectionType_ptr
          .asFunction<CXType Function(CXCursor)>();

  /// Visit the children of a particular cursor.
  ///
  /// This function visits all the direct children of the given cursor,
  /// invoking the given \p visitor function with the cursors of each
  /// visited child. The traversal may be recursive, if the visitor returns
  /// \c CXChildVisit_Recurse. The traversal may also be ended prematurely, if
  /// the visitor returns \c CXChildVisit_Break.
  ///
  /// \param parent the cursor whose child may be visited. All kinds of
  /// cursors can be visited, including invalid cursors (which, by
  /// definition, have no children).
  ///
  /// \param visitor the visitor function that will be invoked for each
  /// child of \p parent.
  ///
  /// \param client_data pointer data supplied by the client, which will
  /// be passed to the visitor each time it is invoked.
  ///
  /// \returns a non-zero value if the traversal was terminated
  /// prematurely by the visitor returning \c CXChildVisit_Break.
  int clang_visitChildren(
    CXCursor parent,
    CXCursorVisitor visitor,
    CXClientData client_data,
  ) {
    return _clang_visitChildren(
      parent,
      visitor,
      client_data,
    );
  }

  late final _clang_visitChildren_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXCursor, CXCursorVisitor, CXClientData)>>('clang_visitChildren');
  late final _clang_visitChildren = _clang_visitChildren_ptr
      .asFunction<int Function(CXCursor, CXCursorVisitor, CXClientData)>();

  /// Retrieve a Unified Symbol Resolution (USR) for the entity referenced
  /// by the given cursor.
  ///
  /// A Unified Symbol Resolution (USR) is a string that identifies a particular
  /// entity (function, class, variable, etc.) within a program. USRs can be
  /// compared across translation units to determine, e.g., when references in
  /// one translation refer to an entity defined in another translation unit.
  CXString clang_getCursorUSR(
    CXCursor arg0,
  ) {
    return _clang_getCursorUSR(
      arg0,
    );
  }

  late final _clang_getCursorUSR_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_getCursorUSR');
  late final _clang_getCursorUSR =
      _clang_getCursorUSR_ptr.asFunction<CXString Function(CXCursor)>();

  /// Construct a USR for a specified Objective-C class.
  CXString clang_constructUSR_ObjCClass(
    ffi.Pointer<ffi.Int8> class_name,
  ) {
    return _clang_constructUSR_ObjCClass(
      class_name,
    );
  }

  late final _clang_constructUSR_ObjCClass_ptr =
      _lookup<ffi.NativeFunction<CXString Function(ffi.Pointer<ffi.Int8>)>>(
          'clang_constructUSR_ObjCClass');
  late final _clang_constructUSR_ObjCClass = _clang_constructUSR_ObjCClass_ptr
      .asFunction<CXString Function(ffi.Pointer<ffi.Int8>)>();

  /// Construct a USR for a specified Objective-C category.
  CXString clang_constructUSR_ObjCCategory(
    ffi.Pointer<ffi.Int8> class_name,
    ffi.Pointer<ffi.Int8> category_name,
  ) {
    return _clang_constructUSR_ObjCCategory(
      class_name,
      category_name,
    );
  }

  late final _clang_constructUSR_ObjCCategory_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('clang_constructUSR_ObjCCategory');
  late final _clang_constructUSR_ObjCCategory =
      _clang_constructUSR_ObjCCategory_ptr.asFunction<
          CXString Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// Construct a USR for a specified Objective-C protocol.
  CXString clang_constructUSR_ObjCProtocol(
    ffi.Pointer<ffi.Int8> protocol_name,
  ) {
    return _clang_constructUSR_ObjCProtocol(
      protocol_name,
    );
  }

  late final _clang_constructUSR_ObjCProtocol_ptr =
      _lookup<ffi.NativeFunction<CXString Function(ffi.Pointer<ffi.Int8>)>>(
          'clang_constructUSR_ObjCProtocol');
  late final _clang_constructUSR_ObjCProtocol =
      _clang_constructUSR_ObjCProtocol_ptr
          .asFunction<CXString Function(ffi.Pointer<ffi.Int8>)>();

  /// Construct a USR for a specified Objective-C instance variable and
  /// the USR for its containing class.
  CXString clang_constructUSR_ObjCIvar(
    ffi.Pointer<ffi.Int8> name,
    CXString classUSR,
  ) {
    return _clang_constructUSR_ObjCIvar(
      name,
      classUSR,
    );
  }

  late final _clang_constructUSR_ObjCIvar_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(
              ffi.Pointer<ffi.Int8>, CXString)>>('clang_constructUSR_ObjCIvar');
  late final _clang_constructUSR_ObjCIvar = _clang_constructUSR_ObjCIvar_ptr
      .asFunction<CXString Function(ffi.Pointer<ffi.Int8>, CXString)>();

  /// Construct a USR for a specified Objective-C method and
  /// the USR for its containing class.
  CXString clang_constructUSR_ObjCMethod(
    ffi.Pointer<ffi.Int8> name,
    int isInstanceMethod,
    CXString classUSR,
  ) {
    return _clang_constructUSR_ObjCMethod(
      name,
      isInstanceMethod,
      classUSR,
    );
  }

  late final _clang_constructUSR_ObjCMethod_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(ffi.Pointer<ffi.Int8>, ffi.Uint32,
              CXString)>>('clang_constructUSR_ObjCMethod');
  late final _clang_constructUSR_ObjCMethod = _clang_constructUSR_ObjCMethod_ptr
      .asFunction<CXString Function(ffi.Pointer<ffi.Int8>, int, CXString)>();

  /// Construct a USR for a specified Objective-C property and the USR
  /// for its containing class.
  CXString clang_constructUSR_ObjCProperty(
    ffi.Pointer<ffi.Int8> property,
    CXString classUSR,
  ) {
    return _clang_constructUSR_ObjCProperty(
      property,
      classUSR,
    );
  }

  late final _clang_constructUSR_ObjCProperty_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(ffi.Pointer<ffi.Int8>,
              CXString)>>('clang_constructUSR_ObjCProperty');
  late final _clang_constructUSR_ObjCProperty =
      _clang_constructUSR_ObjCProperty_ptr
          .asFunction<CXString Function(ffi.Pointer<ffi.Int8>, CXString)>();

  /// Retrieve a name for the entity referenced by this cursor.
  CXString clang_getCursorSpelling(
    CXCursor arg0,
  ) {
    return _clang_getCursorSpelling(
      arg0,
    );
  }

  late final _clang_getCursorSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_getCursorSpelling');
  late final _clang_getCursorSpelling =
      _clang_getCursorSpelling_ptr.asFunction<CXString Function(CXCursor)>();

  /// Retrieve a range for a piece that forms the cursors spelling name.
  /// Most of the times there is only one range for the complete spelling but for
  /// Objective-C methods and Objective-C message expressions, there are multiple
  /// pieces for each selector identifier.
  ///
  /// \param pieceIndex the index of the spelling name piece. If this is greater
  /// than the actual number of pieces, it will return a NULL (invalid) range.
  ///
  /// \param options Reserved.
  CXSourceRange clang_Cursor_getSpellingNameRange(
    CXCursor arg0,
    int pieceIndex,
    int options,
  ) {
    return _clang_Cursor_getSpellingNameRange(
      arg0,
      pieceIndex,
      options,
    );
  }

  late final _clang_Cursor_getSpellingNameRange_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceRange Function(CXCursor, ffi.Uint32,
              ffi.Uint32)>>('clang_Cursor_getSpellingNameRange');
  late final _clang_Cursor_getSpellingNameRange =
      _clang_Cursor_getSpellingNameRange_ptr
          .asFunction<CXSourceRange Function(CXCursor, int, int)>();

  /// Get a property value for the given printing policy.
  int clang_PrintingPolicy_getProperty(
    CXPrintingPolicy Policy,
    int Property,
  ) {
    return _clang_PrintingPolicy_getProperty(
      Policy,
      Property,
    );
  }

  late final _clang_PrintingPolicy_getProperty_ptr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(CXPrintingPolicy, ffi.Int32)>>(
      'clang_PrintingPolicy_getProperty');
  late final _clang_PrintingPolicy_getProperty =
      _clang_PrintingPolicy_getProperty_ptr
          .asFunction<int Function(CXPrintingPolicy, int)>();

  /// Set a property value for the given printing policy.
  void clang_PrintingPolicy_setProperty(
    CXPrintingPolicy Policy,
    int Property,
    int Value,
  ) {
    return _clang_PrintingPolicy_setProperty(
      Policy,
      Property,
      Value,
    );
  }

  late final _clang_PrintingPolicy_setProperty_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXPrintingPolicy, ffi.Int32,
              ffi.Uint32)>>('clang_PrintingPolicy_setProperty');
  late final _clang_PrintingPolicy_setProperty =
      _clang_PrintingPolicy_setProperty_ptr
          .asFunction<void Function(CXPrintingPolicy, int, int)>();

  /// Retrieve the default policy for the cursor.
  ///
  /// The policy should be released after use with \c
  /// clang_PrintingPolicy_dispose.
  CXPrintingPolicy clang_getCursorPrintingPolicy(
    CXCursor arg0,
  ) {
    return _clang_getCursorPrintingPolicy(
      arg0,
    );
  }

  late final _clang_getCursorPrintingPolicy_ptr =
      _lookup<ffi.NativeFunction<CXPrintingPolicy Function(CXCursor)>>(
          'clang_getCursorPrintingPolicy');
  late final _clang_getCursorPrintingPolicy = _clang_getCursorPrintingPolicy_ptr
      .asFunction<CXPrintingPolicy Function(CXCursor)>();

  /// Release a printing policy.
  void clang_PrintingPolicy_dispose(
    CXPrintingPolicy Policy,
  ) {
    return _clang_PrintingPolicy_dispose(
      Policy,
    );
  }

  late final _clang_PrintingPolicy_dispose_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXPrintingPolicy)>>(
          'clang_PrintingPolicy_dispose');
  late final _clang_PrintingPolicy_dispose = _clang_PrintingPolicy_dispose_ptr
      .asFunction<void Function(CXPrintingPolicy)>();

  /// Pretty print declarations.
  ///
  /// \param Cursor The cursor representing a declaration.
  ///
  /// \param Policy The policy to control the entities being printed. If
  /// NULL, a default policy is used.
  ///
  /// \returns The pretty printed declaration or the empty string for
  /// other cursors.
  CXString clang_getCursorPrettyPrinted(
    CXCursor Cursor,
    CXPrintingPolicy Policy,
  ) {
    return _clang_getCursorPrettyPrinted(
      Cursor,
      Policy,
    );
  }

  late final _clang_getCursorPrettyPrinted_ptr = _lookup<
          ffi.NativeFunction<CXString Function(CXCursor, CXPrintingPolicy)>>(
      'clang_getCursorPrettyPrinted');
  late final _clang_getCursorPrettyPrinted = _clang_getCursorPrettyPrinted_ptr
      .asFunction<CXString Function(CXCursor, CXPrintingPolicy)>();

  /// Retrieve the display name for the entity referenced by this cursor.
  ///
  /// The display name contains extra information that helps identify the cursor,
  /// such as the parameters of a function or template or the arguments of a
  /// class template specialization.
  CXString clang_getCursorDisplayName(
    CXCursor arg0,
  ) {
    return _clang_getCursorDisplayName(
      arg0,
    );
  }

  late final _clang_getCursorDisplayName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_getCursorDisplayName');
  late final _clang_getCursorDisplayName =
      _clang_getCursorDisplayName_ptr.asFunction<CXString Function(CXCursor)>();

  /// For a cursor that is a reference, retrieve a cursor representing the
  /// entity that it references.
  ///
  /// Reference cursors refer to other entities in the AST. For example, an
  /// Objective-C superclass reference cursor refers to an Objective-C class.
  /// This function produces the cursor for the Objective-C class from the
  /// cursor for the superclass reference. If the input cursor is a declaration or
  /// definition, it returns that declaration or definition unchanged.
  /// Otherwise, returns the NULL cursor.
  CXCursor clang_getCursorReferenced(
    CXCursor arg0,
  ) {
    return _clang_getCursorReferenced(
      arg0,
    );
  }

  late final _clang_getCursorReferenced_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getCursorReferenced');
  late final _clang_getCursorReferenced =
      _clang_getCursorReferenced_ptr.asFunction<CXCursor Function(CXCursor)>();

  /// For a cursor that is either a reference to or a declaration
  /// of some entity, retrieve a cursor that describes the definition of
  /// that entity.
  ///
  /// Some entities can be declared multiple times within a translation
  /// unit, but only one of those declarations can also be a
  /// definition. For example, given:
  ///
  /// \code
  /// int f(int, int);
  /// int g(int x, int y) { return f(x, y); }
  /// int f(int a, int b) { return a + b; }
  /// int f(int, int);
  /// \endcode
  ///
  /// there are three declarations of the function "f", but only the
  /// second one is a definition. The clang_getCursorDefinition()
  /// function will take any cursor pointing to a declaration of "f"
  /// (the first or fourth lines of the example) or a cursor referenced
  /// that uses "f" (the call to "f' inside "g") and will return a
  /// declaration cursor pointing to the definition (the second "f"
  /// declaration).
  ///
  /// If given a cursor for which there is no corresponding definition,
  /// e.g., because there is no definition of that entity within this
  /// translation unit, returns a NULL cursor.
  CXCursor clang_getCursorDefinition(
    CXCursor arg0,
  ) {
    return _clang_getCursorDefinition(
      arg0,
    );
  }

  late final _clang_getCursorDefinition_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getCursorDefinition');
  late final _clang_getCursorDefinition =
      _clang_getCursorDefinition_ptr.asFunction<CXCursor Function(CXCursor)>();

  /// Determine whether the declaration pointed to by this cursor
  /// is also a definition of that entity.
  int clang_isCursorDefinition(
    CXCursor arg0,
  ) {
    return _clang_isCursorDefinition(
      arg0,
    );
  }

  late final _clang_isCursorDefinition_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_isCursorDefinition');
  late final _clang_isCursorDefinition =
      _clang_isCursorDefinition_ptr.asFunction<int Function(CXCursor)>();

  /// Retrieve the canonical cursor corresponding to the given cursor.
  ///
  /// In the C family of languages, many kinds of entities can be declared several
  /// times within a single translation unit. For example, a structure type can
  /// be forward-declared (possibly multiple times) and later defined:
  ///
  /// \code
  /// struct X;
  /// struct X;
  /// struct X {
  /// int member;
  /// };
  /// \endcode
  ///
  /// The declarations and the definition of \c X are represented by three
  /// different cursors, all of which are declarations of the same underlying
  /// entity. One of these cursor is considered the "canonical" cursor, which
  /// is effectively the representative for the underlying entity. One can
  /// determine if two cursors are declarations of the same underlying entity by
  /// comparing their canonical cursors.
  ///
  /// \returns The canonical cursor for the entity referred to by the given cursor.
  CXCursor clang_getCanonicalCursor(
    CXCursor arg0,
  ) {
    return _clang_getCanonicalCursor(
      arg0,
    );
  }

  late final _clang_getCanonicalCursor_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getCanonicalCursor');
  late final _clang_getCanonicalCursor =
      _clang_getCanonicalCursor_ptr.asFunction<CXCursor Function(CXCursor)>();

  /// If the cursor points to a selector identifier in an Objective-C
  /// method or message expression, this returns the selector index.
  ///
  /// After getting a cursor with #clang_getCursor, this can be called to
  /// determine if the location points to a selector identifier.
  ///
  /// \returns The selector index if the cursor is an Objective-C method or message
  /// expression and the cursor is pointing to a selector identifier, or -1
  /// otherwise.
  int clang_Cursor_getObjCSelectorIndex(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getObjCSelectorIndex(
      arg0,
    );
  }

  late final _clang_Cursor_getObjCSelectorIndex_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_getObjCSelectorIndex');
  late final _clang_Cursor_getObjCSelectorIndex =
      _clang_Cursor_getObjCSelectorIndex_ptr
          .asFunction<int Function(CXCursor)>();

  /// Given a cursor pointing to a C++ method call or an Objective-C
  /// message, returns non-zero if the method/message is "dynamic", meaning:
  ///
  /// For a C++ method: the call is virtual.
  /// For an Objective-C message: the receiver is an object instance, not 'super'
  /// or a specific class.
  ///
  /// If the method/message is "static" or the cursor does not point to a
  /// method/message, it will return zero.
  int clang_Cursor_isDynamicCall(
    CXCursor C,
  ) {
    return _clang_Cursor_isDynamicCall(
      C,
    );
  }

  late final _clang_Cursor_isDynamicCall_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_Cursor_isDynamicCall');
  late final _clang_Cursor_isDynamicCall =
      _clang_Cursor_isDynamicCall_ptr.asFunction<int Function(CXCursor)>();

  /// Given a cursor pointing to an Objective-C message or property
  /// reference, or C++ method call, returns the CXType of the receiver.
  CXType clang_Cursor_getReceiverType(
    CXCursor C,
  ) {
    return _clang_Cursor_getReceiverType(
      C,
    );
  }

  late final _clang_Cursor_getReceiverType_ptr =
      _lookup<ffi.NativeFunction<CXType Function(CXCursor)>>(
          'clang_Cursor_getReceiverType');
  late final _clang_Cursor_getReceiverType =
      _clang_Cursor_getReceiverType_ptr.asFunction<CXType Function(CXCursor)>();

  /// Given a cursor that represents a property declaration, return the
  /// associated property attributes. The bits are formed from
  /// \c CXObjCPropertyAttrKind.
  ///
  /// \param reserved Reserved for future use, pass 0.
  int clang_Cursor_getObjCPropertyAttributes(
    CXCursor C,
    int reserved,
  ) {
    return _clang_Cursor_getObjCPropertyAttributes(
      C,
      reserved,
    );
  }

  late final _clang_Cursor_getObjCPropertyAttributes_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor, ffi.Uint32)>>(
          'clang_Cursor_getObjCPropertyAttributes');
  late final _clang_Cursor_getObjCPropertyAttributes =
      _clang_Cursor_getObjCPropertyAttributes_ptr
          .asFunction<int Function(CXCursor, int)>();

  /// Given a cursor that represents a property declaration, return the
  /// name of the method that implements the getter.
  CXString clang_Cursor_getObjCPropertyGetterName(
    CXCursor C,
  ) {
    return _clang_Cursor_getObjCPropertyGetterName(
      C,
    );
  }

  late final _clang_Cursor_getObjCPropertyGetterName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_Cursor_getObjCPropertyGetterName');
  late final _clang_Cursor_getObjCPropertyGetterName =
      _clang_Cursor_getObjCPropertyGetterName_ptr
          .asFunction<CXString Function(CXCursor)>();

  /// Given a cursor that represents a property declaration, return the
  /// name of the method that implements the setter, if any.
  CXString clang_Cursor_getObjCPropertySetterName(
    CXCursor C,
  ) {
    return _clang_Cursor_getObjCPropertySetterName(
      C,
    );
  }

  late final _clang_Cursor_getObjCPropertySetterName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_Cursor_getObjCPropertySetterName');
  late final _clang_Cursor_getObjCPropertySetterName =
      _clang_Cursor_getObjCPropertySetterName_ptr
          .asFunction<CXString Function(CXCursor)>();

  /// Given a cursor that represents an Objective-C method or parameter
  /// declaration, return the associated Objective-C qualifiers for the return
  /// type or the parameter respectively. The bits are formed from
  /// CXObjCDeclQualifierKind.
  int clang_Cursor_getObjCDeclQualifiers(
    CXCursor C,
  ) {
    return _clang_Cursor_getObjCDeclQualifiers(
      C,
    );
  }

  late final _clang_Cursor_getObjCDeclQualifiers_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_getObjCDeclQualifiers');
  late final _clang_Cursor_getObjCDeclQualifiers =
      _clang_Cursor_getObjCDeclQualifiers_ptr
          .asFunction<int Function(CXCursor)>();

  /// Given a cursor that represents an Objective-C method or property
  /// declaration, return non-zero if the declaration was affected by "\@optional".
  /// Returns zero if the cursor is not such a declaration or it is "\@required".
  int clang_Cursor_isObjCOptional(
    CXCursor C,
  ) {
    return _clang_Cursor_isObjCOptional(
      C,
    );
  }

  late final _clang_Cursor_isObjCOptional_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isObjCOptional');
  late final _clang_Cursor_isObjCOptional =
      _clang_Cursor_isObjCOptional_ptr.asFunction<int Function(CXCursor)>();

  /// Returns non-zero if the given cursor is a variadic function or method.
  int clang_Cursor_isVariadic(
    CXCursor C,
  ) {
    return _clang_Cursor_isVariadic(
      C,
    );
  }

  late final _clang_Cursor_isVariadic_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_Cursor_isVariadic');
  late final _clang_Cursor_isVariadic =
      _clang_Cursor_isVariadic_ptr.asFunction<int Function(CXCursor)>();

  /// Returns non-zero if the given cursor points to a symbol marked with
  /// external_source_symbol attribute.
  ///
  /// \param language If non-NULL, and the attribute is present, will be set to
  /// the 'language' string from the attribute.
  ///
  /// \param definedIn If non-NULL, and the attribute is present, will be set to
  /// the 'definedIn' string from the attribute.
  ///
  /// \param isGenerated If non-NULL, and the attribute is present, will be set to
  /// non-zero if the 'generated_declaration' is set in the attribute.
  int clang_Cursor_isExternalSymbol(
    CXCursor C,
    ffi.Pointer<CXString> language,
    ffi.Pointer<CXString> definedIn,
    ffi.Pointer<ffi.Uint32> isGenerated,
  ) {
    return _clang_Cursor_isExternalSymbol(
      C,
      language,
      definedIn,
      isGenerated,
    );
  }

  late final _clang_Cursor_isExternalSymbol_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXCursor,
              ffi.Pointer<CXString>,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>)>>('clang_Cursor_isExternalSymbol');
  late final _clang_Cursor_isExternalSymbol =
      _clang_Cursor_isExternalSymbol_ptr.asFunction<
          int Function(CXCursor, ffi.Pointer<CXString>, ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Given a cursor that represents a declaration, return the associated
  /// comment's source range.  The range may include multiple consecutive comments
  /// with whitespace in between.
  CXSourceRange clang_Cursor_getCommentRange(
    CXCursor C,
  ) {
    return _clang_Cursor_getCommentRange(
      C,
    );
  }

  late final _clang_Cursor_getCommentRange_ptr =
      _lookup<ffi.NativeFunction<CXSourceRange Function(CXCursor)>>(
          'clang_Cursor_getCommentRange');
  late final _clang_Cursor_getCommentRange = _clang_Cursor_getCommentRange_ptr
      .asFunction<CXSourceRange Function(CXCursor)>();

  /// Given a cursor that represents a declaration, return the associated
  /// comment text, including comment markers.
  CXString clang_Cursor_getRawCommentText(
    CXCursor C,
  ) {
    return _clang_Cursor_getRawCommentText(
      C,
    );
  }

  late final _clang_Cursor_getRawCommentText_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_Cursor_getRawCommentText');
  late final _clang_Cursor_getRawCommentText =
      _clang_Cursor_getRawCommentText_ptr
          .asFunction<CXString Function(CXCursor)>();

  /// Given a cursor that represents a documentable entity (e.g.,
  /// declaration), return the associated \paragraph; otherwise return the
  /// first paragraph.
  CXString clang_Cursor_getBriefCommentText(
    CXCursor C,
  ) {
    return _clang_Cursor_getBriefCommentText(
      C,
    );
  }

  late final _clang_Cursor_getBriefCommentText_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_Cursor_getBriefCommentText');
  late final _clang_Cursor_getBriefCommentText =
      _clang_Cursor_getBriefCommentText_ptr
          .asFunction<CXString Function(CXCursor)>();

  /// Retrieve the CXString representing the mangled name of the cursor.
  CXString clang_Cursor_getMangling(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getMangling(
      arg0,
    );
  }

  late final _clang_Cursor_getMangling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCursor)>>(
          'clang_Cursor_getMangling');
  late final _clang_Cursor_getMangling =
      _clang_Cursor_getMangling_ptr.asFunction<CXString Function(CXCursor)>();

  /// Retrieve the CXStrings representing the mangled symbols of the C++
  /// constructor or destructor at the cursor.
  ffi.Pointer<CXStringSet> clang_Cursor_getCXXManglings(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getCXXManglings(
      arg0,
    );
  }

  late final _clang_Cursor_getCXXManglings_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>>(
          'clang_Cursor_getCXXManglings');
  late final _clang_Cursor_getCXXManglings = _clang_Cursor_getCXXManglings_ptr
      .asFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>();

  /// Retrieve the CXStrings representing the mangled symbols of the ObjC
  /// class interface or implementation at the cursor.
  ffi.Pointer<CXStringSet> clang_Cursor_getObjCManglings(
    CXCursor arg0,
  ) {
    return _clang_Cursor_getObjCManglings(
      arg0,
    );
  }

  late final _clang_Cursor_getObjCManglings_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>>(
          'clang_Cursor_getObjCManglings');
  late final _clang_Cursor_getObjCManglings = _clang_Cursor_getObjCManglings_ptr
      .asFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>();

  /// Given a CXCursor_ModuleImportDecl cursor, return the associated module.
  CXModule clang_Cursor_getModule(
    CXCursor C,
  ) {
    return _clang_Cursor_getModule(
      C,
    );
  }

  late final _clang_Cursor_getModule_ptr =
      _lookup<ffi.NativeFunction<CXModule Function(CXCursor)>>(
          'clang_Cursor_getModule');
  late final _clang_Cursor_getModule =
      _clang_Cursor_getModule_ptr.asFunction<CXModule Function(CXCursor)>();

  /// Given a CXFile header file, return the module that contains it, if one
  /// exists.
  CXModule clang_getModuleForFile(
    CXTranslationUnit arg0,
    CXFile arg1,
  ) {
    return _clang_getModuleForFile(
      arg0,
      arg1,
    );
  }

  late final _clang_getModuleForFile_ptr =
      _lookup<ffi.NativeFunction<CXModule Function(CXTranslationUnit, CXFile)>>(
          'clang_getModuleForFile');
  late final _clang_getModuleForFile = _clang_getModuleForFile_ptr
      .asFunction<CXModule Function(CXTranslationUnit, CXFile)>();

  /// \param Module a module object.
  ///
  /// \returns the module file where the provided module object came from.
  CXFile clang_Module_getASTFile(
    CXModule Module,
  ) {
    return _clang_Module_getASTFile(
      Module,
    );
  }

  late final _clang_Module_getASTFile_ptr =
      _lookup<ffi.NativeFunction<CXFile Function(CXModule)>>(
          'clang_Module_getASTFile');
  late final _clang_Module_getASTFile =
      _clang_Module_getASTFile_ptr.asFunction<CXFile Function(CXModule)>();

  /// \param Module a module object.
  ///
  /// \returns the parent of a sub-module or NULL if the given module is top-level,
  /// e.g. for 'std.vector' it will return the 'std' module.
  CXModule clang_Module_getParent(
    CXModule Module,
  ) {
    return _clang_Module_getParent(
      Module,
    );
  }

  late final _clang_Module_getParent_ptr =
      _lookup<ffi.NativeFunction<CXModule Function(CXModule)>>(
          'clang_Module_getParent');
  late final _clang_Module_getParent =
      _clang_Module_getParent_ptr.asFunction<CXModule Function(CXModule)>();

  /// \param Module a module object.
  ///
  /// \returns the name of the module, e.g. for the 'std.vector' sub-module it
  /// will return "vector".
  CXString clang_Module_getName(
    CXModule Module,
  ) {
    return _clang_Module_getName(
      Module,
    );
  }

  late final _clang_Module_getName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXModule)>>(
          'clang_Module_getName');
  late final _clang_Module_getName =
      _clang_Module_getName_ptr.asFunction<CXString Function(CXModule)>();

  /// \param Module a module object.
  ///
  /// \returns the full name of the module, e.g. "std.vector".
  CXString clang_Module_getFullName(
    CXModule Module,
  ) {
    return _clang_Module_getFullName(
      Module,
    );
  }

  late final _clang_Module_getFullName_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXModule)>>(
          'clang_Module_getFullName');
  late final _clang_Module_getFullName =
      _clang_Module_getFullName_ptr.asFunction<CXString Function(CXModule)>();

  /// \param Module a module object.
  ///
  /// \returns non-zero if the module is a system one.
  int clang_Module_isSystem(
    CXModule Module,
  ) {
    return _clang_Module_isSystem(
      Module,
    );
  }

  late final _clang_Module_isSystem_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXModule)>>(
          'clang_Module_isSystem');
  late final _clang_Module_isSystem =
      _clang_Module_isSystem_ptr.asFunction<int Function(CXModule)>();

  /// \param Module a module object.
  ///
  /// \returns the number of top level headers associated with this module.
  int clang_Module_getNumTopLevelHeaders(
    CXTranslationUnit arg0,
    CXModule Module,
  ) {
    return _clang_Module_getNumTopLevelHeaders(
      arg0,
      Module,
    );
  }

  late final _clang_Module_getNumTopLevelHeaders_ptr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit, CXModule)>>(
      'clang_Module_getNumTopLevelHeaders');
  late final _clang_Module_getNumTopLevelHeaders =
      _clang_Module_getNumTopLevelHeaders_ptr
          .asFunction<int Function(CXTranslationUnit, CXModule)>();

  /// \param Module a module object.
  ///
  /// \param Index top level header index (zero-based).
  ///
  /// \returns the specified top level header associated with the module.
  CXFile clang_Module_getTopLevelHeader(
    CXTranslationUnit arg0,
    CXModule Module,
    int Index,
  ) {
    return _clang_Module_getTopLevelHeader(
      arg0,
      Module,
      Index,
    );
  }

  late final _clang_Module_getTopLevelHeader_ptr = _lookup<
      ffi.NativeFunction<
          CXFile Function(CXTranslationUnit, CXModule,
              ffi.Uint32)>>('clang_Module_getTopLevelHeader');
  late final _clang_Module_getTopLevelHeader =
      _clang_Module_getTopLevelHeader_ptr
          .asFunction<CXFile Function(CXTranslationUnit, CXModule, int)>();

  /// Determine if a C++ constructor is a converting constructor.
  int clang_CXXConstructor_isConvertingConstructor(
    CXCursor C,
  ) {
    return _clang_CXXConstructor_isConvertingConstructor(
      C,
    );
  }

  late final _clang_CXXConstructor_isConvertingConstructor_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXConstructor_isConvertingConstructor');
  late final _clang_CXXConstructor_isConvertingConstructor =
      _clang_CXXConstructor_isConvertingConstructor_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine if a C++ constructor is a copy constructor.
  int clang_CXXConstructor_isCopyConstructor(
    CXCursor C,
  ) {
    return _clang_CXXConstructor_isCopyConstructor(
      C,
    );
  }

  late final _clang_CXXConstructor_isCopyConstructor_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXConstructor_isCopyConstructor');
  late final _clang_CXXConstructor_isCopyConstructor =
      _clang_CXXConstructor_isCopyConstructor_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine if a C++ constructor is the default constructor.
  int clang_CXXConstructor_isDefaultConstructor(
    CXCursor C,
  ) {
    return _clang_CXXConstructor_isDefaultConstructor(
      C,
    );
  }

  late final _clang_CXXConstructor_isDefaultConstructor_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXConstructor_isDefaultConstructor');
  late final _clang_CXXConstructor_isDefaultConstructor =
      _clang_CXXConstructor_isDefaultConstructor_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine if a C++ constructor is a move constructor.
  int clang_CXXConstructor_isMoveConstructor(
    CXCursor C,
  ) {
    return _clang_CXXConstructor_isMoveConstructor(
      C,
    );
  }

  late final _clang_CXXConstructor_isMoveConstructor_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXConstructor_isMoveConstructor');
  late final _clang_CXXConstructor_isMoveConstructor =
      _clang_CXXConstructor_isMoveConstructor_ptr
          .asFunction<int Function(CXCursor)>();

  /// Determine if a C++ field is declared 'mutable'.
  int clang_CXXField_isMutable(
    CXCursor C,
  ) {
    return _clang_CXXField_isMutable(
      C,
    );
  }

  late final _clang_CXXField_isMutable_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXField_isMutable');
  late final _clang_CXXField_isMutable =
      _clang_CXXField_isMutable_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ method is declared '= default'.
  int clang_CXXMethod_isDefaulted(
    CXCursor C,
  ) {
    return _clang_CXXMethod_isDefaulted(
      C,
    );
  }

  late final _clang_CXXMethod_isDefaulted_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXMethod_isDefaulted');
  late final _clang_CXXMethod_isDefaulted =
      _clang_CXXMethod_isDefaulted_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ member function or member function template is
  /// pure virtual.
  int clang_CXXMethod_isPureVirtual(
    CXCursor C,
  ) {
    return _clang_CXXMethod_isPureVirtual(
      C,
    );
  }

  late final _clang_CXXMethod_isPureVirtual_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXMethod_isPureVirtual');
  late final _clang_CXXMethod_isPureVirtual =
      _clang_CXXMethod_isPureVirtual_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ member function or member function template is
  /// declared 'static'.
  int clang_CXXMethod_isStatic(
    CXCursor C,
  ) {
    return _clang_CXXMethod_isStatic(
      C,
    );
  }

  late final _clang_CXXMethod_isStatic_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXMethod_isStatic');
  late final _clang_CXXMethod_isStatic =
      _clang_CXXMethod_isStatic_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ member function or member function template is
  /// explicitly declared 'virtual' or if it overrides a virtual method from
  /// one of the base classes.
  int clang_CXXMethod_isVirtual(
    CXCursor C,
  ) {
    return _clang_CXXMethod_isVirtual(
      C,
    );
  }

  late final _clang_CXXMethod_isVirtual_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXMethod_isVirtual');
  late final _clang_CXXMethod_isVirtual =
      _clang_CXXMethod_isVirtual_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ record is abstract, i.e. whether a class or struct
  /// has a pure virtual member function.
  int clang_CXXRecord_isAbstract(
    CXCursor C,
  ) {
    return _clang_CXXRecord_isAbstract(
      C,
    );
  }

  late final _clang_CXXRecord_isAbstract_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXRecord_isAbstract');
  late final _clang_CXXRecord_isAbstract =
      _clang_CXXRecord_isAbstract_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if an enum declaration refers to a scoped enum.
  int clang_EnumDecl_isScoped(
    CXCursor C,
  ) {
    return _clang_EnumDecl_isScoped(
      C,
    );
  }

  late final _clang_EnumDecl_isScoped_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_EnumDecl_isScoped');
  late final _clang_EnumDecl_isScoped =
      _clang_EnumDecl_isScoped_ptr.asFunction<int Function(CXCursor)>();

  /// Determine if a C++ member function or member function template is
  /// declared 'const'.
  int clang_CXXMethod_isConst(
    CXCursor C,
  ) {
    return _clang_CXXMethod_isConst(
      C,
    );
  }

  late final _clang_CXXMethod_isConst_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>(
          'clang_CXXMethod_isConst');
  late final _clang_CXXMethod_isConst =
      _clang_CXXMethod_isConst_ptr.asFunction<int Function(CXCursor)>();

  /// Given a cursor that represents a template, determine
  /// the cursor kind of the specializations would be generated by instantiating
  /// the template.
  ///
  /// This routine can be used to determine what flavor of function template,
  /// class template, or class template partial specialization is stored in the
  /// cursor. For example, it can describe whether a class template cursor is
  /// declared with "struct", "class" or "union".
  ///
  /// \param C The cursor to query. This cursor should represent a template
  /// declaration.
  ///
  /// \returns The cursor kind of the specializations that would be generated
  /// by instantiating the template \p C. If \p C is not a template, returns
  /// \c CXCursor_NoDeclFound.
  int clang_getTemplateCursorKind(
    CXCursor C,
  ) {
    return _clang_getTemplateCursorKind(
      C,
    );
  }

  late final _clang_getTemplateCursorKind_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>(
          'clang_getTemplateCursorKind');
  late final _clang_getTemplateCursorKind =
      _clang_getTemplateCursorKind_ptr.asFunction<int Function(CXCursor)>();

  /// Given a cursor that may represent a specialization or instantiation
  /// of a template, retrieve the cursor that represents the template that it
  /// specializes or from which it was instantiated.
  ///
  /// This routine determines the template involved both for explicit
  /// specializations of templates and for implicit instantiations of the template,
  /// both of which are referred to as "specializations". For a class template
  /// specialization (e.g., \c std::vector<bool>), this routine will return
  /// either the primary template (\c std::vector) or, if the specialization was
  /// instantiated from a class template partial specialization, the class template
  /// partial specialization. For a class template partial specialization and a
  /// function template specialization (including instantiations), this
  /// this routine will return the specialized template.
  ///
  /// For members of a class template (e.g., member functions, member classes, or
  /// static data members), returns the specialized or instantiated member.
  /// Although not strictly "templates" in the C++ language, members of class
  /// templates have the same notions of specializations and instantiations that
  /// templates do, so this routine treats them similarly.
  ///
  /// \param C A cursor that may be a specialization of a template or a member
  /// of a template.
  ///
  /// \returns If the given cursor is a specialization or instantiation of a
  /// template or a member thereof, the template or member that it specializes or
  /// from which it was instantiated. Otherwise, returns a NULL cursor.
  CXCursor clang_getSpecializedCursorTemplate(
    CXCursor C,
  ) {
    return _clang_getSpecializedCursorTemplate(
      C,
    );
  }

  late final _clang_getSpecializedCursorTemplate_ptr =
      _lookup<ffi.NativeFunction<CXCursor Function(CXCursor)>>(
          'clang_getSpecializedCursorTemplate');
  late final _clang_getSpecializedCursorTemplate =
      _clang_getSpecializedCursorTemplate_ptr
          .asFunction<CXCursor Function(CXCursor)>();

  /// Given a cursor that references something else, return the source range
  /// covering that reference.
  ///
  /// \param C A cursor pointing to a member reference, a declaration reference, or
  /// an operator call.
  /// \param NameFlags A bitset with three independent flags:
  /// CXNameRange_WantQualifier, CXNameRange_WantTemplateArgs, and
  /// CXNameRange_WantSinglePiece.
  /// \param PieceIndex For contiguous names or when passing the flag
  /// CXNameRange_WantSinglePiece, only one piece with index 0 is
  /// available. When the CXNameRange_WantSinglePiece flag is not passed for a
  /// non-contiguous names, this index can be used to retrieve the individual
  /// pieces of the name. See also CXNameRange_WantSinglePiece.
  ///
  /// \returns The piece of the name pointed to by the given cursor. If there is no
  /// name, or if the PieceIndex is out-of-range, a null-cursor will be returned.
  CXSourceRange clang_getCursorReferenceNameRange(
    CXCursor C,
    int NameFlags,
    int PieceIndex,
  ) {
    return _clang_getCursorReferenceNameRange(
      C,
      NameFlags,
      PieceIndex,
    );
  }

  late final _clang_getCursorReferenceNameRange_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceRange Function(CXCursor, ffi.Uint32,
              ffi.Uint32)>>('clang_getCursorReferenceNameRange');
  late final _clang_getCursorReferenceNameRange =
      _clang_getCursorReferenceNameRange_ptr
          .asFunction<CXSourceRange Function(CXCursor, int, int)>();

  /// Get the raw lexical token starting with the given location.
  ///
  /// \param TU the translation unit whose text is being tokenized.
  ///
  /// \param Location the source location with which the token starts.
  ///
  /// \returns The token starting with the given location or NULL if no such token
  /// exist. The returned pointer must be freed with clang_disposeTokens before the
  /// translation unit is destroyed.
  ffi.Pointer<CXToken> clang_getToken(
    CXTranslationUnit TU,
    CXSourceLocation Location,
  ) {
    return _clang_getToken(
      TU,
      Location,
    );
  }

  late final _clang_getToken_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CXToken> Function(
              CXTranslationUnit, CXSourceLocation)>>('clang_getToken');
  late final _clang_getToken = _clang_getToken_ptr.asFunction<
      ffi.Pointer<CXToken> Function(CXTranslationUnit, CXSourceLocation)>();

  /// Determine the kind of the given token.
  int clang_getTokenKind(
    CXToken arg0,
  ) {
    return _clang_getTokenKind(
      arg0,
    );
  }

  late final _clang_getTokenKind_ptr =
      _lookup<ffi.NativeFunction<CXTokenKind Function(CXToken)>>(
          'clang_getTokenKind');
  late final _clang_getTokenKind =
      _clang_getTokenKind_ptr.asFunction<int Function(CXToken)>();

  /// Determine the spelling of the given token.
  ///
  /// The spelling of a token is the textual representation of that token, e.g.,
  /// the text of an identifier or keyword.
  CXString clang_getTokenSpelling(
    CXTranslationUnit arg0,
    CXToken arg1,
  ) {
    return _clang_getTokenSpelling(
      arg0,
      arg1,
    );
  }

  late final _clang_getTokenSpelling_ptr = _lookup<
          ffi.NativeFunction<CXString Function(CXTranslationUnit, CXToken)>>(
      'clang_getTokenSpelling');
  late final _clang_getTokenSpelling = _clang_getTokenSpelling_ptr
      .asFunction<CXString Function(CXTranslationUnit, CXToken)>();

  /// Retrieve the source location of the given token.
  CXSourceLocation clang_getTokenLocation(
    CXTranslationUnit arg0,
    CXToken arg1,
  ) {
    return _clang_getTokenLocation(
      arg0,
      arg1,
    );
  }

  late final _clang_getTokenLocation_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceLocation Function(
              CXTranslationUnit, CXToken)>>('clang_getTokenLocation');
  late final _clang_getTokenLocation = _clang_getTokenLocation_ptr
      .asFunction<CXSourceLocation Function(CXTranslationUnit, CXToken)>();

  /// Retrieve a source range that covers the given token.
  CXSourceRange clang_getTokenExtent(
    CXTranslationUnit arg0,
    CXToken arg1,
  ) {
    return _clang_getTokenExtent(
      arg0,
      arg1,
    );
  }

  late final _clang_getTokenExtent_ptr = _lookup<
      ffi.NativeFunction<
          CXSourceRange Function(
              CXTranslationUnit, CXToken)>>('clang_getTokenExtent');
  late final _clang_getTokenExtent = _clang_getTokenExtent_ptr
      .asFunction<CXSourceRange Function(CXTranslationUnit, CXToken)>();

  /// Tokenize the source code described by the given range into raw
  /// lexical tokens.
  ///
  /// \param TU the translation unit whose text is being tokenized.
  ///
  /// \param Range the source range in which text should be tokenized. All of the
  /// tokens produced by tokenization will fall within this source range,
  ///
  /// \param Tokens this pointer will be set to point to the array of tokens
  /// that occur within the given source range. The returned pointer must be
  /// freed with clang_disposeTokens() before the translation unit is destroyed.
  ///
  /// \param NumTokens will be set to the number of tokens in the \c *Tokens
  /// array.
  void clang_tokenize(
    CXTranslationUnit TU,
    CXSourceRange Range,
    ffi.Pointer<ffi.Pointer<CXToken>> Tokens,
    ffi.Pointer<ffi.Uint32> NumTokens,
  ) {
    return _clang_tokenize(
      TU,
      Range,
      Tokens,
      NumTokens,
    );
  }

  late final _clang_tokenize_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXTranslationUnit,
              CXSourceRange,
              ffi.Pointer<ffi.Pointer<CXToken>>,
              ffi.Pointer<ffi.Uint32>)>>('clang_tokenize');
  late final _clang_tokenize = _clang_tokenize_ptr.asFunction<
      void Function(CXTranslationUnit, CXSourceRange,
          ffi.Pointer<ffi.Pointer<CXToken>>, ffi.Pointer<ffi.Uint32>)>();

  /// Annotate the given set of tokens by providing cursors for each token
  /// that can be mapped to a specific entity within the abstract syntax tree.
  ///
  /// This token-annotation routine is equivalent to invoking
  /// clang_getCursor() for the source locations of each of the
  /// tokens. The cursors provided are filtered, so that only those
  /// cursors that have a direct correspondence to the token are
  /// accepted. For example, given a function call \c f(x),
  /// clang_getCursor() would provide the following cursors:
  ///
  /// * when the cursor is over the 'f', a DeclRefExpr cursor referring to 'f'.
  /// * when the cursor is over the '(' or the ')', a CallExpr referring to 'f'.
  /// * when the cursor is over the 'x', a DeclRefExpr cursor referring to 'x'.
  ///
  /// Only the first and last of these cursors will occur within the
  /// annotate, since the tokens "f" and "x' directly refer to a function
  /// and a variable, respectively, but the parentheses are just a small
  /// part of the full syntax of the function call expression, which is
  /// not provided as an annotation.
  ///
  /// \param TU the translation unit that owns the given tokens.
  ///
  /// \param Tokens the set of tokens to annotate.
  ///
  /// \param NumTokens the number of tokens in \p Tokens.
  ///
  /// \param Cursors an array of \p NumTokens cursors, whose contents will be
  /// replaced with the cursors corresponding to each token.
  void clang_annotateTokens(
    CXTranslationUnit TU,
    ffi.Pointer<CXToken> Tokens,
    int NumTokens,
    ffi.Pointer<CXCursor> Cursors,
  ) {
    return _clang_annotateTokens(
      TU,
      Tokens,
      NumTokens,
      Cursors,
    );
  }

  late final _clang_annotateTokens_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXTranslationUnit, ffi.Pointer<CXToken>, ffi.Uint32,
              ffi.Pointer<CXCursor>)>>('clang_annotateTokens');
  late final _clang_annotateTokens = _clang_annotateTokens_ptr.asFunction<
      void Function(CXTranslationUnit, ffi.Pointer<CXToken>, int,
          ffi.Pointer<CXCursor>)>();

  /// Free the given set of tokens.
  void clang_disposeTokens(
    CXTranslationUnit TU,
    ffi.Pointer<CXToken> Tokens,
    int NumTokens,
  ) {
    return _clang_disposeTokens(
      TU,
      Tokens,
      NumTokens,
    );
  }

  late final _clang_disposeTokens_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXTranslationUnit, ffi.Pointer<CXToken>,
              ffi.Uint32)>>('clang_disposeTokens');
  late final _clang_disposeTokens = _clang_disposeTokens_ptr.asFunction<
      void Function(CXTranslationUnit, ffi.Pointer<CXToken>, int)>();

  /// \defgroup CINDEX_DEBUG Debugging facilities
  ///
  /// These routines are used for testing and debugging, only, and should not
  /// be relied upon.
  ///
  /// @{
  CXString clang_getCursorKindSpelling(
    int Kind,
  ) {
    return _clang_getCursorKindSpelling(
      Kind,
    );
  }

  late final _clang_getCursorKindSpelling_ptr =
      _lookup<ffi.NativeFunction<CXString Function(ffi.Int32)>>(
          'clang_getCursorKindSpelling');
  late final _clang_getCursorKindSpelling =
      _clang_getCursorKindSpelling_ptr.asFunction<CXString Function(int)>();

  void clang_getDefinitionSpellingAndExtent(
    CXCursor arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> startBuf,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> endBuf,
    ffi.Pointer<ffi.Uint32> startLine,
    ffi.Pointer<ffi.Uint32> startColumn,
    ffi.Pointer<ffi.Uint32> endLine,
    ffi.Pointer<ffi.Uint32> endColumn,
  ) {
    return _clang_getDefinitionSpellingAndExtent(
      arg0,
      startBuf,
      endBuf,
      startLine,
      startColumn,
      endLine,
      endColumn,
    );
  }

  late final _clang_getDefinitionSpellingAndExtent_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CXCursor,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>)>>(
      'clang_getDefinitionSpellingAndExtent');
  late final _clang_getDefinitionSpellingAndExtent =
      _clang_getDefinitionSpellingAndExtent_ptr.asFunction<
          void Function(
              CXCursor,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  void clang_enableStackTraces() {
    return _clang_enableStackTraces();
  }

  late final _clang_enableStackTraces_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'clang_enableStackTraces');
  late final _clang_enableStackTraces =
      _clang_enableStackTraces_ptr.asFunction<void Function()>();

  void clang_executeOnThread(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> user_data,
    int stack_size,
  ) {
    return _clang_executeOnThread(
      fn,
      user_data,
      stack_size,
    );
  }

  late final _clang_executeOnThread_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('clang_executeOnThread');
  late final _clang_executeOnThread = _clang_executeOnThread_ptr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int)>();

  /// Determine the kind of a particular chunk within a completion string.
  ///
  /// \param completion_string the completion string to query.
  ///
  /// \param chunk_number the 0-based index of the chunk in the completion string.
  ///
  /// \returns the kind of the chunk at the index \c chunk_number.
  int clang_getCompletionChunkKind(
    CXCompletionString completion_string,
    int chunk_number,
  ) {
    return _clang_getCompletionChunkKind(
      completion_string,
      chunk_number,
    );
  }

  late final _clang_getCompletionChunkKind_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXCompletionString, ffi.Uint32)>>('clang_getCompletionChunkKind');
  late final _clang_getCompletionChunkKind = _clang_getCompletionChunkKind_ptr
      .asFunction<int Function(CXCompletionString, int)>();

  /// Retrieve the text associated with a particular chunk within a
  /// completion string.
  ///
  /// \param completion_string the completion string to query.
  ///
  /// \param chunk_number the 0-based index of the chunk in the completion string.
  ///
  /// \returns the text associated with the chunk at index \c chunk_number.
  CXString clang_getCompletionChunkText(
    CXCompletionString completion_string,
    int chunk_number,
  ) {
    return _clang_getCompletionChunkText(
      completion_string,
      chunk_number,
    );
  }

  late final _clang_getCompletionChunkText_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(
              CXCompletionString, ffi.Uint32)>>('clang_getCompletionChunkText');
  late final _clang_getCompletionChunkText = _clang_getCompletionChunkText_ptr
      .asFunction<CXString Function(CXCompletionString, int)>();

  /// Retrieve the completion string associated with a particular chunk
  /// within a completion string.
  ///
  /// \param completion_string the completion string to query.
  ///
  /// \param chunk_number the 0-based index of the chunk in the completion string.
  ///
  /// \returns the completion string associated with the chunk at index
  /// \c chunk_number.
  CXCompletionString clang_getCompletionChunkCompletionString(
    CXCompletionString completion_string,
    int chunk_number,
  ) {
    return _clang_getCompletionChunkCompletionString(
      completion_string,
      chunk_number,
    );
  }

  late final _clang_getCompletionChunkCompletionString_ptr = _lookup<
      ffi.NativeFunction<
          CXCompletionString Function(CXCompletionString,
              ffi.Uint32)>>('clang_getCompletionChunkCompletionString');
  late final _clang_getCompletionChunkCompletionString =
      _clang_getCompletionChunkCompletionString_ptr
          .asFunction<CXCompletionString Function(CXCompletionString, int)>();

  /// Retrieve the number of chunks in the given code-completion string.
  int clang_getNumCompletionChunks(
    CXCompletionString completion_string,
  ) {
    return _clang_getNumCompletionChunks(
      completion_string,
    );
  }

  late final _clang_getNumCompletionChunks_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>(
          'clang_getNumCompletionChunks');
  late final _clang_getNumCompletionChunks = _clang_getNumCompletionChunks_ptr
      .asFunction<int Function(CXCompletionString)>();

  /// Determine the priority of this code completion.
  ///
  /// The priority of a code completion indicates how likely it is that this
  /// particular completion is the completion that the user will select. The
  /// priority is selected by various internal heuristics.
  ///
  /// \param completion_string The completion string to query.
  ///
  /// \returns The priority of this completion string. Smaller values indicate
  /// higher-priority (more likely) completions.
  int clang_getCompletionPriority(
    CXCompletionString completion_string,
  ) {
    return _clang_getCompletionPriority(
      completion_string,
    );
  }

  late final _clang_getCompletionPriority_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>(
          'clang_getCompletionPriority');
  late final _clang_getCompletionPriority = _clang_getCompletionPriority_ptr
      .asFunction<int Function(CXCompletionString)>();

  /// Determine the availability of the entity that this code-completion
  /// string refers to.
  ///
  /// \param completion_string The completion string to query.
  ///
  /// \returns The availability of the completion string.
  int clang_getCompletionAvailability(
    CXCompletionString completion_string,
  ) {
    return _clang_getCompletionAvailability(
      completion_string,
    );
  }

  late final _clang_getCompletionAvailability_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXCompletionString)>>(
          'clang_getCompletionAvailability');
  late final _clang_getCompletionAvailability =
      _clang_getCompletionAvailability_ptr
          .asFunction<int Function(CXCompletionString)>();

  /// Retrieve the number of annotations associated with the given
  /// completion string.
  ///
  /// \param completion_string the completion string to query.
  ///
  /// \returns the number of annotations associated with the given completion
  /// string.
  int clang_getCompletionNumAnnotations(
    CXCompletionString completion_string,
  ) {
    return _clang_getCompletionNumAnnotations(
      completion_string,
    );
  }

  late final _clang_getCompletionNumAnnotations_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>(
          'clang_getCompletionNumAnnotations');
  late final _clang_getCompletionNumAnnotations =
      _clang_getCompletionNumAnnotations_ptr
          .asFunction<int Function(CXCompletionString)>();

  /// Retrieve the annotation associated with the given completion string.
  ///
  /// \param completion_string the completion string to query.
  ///
  /// \param annotation_number the 0-based index of the annotation of the
  /// completion string.
  ///
  /// \returns annotation string associated with the completion at index
  /// \c annotation_number, or a NULL string if that annotation is not available.
  CXString clang_getCompletionAnnotation(
    CXCompletionString completion_string,
    int annotation_number,
  ) {
    return _clang_getCompletionAnnotation(
      completion_string,
      annotation_number,
    );
  }

  late final _clang_getCompletionAnnotation_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(CXCompletionString,
              ffi.Uint32)>>('clang_getCompletionAnnotation');
  late final _clang_getCompletionAnnotation = _clang_getCompletionAnnotation_ptr
      .asFunction<CXString Function(CXCompletionString, int)>();

  /// Retrieve the parent context of the given completion string.
  ///
  /// The parent context of a completion string is the semantic parent of
  /// the declaration (if any) that the code completion represents. For example,
  /// a code completion for an Objective-C method would have the method's class
  /// or protocol as its context.
  ///
  /// \param completion_string The code completion string whose parent is
  /// being queried.
  ///
  /// \param kind DEPRECATED: always set to CXCursor_NotImplemented if non-NULL.
  ///
  /// \returns The name of the completion parent, e.g., "NSObject" if
  /// the completion string represents a method in the NSObject class.
  CXString clang_getCompletionParent(
    CXCompletionString completion_string,
    ffi.Pointer<ffi.Int32> kind,
  ) {
    return _clang_getCompletionParent(
      completion_string,
      kind,
    );
  }

  late final _clang_getCompletionParent_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(CXCompletionString,
              ffi.Pointer<ffi.Int32>)>>('clang_getCompletionParent');
  late final _clang_getCompletionParent =
      _clang_getCompletionParent_ptr.asFunction<
          CXString Function(CXCompletionString, ffi.Pointer<ffi.Int32>)>();

  /// Retrieve the brief documentation comment attached to the declaration
  /// that corresponds to the given completion string.
  CXString clang_getCompletionBriefComment(
    CXCompletionString completion_string,
  ) {
    return _clang_getCompletionBriefComment(
      completion_string,
    );
  }

  late final _clang_getCompletionBriefComment_ptr =
      _lookup<ffi.NativeFunction<CXString Function(CXCompletionString)>>(
          'clang_getCompletionBriefComment');
  late final _clang_getCompletionBriefComment =
      _clang_getCompletionBriefComment_ptr
          .asFunction<CXString Function(CXCompletionString)>();

  /// Retrieve a completion string for an arbitrary declaration or macro
  /// definition cursor.
  ///
  /// \param cursor The cursor to query.
  ///
  /// \returns A non-context-sensitive completion string for declaration and macro
  /// definition cursors, or NULL for other kinds of cursors.
  CXCompletionString clang_getCursorCompletionString(
    CXCursor cursor,
  ) {
    return _clang_getCursorCompletionString(
      cursor,
    );
  }

  late final _clang_getCursorCompletionString_ptr =
      _lookup<ffi.NativeFunction<CXCompletionString Function(CXCursor)>>(
          'clang_getCursorCompletionString');
  late final _clang_getCursorCompletionString =
      _clang_getCursorCompletionString_ptr
          .asFunction<CXCompletionString Function(CXCursor)>();

  /// Retrieve the number of fix-its for the given completion index.
  ///
  /// Calling this makes sense only if CXCodeComplete_IncludeCompletionsWithFixIts
  /// option was set.
  ///
  /// \param results The structure keeping all completion results
  ///
  /// \param completion_index The index of the completion
  ///
  /// \return The number of fix-its which must be applied before the completion at
  /// completion_index can be applied
  int clang_getCompletionNumFixIts(
    ffi.Pointer<CXCodeCompleteResults> results,
    int completion_index,
  ) {
    return _clang_getCompletionNumFixIts(
      results,
      completion_index,
    );
  }

  late final _clang_getCompletionNumFixIts_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<CXCodeCompleteResults>,
              ffi.Uint32)>>('clang_getCompletionNumFixIts');
  late final _clang_getCompletionNumFixIts = _clang_getCompletionNumFixIts_ptr
      .asFunction<int Function(ffi.Pointer<CXCodeCompleteResults>, int)>();

  /// Fix-its that *must* be applied before inserting the text for the
  /// corresponding completion.
  ///
  /// By default, clang_codeCompleteAt() only returns completions with empty
  /// fix-its. Extra completions with non-empty fix-its should be explicitly
  /// requested by setting CXCodeComplete_IncludeCompletionsWithFixIts.
  ///
  /// For the clients to be able to compute position of the cursor after applying
  /// fix-its, the following conditions are guaranteed to hold for
  /// replacement_range of the stored fix-its:
  /// - Ranges in the fix-its are guaranteed to never contain the completion
  /// point (or identifier under completion point, if any) inside them, except
  /// at the start or at the end of the range.
  /// - If a fix-it range starts or ends with completion point (or starts or
  /// ends after the identifier under completion point), it will contain at
  /// least one character. It allows to unambiguously recompute completion
  /// point after applying the fix-it.
  ///
  /// The intuition is that provided fix-its change code around the identifier we
  /// complete, but are not allowed to touch the identifier itself or the
  /// completion point. One example of completions with corrections are the ones
  /// replacing '.' with '->' and vice versa:
  ///
  /// std::unique_ptr<std::vector<int>> vec_ptr;
  /// In 'vec_ptr.^', one of the completions is 'push_back', it requires
  /// replacing '.' with '->'.
  /// In 'vec_ptr->^', one of the completions is 'release', it requires
  /// replacing '->' with '.'.
  ///
  /// \param results The structure keeping all completion results
  ///
  /// \param completion_index The index of the completion
  ///
  /// \param fixit_index The index of the fix-it for the completion at
  /// completion_index
  ///
  /// \param replacement_range The fix-it range that must be replaced before the
  /// completion at completion_index can be applied
  ///
  /// \returns The fix-it string that must replace the code at replacement_range
  /// before the completion at completion_index can be applied
  CXString clang_getCompletionFixIt(
    ffi.Pointer<CXCodeCompleteResults> results,
    int completion_index,
    int fixit_index,
    ffi.Pointer<CXSourceRange> replacement_range,
  ) {
    return _clang_getCompletionFixIt(
      results,
      completion_index,
      fixit_index,
      replacement_range,
    );
  }

  late final _clang_getCompletionFixIt_ptr = _lookup<
      ffi.NativeFunction<
          CXString Function(
              ffi.Pointer<CXCodeCompleteResults>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<CXSourceRange>)>>('clang_getCompletionFixIt');
  late final _clang_getCompletionFixIt =
      _clang_getCompletionFixIt_ptr.asFunction<
          CXString Function(ffi.Pointer<CXCodeCompleteResults>, int, int,
              ffi.Pointer<CXSourceRange>)>();

  /// Returns a default set of code-completion options that can be
  /// passed to\c clang_codeCompleteAt().
  int clang_defaultCodeCompleteOptions() {
    return _clang_defaultCodeCompleteOptions();
  }

  late final _clang_defaultCodeCompleteOptions_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'clang_defaultCodeCompleteOptions');
  late final _clang_defaultCodeCompleteOptions =
      _clang_defaultCodeCompleteOptions_ptr.asFunction<int Function()>();

  /// Perform code completion at a given location in a translation unit.
  ///
  /// This function performs code completion at a particular file, line, and
  /// column within source code, providing results that suggest potential
  /// code snippets based on the context of the completion. The basic model
  /// for code completion is that Clang will parse a complete source file,
  /// performing syntax checking up to the location where code-completion has
  /// been requested. At that point, a special code-completion token is passed
  /// to the parser, which recognizes this token and determines, based on the
  /// current location in the C/Objective-C/C++ grammar and the state of
  /// semantic analysis, what completions to provide. These completions are
  /// returned via a new \c CXCodeCompleteResults structure.
  ///
  /// Code completion itself is meant to be triggered by the client when the
  /// user types punctuation characters or whitespace, at which point the
  /// code-completion location will coincide with the cursor. For example, if \c p
  /// is a pointer, code-completion might be triggered after the "-" and then
  /// after the ">" in \c p->. When the code-completion location is after the ">",
  /// the completion results will provide, e.g., the members of the struct that
  /// "p" points to. The client is responsible for placing the cursor at the
  /// beginning of the token currently being typed, then filtering the results
  /// based on the contents of the token. For example, when code-completing for
  /// the expression \c p->get, the client should provide the location just after
  /// the ">" (e.g., pointing at the "g") to this code-completion hook. Then, the
  /// client can filter the results based on the current token text ("get"), only
  /// showing those results that start with "get". The intent of this interface
  /// is to separate the relatively high-latency acquisition of code-completion
  /// results from the filtering of results on a per-character basis, which must
  /// have a lower latency.
  ///
  /// \param TU The translation unit in which code-completion should
  /// occur. The source files for this translation unit need not be
  /// completely up-to-date (and the contents of those source files may
  /// be overridden via \p unsaved_files). Cursors referring into the
  /// translation unit may be invalidated by this invocation.
  ///
  /// \param complete_filename The name of the source file where code
  /// completion should be performed. This filename may be any file
  /// included in the translation unit.
  ///
  /// \param complete_line The line at which code-completion should occur.
  ///
  /// \param complete_column The column at which code-completion should occur.
  /// Note that the column should point just after the syntactic construct that
  /// initiated code completion, and not in the middle of a lexical token.
  ///
  /// \param unsaved_files the Files that have not yet been saved to disk
  /// but may be required for parsing or code completion, including the
  /// contents of those files.  The contents and name of these files (as
  /// specified by CXUnsavedFile) are copied when necessary, so the
  /// client only needs to guarantee their validity until the call to
  /// this function returns.
  ///
  /// \param num_unsaved_files The number of unsaved file entries in \p
  /// unsaved_files.
  ///
  /// \param options Extra options that control the behavior of code
  /// completion, expressed as a bitwise OR of the enumerators of the
  /// CXCodeComplete_Flags enumeration. The
  /// \c clang_defaultCodeCompleteOptions() function returns a default set
  /// of code-completion options.
  ///
  /// \returns If successful, a new \c CXCodeCompleteResults structure
  /// containing code-completion results, which should eventually be
  /// freed with \c clang_disposeCodeCompleteResults(). If code
  /// completion fails, returns NULL.
  ffi.Pointer<CXCodeCompleteResults> clang_codeCompleteAt(
    CXTranslationUnit TU,
    ffi.Pointer<ffi.Int8> complete_filename,
    int complete_line,
    int complete_column,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    int options,
  ) {
    return _clang_codeCompleteAt(
      TU,
      complete_filename,
      complete_line,
      complete_column,
      unsaved_files,
      num_unsaved_files,
      options,
    );
  }

  late final _clang_codeCompleteAt_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CXCodeCompleteResults> Function(
              CXTranslationUnit,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Uint32)>>('clang_codeCompleteAt');
  late final _clang_codeCompleteAt = _clang_codeCompleteAt_ptr.asFunction<
      ffi.Pointer<CXCodeCompleteResults> Function(
          CXTranslationUnit,
          ffi.Pointer<ffi.Int8>,
          int,
          int,
          ffi.Pointer<CXUnsavedFile>,
          int,
          int)>();

  /// Sort the code-completion results in case-insensitive alphabetical
  /// order.
  ///
  /// \param Results The set of results to sort.
  /// \param NumResults The number of results in \p Results.
  void clang_sortCodeCompletionResults(
    ffi.Pointer<CXCompletionResult> Results,
    int NumResults,
  ) {
    return _clang_sortCodeCompletionResults(
      Results,
      NumResults,
    );
  }

  late final _clang_sortCodeCompletionResults_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CXCompletionResult>,
              ffi.Uint32)>>('clang_sortCodeCompletionResults');
  late final _clang_sortCodeCompletionResults =
      _clang_sortCodeCompletionResults_ptr
          .asFunction<void Function(ffi.Pointer<CXCompletionResult>, int)>();

  /// Free the given set of code-completion results.
  void clang_disposeCodeCompleteResults(
    ffi.Pointer<CXCodeCompleteResults> Results,
  ) {
    return _clang_disposeCodeCompleteResults(
      Results,
    );
  }

  late final _clang_disposeCodeCompleteResults_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CXCodeCompleteResults>)>>(
      'clang_disposeCodeCompleteResults');
  late final _clang_disposeCodeCompleteResults =
      _clang_disposeCodeCompleteResults_ptr
          .asFunction<void Function(ffi.Pointer<CXCodeCompleteResults>)>();

  /// Determine the number of diagnostics produced prior to the
  /// location where code completion was performed.
  int clang_codeCompleteGetNumDiagnostics(
    ffi.Pointer<CXCodeCompleteResults> Results,
  ) {
    return _clang_codeCompleteGetNumDiagnostics(
      Results,
    );
  }

  late final _clang_codeCompleteGetNumDiagnostics_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<CXCodeCompleteResults>)>>(
      'clang_codeCompleteGetNumDiagnostics');
  late final _clang_codeCompleteGetNumDiagnostics =
      _clang_codeCompleteGetNumDiagnostics_ptr
          .asFunction<int Function(ffi.Pointer<CXCodeCompleteResults>)>();

  /// Retrieve a diagnostic associated with the given code completion.
  ///
  /// \param Results the code completion results to query.
  /// \param Index the zero-based diagnostic number to retrieve.
  ///
  /// \returns the requested diagnostic. This diagnostic must be freed
  /// via a call to \c clang_disposeDiagnostic().
  CXDiagnostic clang_codeCompleteGetDiagnostic(
    ffi.Pointer<CXCodeCompleteResults> Results,
    int Index,
  ) {
    return _clang_codeCompleteGetDiagnostic(
      Results,
      Index,
    );
  }

  late final _clang_codeCompleteGetDiagnostic_ptr = _lookup<
      ffi.NativeFunction<
          CXDiagnostic Function(ffi.Pointer<CXCodeCompleteResults>,
              ffi.Uint32)>>('clang_codeCompleteGetDiagnostic');
  late final _clang_codeCompleteGetDiagnostic =
      _clang_codeCompleteGetDiagnostic_ptr.asFunction<
          CXDiagnostic Function(ffi.Pointer<CXCodeCompleteResults>, int)>();

  /// Determines what completions are appropriate for the context
  /// the given code completion.
  ///
  /// \param Results the code completion results to query
  ///
  /// \returns the kinds of completions that are appropriate for use
  /// along with the given code completion results.
  int clang_codeCompleteGetContexts(
    ffi.Pointer<CXCodeCompleteResults> Results,
  ) {
    return _clang_codeCompleteGetContexts(
      Results,
    );
  }

  late final _clang_codeCompleteGetContexts_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<CXCodeCompleteResults>)>>(
      'clang_codeCompleteGetContexts');
  late final _clang_codeCompleteGetContexts = _clang_codeCompleteGetContexts_ptr
      .asFunction<int Function(ffi.Pointer<CXCodeCompleteResults>)>();

  /// Returns the cursor kind for the container for the current code
  /// completion context. The container is only guaranteed to be set for
  /// contexts where a container exists (i.e. member accesses or Objective-C
  /// message sends); if there is not a container, this function will return
  /// CXCursor_InvalidCode.
  ///
  /// \param Results the code completion results to query
  ///
  /// \param IsIncomplete on return, this value will be false if Clang has complete
  /// information about the container. If Clang does not have complete
  /// information, this value will be true.
  ///
  /// \returns the container kind, or CXCursor_InvalidCode if there is not a
  /// container
  int clang_codeCompleteGetContainerKind(
    ffi.Pointer<CXCodeCompleteResults> Results,
    ffi.Pointer<ffi.Uint32> IsIncomplete,
  ) {
    return _clang_codeCompleteGetContainerKind(
      Results,
      IsIncomplete,
    );
  }

  late final _clang_codeCompleteGetContainerKind_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CXCodeCompleteResults>,
              ffi.Pointer<ffi.Uint32>)>>('clang_codeCompleteGetContainerKind');
  late final _clang_codeCompleteGetContainerKind =
      _clang_codeCompleteGetContainerKind_ptr.asFunction<
          int Function(
              ffi.Pointer<CXCodeCompleteResults>, ffi.Pointer<ffi.Uint32>)>();

  /// Returns the USR for the container for the current code completion
  /// context. If there is not a container for the current context, this
  /// function will return the empty string.
  ///
  /// \param Results the code completion results to query
  ///
  /// \returns the USR for the container
  CXString clang_codeCompleteGetContainerUSR(
    ffi.Pointer<CXCodeCompleteResults> Results,
  ) {
    return _clang_codeCompleteGetContainerUSR(
      Results,
    );
  }

  late final _clang_codeCompleteGetContainerUSR_ptr = _lookup<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<CXCodeCompleteResults>)>>(
      'clang_codeCompleteGetContainerUSR');
  late final _clang_codeCompleteGetContainerUSR =
      _clang_codeCompleteGetContainerUSR_ptr
          .asFunction<CXString Function(ffi.Pointer<CXCodeCompleteResults>)>();

  /// Returns the currently-entered selector for an Objective-C message
  /// send, formatted like "initWithFoo:bar:". Only guaranteed to return a
  /// non-empty string for CXCompletionContext_ObjCInstanceMessage and
  /// CXCompletionContext_ObjCClassMessage.
  ///
  /// \param Results the code completion results to query
  ///
  /// \returns the selector (or partial selector) that has been entered thus far
  /// for an Objective-C message send.
  CXString clang_codeCompleteGetObjCSelector(
    ffi.Pointer<CXCodeCompleteResults> Results,
  ) {
    return _clang_codeCompleteGetObjCSelector(
      Results,
    );
  }

  late final _clang_codeCompleteGetObjCSelector_ptr = _lookup<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<CXCodeCompleteResults>)>>(
      'clang_codeCompleteGetObjCSelector');
  late final _clang_codeCompleteGetObjCSelector =
      _clang_codeCompleteGetObjCSelector_ptr
          .asFunction<CXString Function(ffi.Pointer<CXCodeCompleteResults>)>();

  /// Return a version string, suitable for showing to a user, but not
  /// intended to be parsed (the format is not guaranteed to be stable).
  CXString clang_getClangVersion() {
    return _clang_getClangVersion();
  }

  late final _clang_getClangVersion_ptr =
      _lookup<ffi.NativeFunction<CXString Function()>>('clang_getClangVersion');
  late final _clang_getClangVersion =
      _clang_getClangVersion_ptr.asFunction<CXString Function()>();

  /// Enable/disable crash recovery.
  ///
  /// \param isEnabled Flag to indicate if crash recovery is enabled.  A non-zero
  /// value enables crash recovery, while 0 disables it.
  void clang_toggleCrashRecovery(
    int isEnabled,
  ) {
    return _clang_toggleCrashRecovery(
      isEnabled,
    );
  }

  late final _clang_toggleCrashRecovery_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>(
          'clang_toggleCrashRecovery');
  late final _clang_toggleCrashRecovery =
      _clang_toggleCrashRecovery_ptr.asFunction<void Function(int)>();

  /// Visit the set of preprocessor inclusions in a translation unit.
  /// The visitor function is called with the provided data for every included
  /// file.  This does not include headers included by the PCH file (unless one
  /// is inspecting the inclusions in the PCH file itself).
  void clang_getInclusions(
    CXTranslationUnit tu,
    CXInclusionVisitor visitor,
    CXClientData client_data,
  ) {
    return _clang_getInclusions(
      tu,
      visitor,
      client_data,
    );
  }

  late final _clang_getInclusions_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXTranslationUnit, CXInclusionVisitor,
              CXClientData)>>('clang_getInclusions');
  late final _clang_getInclusions = _clang_getInclusions_ptr.asFunction<
      void Function(CXTranslationUnit, CXInclusionVisitor, CXClientData)>();

  /// If cursor is a statement declaration tries to evaluate the
  /// statement and if its variable, tries to evaluate its initializer,
  /// into its corresponding type.
  CXEvalResult clang_Cursor_Evaluate(
    CXCursor C,
  ) {
    return _clang_Cursor_Evaluate(
      C,
    );
  }

  late final _clang_Cursor_Evaluate_ptr =
      _lookup<ffi.NativeFunction<CXEvalResult Function(CXCursor)>>(
          'clang_Cursor_Evaluate');
  late final _clang_Cursor_Evaluate =
      _clang_Cursor_Evaluate_ptr.asFunction<CXEvalResult Function(CXCursor)>();

  /// Returns the kind of the evaluated result.
  int clang_EvalResult_getKind(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getKind(
      E,
    );
  }

  late final _clang_EvalResult_getKind_ptr =
      _lookup<ffi.NativeFunction<CXEvalResultKind Function(CXEvalResult)>>(
          'clang_EvalResult_getKind');
  late final _clang_EvalResult_getKind =
      _clang_EvalResult_getKind_ptr.asFunction<int Function(CXEvalResult)>();

  /// Returns the evaluation result as integer if the
  /// kind is Int.
  int clang_EvalResult_getAsInt(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getAsInt(
      E,
    );
  }

  late final _clang_EvalResult_getAsInt_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXEvalResult)>>(
          'clang_EvalResult_getAsInt');
  late final _clang_EvalResult_getAsInt =
      _clang_EvalResult_getAsInt_ptr.asFunction<int Function(CXEvalResult)>();

  /// Returns the evaluation result as a long long integer if the
  /// kind is Int. This prevents overflows that may happen if the result is
  /// returned with clang_EvalResult_getAsInt.
  int clang_EvalResult_getAsLongLong(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getAsLongLong(
      E,
    );
  }

  late final _clang_EvalResult_getAsLongLong_ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(CXEvalResult)>>(
          'clang_EvalResult_getAsLongLong');
  late final _clang_EvalResult_getAsLongLong =
      _clang_EvalResult_getAsLongLong_ptr
          .asFunction<int Function(CXEvalResult)>();

  /// Returns a non-zero value if the kind is Int and the evaluation
  /// result resulted in an unsigned integer.
  int clang_EvalResult_isUnsignedInt(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_isUnsignedInt(
      E,
    );
  }

  late final _clang_EvalResult_isUnsignedInt_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXEvalResult)>>(
          'clang_EvalResult_isUnsignedInt');
  late final _clang_EvalResult_isUnsignedInt =
      _clang_EvalResult_isUnsignedInt_ptr
          .asFunction<int Function(CXEvalResult)>();

  /// Returns the evaluation result as an unsigned integer if
  /// the kind is Int and clang_EvalResult_isUnsignedInt is non-zero.
  int clang_EvalResult_getAsUnsigned(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getAsUnsigned(
      E,
    );
  }

  late final _clang_EvalResult_getAsUnsigned_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(CXEvalResult)>>(
          'clang_EvalResult_getAsUnsigned');
  late final _clang_EvalResult_getAsUnsigned =
      _clang_EvalResult_getAsUnsigned_ptr
          .asFunction<int Function(CXEvalResult)>();

  /// Returns the evaluation result as double if the
  /// kind is double.
  double clang_EvalResult_getAsDouble(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getAsDouble(
      E,
    );
  }

  late final _clang_EvalResult_getAsDouble_ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CXEvalResult)>>(
          'clang_EvalResult_getAsDouble');
  late final _clang_EvalResult_getAsDouble = _clang_EvalResult_getAsDouble_ptr
      .asFunction<double Function(CXEvalResult)>();

  /// Returns the evaluation result as a constant string if the
  /// kind is other than Int or float. User must not free this pointer,
  /// instead call clang_EvalResult_dispose on the CXEvalResult returned
  /// by clang_Cursor_Evaluate.
  ffi.Pointer<ffi.Int8> clang_EvalResult_getAsStr(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_getAsStr(
      E,
    );
  }

  late final _clang_EvalResult_getAsStr_ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(CXEvalResult)>>(
          'clang_EvalResult_getAsStr');
  late final _clang_EvalResult_getAsStr = _clang_EvalResult_getAsStr_ptr
      .asFunction<ffi.Pointer<ffi.Int8> Function(CXEvalResult)>();

  /// Disposes the created Eval memory.
  void clang_EvalResult_dispose(
    CXEvalResult E,
  ) {
    return _clang_EvalResult_dispose(
      E,
    );
  }

  late final _clang_EvalResult_dispose_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXEvalResult)>>(
          'clang_EvalResult_dispose');
  late final _clang_EvalResult_dispose =
      _clang_EvalResult_dispose_ptr.asFunction<void Function(CXEvalResult)>();

  /// Retrieve a remapping.
  ///
  /// \param path the path that contains metadata about remappings.
  ///
  /// \returns the requested remapping. This remapping must be freed
  /// via a call to \c clang_remap_dispose(). Can return NULL if an error occurred.
  CXRemapping clang_getRemappings(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _clang_getRemappings(
      path,
    );
  }

  late final _clang_getRemappings_ptr =
      _lookup<ffi.NativeFunction<CXRemapping Function(ffi.Pointer<ffi.Int8>)>>(
          'clang_getRemappings');
  late final _clang_getRemappings = _clang_getRemappings_ptr
      .asFunction<CXRemapping Function(ffi.Pointer<ffi.Int8>)>();

  /// Retrieve a remapping.
  ///
  /// \param filePaths pointer to an array of file paths containing remapping info.
  ///
  /// \param numFiles number of file paths.
  ///
  /// \returns the requested remapping. This remapping must be freed
  /// via a call to \c clang_remap_dispose(). Can return NULL if an error occurred.
  CXRemapping clang_getRemappingsFromFileList(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> filePaths,
    int numFiles,
  ) {
    return _clang_getRemappingsFromFileList(
      filePaths,
      numFiles,
    );
  }

  late final _clang_getRemappingsFromFileList_ptr = _lookup<
      ffi.NativeFunction<
          CXRemapping Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Uint32)>>('clang_getRemappingsFromFileList');
  late final _clang_getRemappingsFromFileList =
      _clang_getRemappingsFromFileList_ptr.asFunction<
          CXRemapping Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  /// Determine the number of remappings.
  int clang_remap_getNumFiles(
    CXRemapping arg0,
  ) {
    return _clang_remap_getNumFiles(
      arg0,
    );
  }

  late final _clang_remap_getNumFiles_ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CXRemapping)>>(
          'clang_remap_getNumFiles');
  late final _clang_remap_getNumFiles =
      _clang_remap_getNumFiles_ptr.asFunction<int Function(CXRemapping)>();

  /// Get the original and the associated filename from the remapping.
  ///
  /// \param original If non-NULL, will be set to the original filename.
  ///
  /// \param transformed If non-NULL, will be set to the filename that the original
  /// is associated with.
  void clang_remap_getFilenames(
    CXRemapping arg0,
    int index,
    ffi.Pointer<CXString> original,
    ffi.Pointer<CXString> transformed,
  ) {
    return _clang_remap_getFilenames(
      arg0,
      index,
      original,
      transformed,
    );
  }

  late final _clang_remap_getFilenames_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CXRemapping, ffi.Uint32, ffi.Pointer<CXString>,
              ffi.Pointer<CXString>)>>('clang_remap_getFilenames');
  late final _clang_remap_getFilenames =
      _clang_remap_getFilenames_ptr.asFunction<
          void Function(CXRemapping, int, ffi.Pointer<CXString>,
              ffi.Pointer<CXString>)>();

  /// Dispose the remapping.
  void clang_remap_dispose(
    CXRemapping arg0,
  ) {
    return _clang_remap_dispose(
      arg0,
    );
  }

  late final _clang_remap_dispose_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXRemapping)>>(
          'clang_remap_dispose');
  late final _clang_remap_dispose =
      _clang_remap_dispose_ptr.asFunction<void Function(CXRemapping)>();

  /// Find references of a declaration in a specific file.
  ///
  /// \param cursor pointing to a declaration or a reference of one.
  ///
  /// \param file to search for references.
  ///
  /// \param visitor callback that will receive pairs of CXCursor/CXSourceRange for
  /// each reference found.
  /// The CXSourceRange will point inside the file; if the reference is inside
  /// a macro (and not a macro argument) the CXSourceRange will be invalid.
  ///
  /// \returns one of the CXResult enumerators.
  int clang_findReferencesInFile(
    CXCursor cursor,
    CXFile file,
    CXCursorAndRangeVisitor visitor,
  ) {
    return _clang_findReferencesInFile(
      cursor,
      file,
      visitor,
    );
  }

  late final _clang_findReferencesInFile_ptr = _lookup<
      ffi.NativeFunction<
          CXResult Function(CXCursor, CXFile,
              CXCursorAndRangeVisitor)>>('clang_findReferencesInFile');
  late final _clang_findReferencesInFile = _clang_findReferencesInFile_ptr
      .asFunction<int Function(CXCursor, CXFile, CXCursorAndRangeVisitor)>();

  /// Find #import/#include directives in a specific file.
  ///
  /// \param TU translation unit containing the file to query.
  ///
  /// \param file to search for #import/#include directives.
  ///
  /// \param visitor callback that will receive pairs of CXCursor/CXSourceRange for
  /// each directive found.
  ///
  /// \returns one of the CXResult enumerators.
  int clang_findIncludesInFile(
    CXTranslationUnit TU,
    CXFile file,
    CXCursorAndRangeVisitor visitor,
  ) {
    return _clang_findIncludesInFile(
      TU,
      file,
      visitor,
    );
  }

  late final _clang_findIncludesInFile_ptr = _lookup<
      ffi.NativeFunction<
          CXResult Function(CXTranslationUnit, CXFile,
              CXCursorAndRangeVisitor)>>('clang_findIncludesInFile');
  late final _clang_findIncludesInFile =
      _clang_findIncludesInFile_ptr.asFunction<
          int Function(CXTranslationUnit, CXFile, CXCursorAndRangeVisitor)>();

  int clang_index_isEntityObjCContainerKind(
    int arg0,
  ) {
    return _clang_index_isEntityObjCContainerKind(
      arg0,
    );
  }

  late final _clang_index_isEntityObjCContainerKind_ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CXIdxEntityKind)>>(
          'clang_index_isEntityObjCContainerKind');
  late final _clang_index_isEntityObjCContainerKind =
      _clang_index_isEntityObjCContainerKind_ptr
          .asFunction<int Function(int)>();

  ffi.Pointer<CXIdxObjCContainerDeclInfo> clang_index_getObjCContainerDeclInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getObjCContainerDeclInfo(
      arg0,
    );
  }

  late final _clang_index_getObjCContainerDeclInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCContainerDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>(
      'clang_index_getObjCContainerDeclInfo');
  late final _clang_index_getObjCContainerDeclInfo =
      _clang_index_getObjCContainerDeclInfo_ptr.asFunction<
          ffi.Pointer<CXIdxObjCContainerDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  ffi.Pointer<CXIdxObjCInterfaceDeclInfo> clang_index_getObjCInterfaceDeclInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getObjCInterfaceDeclInfo(
      arg0,
    );
  }

  late final _clang_index_getObjCInterfaceDeclInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCInterfaceDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>(
      'clang_index_getObjCInterfaceDeclInfo');
  late final _clang_index_getObjCInterfaceDeclInfo =
      _clang_index_getObjCInterfaceDeclInfo_ptr.asFunction<
          ffi.Pointer<CXIdxObjCInterfaceDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  ffi.Pointer<CXIdxObjCCategoryDeclInfo> clang_index_getObjCCategoryDeclInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getObjCCategoryDeclInfo(
      arg0,
    );
  }

  late final _clang_index_getObjCCategoryDeclInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCCategoryDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>(
      'clang_index_getObjCCategoryDeclInfo');
  late final _clang_index_getObjCCategoryDeclInfo =
      _clang_index_getObjCCategoryDeclInfo_ptr.asFunction<
          ffi.Pointer<CXIdxObjCCategoryDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  ffi.Pointer<CXIdxObjCProtocolRefListInfo>
      clang_index_getObjCProtocolRefListInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getObjCProtocolRefListInfo(
      arg0,
    );
  }

  late final _clang_index_getObjCProtocolRefListInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCProtocolRefListInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>(
      'clang_index_getObjCProtocolRefListInfo');
  late final _clang_index_getObjCProtocolRefListInfo =
      _clang_index_getObjCProtocolRefListInfo_ptr.asFunction<
          ffi.Pointer<CXIdxObjCProtocolRefListInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  ffi.Pointer<CXIdxObjCPropertyDeclInfo> clang_index_getObjCPropertyDeclInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getObjCPropertyDeclInfo(
      arg0,
    );
  }

  late final _clang_index_getObjCPropertyDeclInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCPropertyDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>(
      'clang_index_getObjCPropertyDeclInfo');
  late final _clang_index_getObjCPropertyDeclInfo =
      _clang_index_getObjCPropertyDeclInfo_ptr.asFunction<
          ffi.Pointer<CXIdxObjCPropertyDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  ffi.Pointer<CXIdxIBOutletCollectionAttrInfo>
      clang_index_getIBOutletCollectionAttrInfo(
    ffi.Pointer<CXIdxAttrInfo> arg0,
  ) {
    return _clang_index_getIBOutletCollectionAttrInfo(
      arg0,
    );
  }

  late final _clang_index_getIBOutletCollectionAttrInfo_ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxIBOutletCollectionAttrInfo> Function(
                  ffi.Pointer<CXIdxAttrInfo>)>>(
      'clang_index_getIBOutletCollectionAttrInfo');
  late final _clang_index_getIBOutletCollectionAttrInfo =
      _clang_index_getIBOutletCollectionAttrInfo_ptr.asFunction<
          ffi.Pointer<CXIdxIBOutletCollectionAttrInfo> Function(
              ffi.Pointer<CXIdxAttrInfo>)>();

  ffi.Pointer<CXIdxCXXClassDeclInfo> clang_index_getCXXClassDeclInfo(
    ffi.Pointer<CXIdxDeclInfo> arg0,
  ) {
    return _clang_index_getCXXClassDeclInfo(
      arg0,
    );
  }

  late final _clang_index_getCXXClassDeclInfo_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CXIdxCXXClassDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>>('clang_index_getCXXClassDeclInfo');
  late final _clang_index_getCXXClassDeclInfo =
      _clang_index_getCXXClassDeclInfo_ptr.asFunction<
          ffi.Pointer<CXIdxCXXClassDeclInfo> Function(
              ffi.Pointer<CXIdxDeclInfo>)>();

  /// For retrieving a custom CXIdxClientContainer attached to a
  /// container.
  CXIdxClientContainer clang_index_getClientContainer(
    ffi.Pointer<CXIdxContainerInfo> arg0,
  ) {
    return _clang_index_getClientContainer(
      arg0,
    );
  }

  late final _clang_index_getClientContainer_ptr = _lookup<
          ffi.NativeFunction<
              CXIdxClientContainer Function(ffi.Pointer<CXIdxContainerInfo>)>>(
      'clang_index_getClientContainer');
  late final _clang_index_getClientContainer =
      _clang_index_getClientContainer_ptr.asFunction<
          CXIdxClientContainer Function(ffi.Pointer<CXIdxContainerInfo>)>();

  /// For setting a custom CXIdxClientContainer attached to a
  /// container.
  void clang_index_setClientContainer(
    ffi.Pointer<CXIdxContainerInfo> arg0,
    CXIdxClientContainer arg1,
  ) {
    return _clang_index_setClientContainer(
      arg0,
      arg1,
    );
  }

  late final _clang_index_setClientContainer_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CXIdxContainerInfo>,
              CXIdxClientContainer)>>('clang_index_setClientContainer');
  late final _clang_index_setClientContainer =
      _clang_index_setClientContainer_ptr.asFunction<
          void Function(
              ffi.Pointer<CXIdxContainerInfo>, CXIdxClientContainer)>();

  /// For retrieving a custom CXIdxClientEntity attached to an entity.
  CXIdxClientEntity clang_index_getClientEntity(
    ffi.Pointer<CXIdxEntityInfo> arg0,
  ) {
    return _clang_index_getClientEntity(
      arg0,
    );
  }

  late final _clang_index_getClientEntity_ptr = _lookup<
      ffi.NativeFunction<
          CXIdxClientEntity Function(
              ffi.Pointer<CXIdxEntityInfo>)>>('clang_index_getClientEntity');
  late final _clang_index_getClientEntity = _clang_index_getClientEntity_ptr
      .asFunction<CXIdxClientEntity Function(ffi.Pointer<CXIdxEntityInfo>)>();

  /// For setting a custom CXIdxClientEntity attached to an entity.
  void clang_index_setClientEntity(
    ffi.Pointer<CXIdxEntityInfo> arg0,
    CXIdxClientEntity arg1,
  ) {
    return _clang_index_setClientEntity(
      arg0,
      arg1,
    );
  }

  late final _clang_index_setClientEntity_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CXIdxEntityInfo>,
              CXIdxClientEntity)>>('clang_index_setClientEntity');
  late final _clang_index_setClientEntity =
      _clang_index_setClientEntity_ptr.asFunction<
          void Function(ffi.Pointer<CXIdxEntityInfo>, CXIdxClientEntity)>();

  /// An indexing action/session, to be applied to one or multiple
  /// translation units.
  ///
  /// \param CIdx The index object with which the index action will be associated.
  CXIndexAction clang_IndexAction_create(
    CXIndex CIdx,
  ) {
    return _clang_IndexAction_create(
      CIdx,
    );
  }

  late final _clang_IndexAction_create_ptr =
      _lookup<ffi.NativeFunction<CXIndexAction Function(CXIndex)>>(
          'clang_IndexAction_create');
  late final _clang_IndexAction_create = _clang_IndexAction_create_ptr
      .asFunction<CXIndexAction Function(CXIndex)>();

  /// Destroy the given index action.
  ///
  /// The index action must not be destroyed until all of the translation units
  /// created within that index action have been destroyed.
  void clang_IndexAction_dispose(
    CXIndexAction arg0,
  ) {
    return _clang_IndexAction_dispose(
      arg0,
    );
  }

  late final _clang_IndexAction_dispose_ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CXIndexAction)>>(
          'clang_IndexAction_dispose');
  late final _clang_IndexAction_dispose =
      _clang_IndexAction_dispose_ptr.asFunction<void Function(CXIndexAction)>();

  /// Index the given source file and the translation unit corresponding
  /// to that file via callbacks implemented through #IndexerCallbacks.
  ///
  /// \param client_data pointer data supplied by the client, which will
  /// be passed to the invoked callbacks.
  ///
  /// \param index_callbacks Pointer to indexing callbacks that the client
  /// implements.
  ///
  /// \param index_callbacks_size Size of #IndexerCallbacks structure that gets
  /// passed in index_callbacks.
  ///
  /// \param index_options A bitmask of options that affects how indexing is
  /// performed. This should be a bitwise OR of the CXIndexOpt_XXX flags.
  ///
  /// \param[out] out_TU pointer to store a \c CXTranslationUnit that can be
  /// reused after indexing is finished. Set to \c NULL if you do not require it.
  ///
  /// \returns 0 on success or if there were errors from which the compiler could
  /// recover.  If there is a failure from which there is no recovery, returns
  /// a non-zero \c CXErrorCode.
  ///
  /// The rest of the parameters are the same as #clang_parseTranslationUnit.
  int clang_indexSourceFile(
    CXIndexAction arg0,
    CXClientData client_data,
    ffi.Pointer<IndexerCallbacks> index_callbacks,
    int index_callbacks_size,
    int index_options,
    ffi.Pointer<ffi.Int8> source_filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_args,
    int num_command_line_args,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    ffi.Pointer<CXTranslationUnit> out_TU,
    int TU_options,
  ) {
    return _clang_indexSourceFile(
      arg0,
      client_data,
      index_callbacks,
      index_callbacks_size,
      index_options,
      source_filename,
      command_line_args,
      num_command_line_args,
      unsaved_files,
      num_unsaved_files,
      out_TU,
      TU_options,
    );
  }

  late final _clang_indexSourceFile_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Pointer<CXTranslationUnit>,
              ffi.Uint32)>>('clang_indexSourceFile');
  late final _clang_indexSourceFile = _clang_indexSourceFile_ptr.asFunction<
      int Function(
          CXIndexAction,
          CXClientData,
          ffi.Pointer<IndexerCallbacks>,
          int,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          ffi.Pointer<CXUnsavedFile>,
          int,
          ffi.Pointer<CXTranslationUnit>,
          int)>();

  /// Same as clang_indexSourceFile but requires a full command line
  /// for \c command_line_args including argv[0]. This is useful if the standard
  /// library paths are relative to the binary.
  int clang_indexSourceFileFullArgv(
    CXIndexAction arg0,
    CXClientData client_data,
    ffi.Pointer<IndexerCallbacks> index_callbacks,
    int index_callbacks_size,
    int index_options,
    ffi.Pointer<ffi.Int8> source_filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> command_line_args,
    int num_command_line_args,
    ffi.Pointer<CXUnsavedFile> unsaved_files,
    int num_unsaved_files,
    ffi.Pointer<CXTranslationUnit> out_TU,
    int TU_options,
  ) {
    return _clang_indexSourceFileFullArgv(
      arg0,
      client_data,
      index_callbacks,
      index_callbacks_size,
      index_options,
      source_filename,
      command_line_args,
      num_command_line_args,
      unsaved_files,
      num_unsaved_files,
      out_TU,
      TU_options,
    );
  }

  late final _clang_indexSourceFileFullArgv_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Pointer<CXTranslationUnit>,
              ffi.Uint32)>>('clang_indexSourceFileFullArgv');
  late final _clang_indexSourceFileFullArgv =
      _clang_indexSourceFileFullArgv_ptr.asFunction<
          int Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              int,
              int,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              int,
              ffi.Pointer<CXUnsavedFile>,
              int,
              ffi.Pointer<CXTranslationUnit>,
              int)>();

  /// Index the given translation unit via callbacks implemented through
  /// #IndexerCallbacks.
  ///
  /// The order of callback invocations is not guaranteed to be the same as
  /// when indexing a source file. The high level order will be:
  ///
  /// -Preprocessor callbacks invocations
  /// -Declaration/reference callbacks invocations
  /// -Diagnostic callback invocations
  ///
  /// The parameters are the same as #clang_indexSourceFile.
  ///
  /// \returns If there is a failure from which there is no recovery, returns
  /// non-zero, otherwise returns 0.
  int clang_indexTranslationUnit(
    CXIndexAction arg0,
    CXClientData client_data,
    ffi.Pointer<IndexerCallbacks> index_callbacks,
    int index_callbacks_size,
    int index_options,
    CXTranslationUnit arg5,
  ) {
    return _clang_indexTranslationUnit(
      arg0,
      client_data,
      index_callbacks,
      index_callbacks_size,
      index_options,
      arg5,
    );
  }

  late final _clang_indexTranslationUnit_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              CXTranslationUnit)>>('clang_indexTranslationUnit');
  late final _clang_indexTranslationUnit =
      _clang_indexTranslationUnit_ptr.asFunction<
          int Function(CXIndexAction, CXClientData,
              ffi.Pointer<IndexerCallbacks>, int, int, CXTranslationUnit)>();

  /// Retrieve the CXIdxFile, file, line, column, and offset represented by
  /// the given CXIdxLoc.
  ///
  /// If the location refers into a macro expansion, retrieves the
  /// location of the macro expansion and if it refers into a macro argument
  /// retrieves the location of the argument.
  void clang_indexLoc_getFileLocation(
    CXIdxLoc loc,
    ffi.Pointer<CXIdxClientFile> indexFile,
    ffi.Pointer<CXFile> file,
    ffi.Pointer<ffi.Uint32> line,
    ffi.Pointer<ffi.Uint32> column,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _clang_indexLoc_getFileLocation(
      loc,
      indexFile,
      file,
      line,
      column,
      offset,
    );
  }

  late final _clang_indexLoc_getFileLocation_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CXIdxLoc,
              ffi.Pointer<CXIdxClientFile>,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('clang_indexLoc_getFileLocation');
  late final _clang_indexLoc_getFileLocation =
      _clang_indexLoc_getFileLocation_ptr.asFunction<
          void Function(
              CXIdxLoc,
              ffi.Pointer<CXIdxClientFile>,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Retrieve the CXSourceLocation represented by the given CXIdxLoc.
  CXSourceLocation clang_indexLoc_getCXSourceLocation(
    CXIdxLoc loc,
  ) {
    return _clang_indexLoc_getCXSourceLocation(
      loc,
    );
  }

  late final _clang_indexLoc_getCXSourceLocation_ptr =
      _lookup<ffi.NativeFunction<CXSourceLocation Function(CXIdxLoc)>>(
          'clang_indexLoc_getCXSourceLocation');
  late final _clang_indexLoc_getCXSourceLocation =
      _clang_indexLoc_getCXSourceLocation_ptr
          .asFunction<CXSourceLocation Function(CXIdxLoc)>();

  /// Visit the fields of a particular type.
  ///
  /// This function visits all the direct fields of the given cursor,
  /// invoking the given \p visitor function with the cursors of each
  /// visited field. The traversal may be ended prematurely, if
  /// the visitor returns \c CXFieldVisit_Break.
  ///
  /// \param T the record type whose field may be visited.
  ///
  /// \param visitor the visitor function that will be invoked for each
  /// field of \p T.
  ///
  /// \param client_data pointer data supplied by the client, which will
  /// be passed to the visitor each time it is invoked.
  ///
  /// \returns a non-zero value if the traversal was terminated
  /// prematurely by the visitor returning \c CXFieldVisit_Break.
  int clang_Type_visitFields(
    CXType T,
    CXFieldVisitor visitor,
    CXClientData client_data,
  ) {
    return _clang_Type_visitFields(
      T,
      visitor,
      client_data,
    );
  }

  late final _clang_Type_visitFields_ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXType, CXFieldVisitor, CXClientData)>>('clang_Type_visitFields');
  late final _clang_Type_visitFields = _clang_Type_visitFields_ptr
      .asFunction<int Function(CXType, CXFieldVisitor, CXClientData)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibClang _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(CXString)>>
      get clang_getCString => _library._clang_getCString_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXString)>>
      get clang_disposeString => _library._clang_disposeString_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CXStringSet>)>>
      get clang_disposeStringSet => _library._clang_disposeStringSet_ptr;
  ffi.Pointer<ffi.NativeFunction<CXIndex Function(ffi.Int32, ffi.Int32)>>
      get clang_createIndex => _library._clang_createIndex_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXIndex)>>
      get clang_disposeIndex => _library._clang_disposeIndex_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXIndex, ffi.Uint32)>>
      get clang_CXIndex_setGlobalOptions =>
          _library._clang_CXIndex_setGlobalOptions_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXIndex)>>
      get clang_CXIndex_getGlobalOptions =>
          _library._clang_CXIndex_getGlobalOptions_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(CXIndex, ffi.Pointer<ffi.Int8>)>>
      get clang_CXIndex_setInvocationEmissionPathOption =>
          _library._clang_CXIndex_setInvocationEmissionPathOption_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXFile)>>
      get clang_getFileName => _library._clang_getFileName_ptr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(CXFile)>>
      get clang_getFileTime => _library._clang_getFileTime_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(CXFile, ffi.Pointer<CXFileUniqueID>)>>
      get clang_getFileUniqueID => _library._clang_getFileUniqueID_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit, CXFile)>>
      get clang_isFileMultipleIncludeGuarded =>
          _library._clang_isFileMultipleIncludeGuarded_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXFile Function(CXTranslationUnit, ffi.Pointer<ffi.Int8>)>>
      get clang_getFile => _library._clang_getFile_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  CXTranslationUnit, CXFile, ffi.Pointer<size_t>)>>
      get clang_getFileContents => _library._clang_getFileContents_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXFile, CXFile)>>
      get clang_File_isEqual => _library._clang_File_isEqual_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXFile)>>
      get clang_File_tryGetRealPathName =>
          _library._clang_File_tryGetRealPathName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function()>>
      get clang_getNullLocation => _library._clang_getNullLocation_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(CXSourceLocation, CXSourceLocation)>>
      get clang_equalLocations => _library._clang_equalLocations_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceLocation Function(
                  CXTranslationUnit, CXFile, ffi.Uint32, ffi.Uint32)>>
      get clang_getLocation => _library._clang_getLocation_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceLocation Function(CXTranslationUnit, CXFile, ffi.Uint32)>>
      get clang_getLocationForOffset =>
          _library._clang_getLocationForOffset_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXSourceLocation)>>
      get clang_Location_isInSystemHeader =>
          _library._clang_Location_isInSystemHeader_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXSourceLocation)>>
      get clang_Location_isFromMainFile =>
          _library._clang_Location_isFromMainFile_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceRange Function()>>
      get clang_getNullRange => _library._clang_getNullRange_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceRange Function(CXSourceLocation, CXSourceLocation)>>
      get clang_getRange => _library._clang_getRange_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Uint32 Function(CXSourceRange, CXSourceRange)>>
      get clang_equalRanges => _library._clang_equalRanges_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXSourceRange)>>
      get clang_Range_isNull => _library._clang_Range_isNull_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getExpansionLocation =>
      _library._clang_getExpansionLocation_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getPresumedLocation =>
      _library._clang_getPresumedLocation_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getInstantiationLocation =>
      _library._clang_getInstantiationLocation_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getSpellingLocation =>
      _library._clang_getSpellingLocation_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXSourceLocation,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getFileLocation =>
      _library._clang_getFileLocation_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function(CXSourceRange)>>
      get clang_getRangeStart => _library._clang_getRangeStart_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function(CXSourceRange)>>
      get clang_getRangeEnd => _library._clang_getRangeEnd_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<CXSourceRangeList> Function(
              CXTranslationUnit, CXFile)>> get clang_getSkippedRanges =>
      _library._clang_getSkippedRanges_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXSourceRangeList> Function(CXTranslationUnit)>>
      get clang_getAllSkippedRanges => _library._clang_getAllSkippedRanges_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CXSourceRangeList>)>>
      get clang_disposeSourceRangeList =>
          _library._clang_disposeSourceRangeList_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnosticSet)>>
      get clang_getNumDiagnosticsInSet =>
          _library._clang_getNumDiagnosticsInSet_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXDiagnostic Function(CXDiagnosticSet, ffi.Uint32)>>
      get clang_getDiagnosticInSet => _library._clang_getDiagnosticInSet_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          CXDiagnosticSet Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>)>> get clang_loadDiagnostics =>
      _library._clang_loadDiagnostics_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXDiagnosticSet)>>
      get clang_disposeDiagnosticSet =>
          _library._clang_disposeDiagnosticSet_ptr;
  ffi.Pointer<ffi.NativeFunction<CXDiagnosticSet Function(CXDiagnostic)>>
      get clang_getChildDiagnostics => _library._clang_getChildDiagnostics_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>
      get clang_getNumDiagnostics => _library._clang_getNumDiagnostics_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXDiagnostic Function(CXTranslationUnit, ffi.Uint32)>>
      get clang_getDiagnostic => _library._clang_getDiagnostic_ptr;
  ffi.Pointer<ffi.NativeFunction<CXDiagnosticSet Function(CXTranslationUnit)>>
      get clang_getDiagnosticSetFromTU =>
          _library._clang_getDiagnosticSetFromTU_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXDiagnostic)>>
      get clang_disposeDiagnostic => _library._clang_disposeDiagnostic_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXDiagnostic, ffi.Uint32)>>
      get clang_formatDiagnostic => _library._clang_formatDiagnostic_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>
      get clang_defaultDiagnosticDisplayOptions =>
          _library._clang_defaultDiagnosticDisplayOptions_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXDiagnostic)>>
      get clang_getDiagnosticSeverity =>
          _library._clang_getDiagnosticSeverity_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function(CXDiagnostic)>>
      get clang_getDiagnosticLocation =>
          _library._clang_getDiagnosticLocation_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXDiagnostic)>>
      get clang_getDiagnosticSpelling =>
          _library._clang_getDiagnosticSpelling_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(CXDiagnostic, ffi.Pointer<CXString>)>>
      get clang_getDiagnosticOption => _library._clang_getDiagnosticOption_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>
      get clang_getDiagnosticCategory =>
          _library._clang_getDiagnosticCategory_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(ffi.Uint32)>>
      get clang_getDiagnosticCategoryName =>
          _library._clang_getDiagnosticCategoryName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXDiagnostic)>>
      get clang_getDiagnosticCategoryText =>
          _library._clang_getDiagnosticCategoryText_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>
      get clang_getDiagnosticNumRanges =>
          _library._clang_getDiagnosticNumRanges_ptr;
  ffi.Pointer<
          ffi.NativeFunction<CXSourceRange Function(CXDiagnostic, ffi.Uint32)>>
      get clang_getDiagnosticRange => _library._clang_getDiagnosticRange_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXDiagnostic)>>
      get clang_getDiagnosticNumFixIts =>
          _library._clang_getDiagnosticNumFixIts_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(
                  CXDiagnostic, ffi.Uint32, ffi.Pointer<CXSourceRange>)>>
      get clang_getDiagnosticFixIt => _library._clang_getDiagnosticFixIt_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXTranslationUnit)>>
      get clang_getTranslationUnitSpelling =>
          _library._clang_getTranslationUnitSpelling_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXTranslationUnit Function(
                  CXIndex,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Uint32,
                  ffi.Pointer<CXUnsavedFile>)>>
      get clang_createTranslationUnitFromSourceFile =>
          _library._clang_createTranslationUnitFromSourceFile_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXTranslationUnit Function(CXIndex, ffi.Pointer<ffi.Int8>)>>
      get clang_createTranslationUnit =>
          _library._clang_createTranslationUnit_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(CXIndex, ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<CXTranslationUnit>)>>
      get clang_createTranslationUnit2 =>
          _library._clang_createTranslationUnit2_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>
      get clang_defaultEditingTranslationUnitOptions =>
          _library._clang_defaultEditingTranslationUnitOptions_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          CXTranslationUnit Function(
              CXIndex,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Uint32)>> get clang_parseTranslationUnit =>
      _library._clang_parseTranslationUnit_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  CXIndex,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Int32,
                  ffi.Pointer<CXUnsavedFile>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<CXTranslationUnit>)>>
      get clang_parseTranslationUnit2 =>
          _library._clang_parseTranslationUnit2_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  CXIndex,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Int32,
                  ffi.Pointer<CXUnsavedFile>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<CXTranslationUnit>)>>
      get clang_parseTranslationUnit2FullArgv =>
          _library._clang_parseTranslationUnit2FullArgv_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>
      get clang_defaultSaveOptions => _library._clang_defaultSaveOptions_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  CXTranslationUnit, ffi.Pointer<ffi.Int8>, ffi.Uint32)>>
      get clang_saveTranslationUnit => _library._clang_saveTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>
      get clang_suspendTranslationUnit =>
          _library._clang_suspendTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXTranslationUnit)>>
      get clang_disposeTranslationUnit =>
          _library._clang_disposeTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit)>>
      get clang_defaultReparseOptions =>
          _library._clang_defaultReparseOptions_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXTranslationUnit,
              ffi.Uint32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32)>> get clang_reparseTranslationUnit =>
      _library._clang_reparseTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>
      get clang_getTUResourceUsageName =>
          _library._clang_getTUResourceUsageName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXTUResourceUsage Function(CXTranslationUnit)>>
      get clang_getCXTUResourceUsage =>
          _library._clang_getCXTUResourceUsage_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXTUResourceUsage)>>
      get clang_disposeCXTUResourceUsage =>
          _library._clang_disposeCXTUResourceUsage_ptr;
  ffi.Pointer<ffi.NativeFunction<CXTargetInfo Function(CXTranslationUnit)>>
      get clang_getTranslationUnitTargetInfo =>
          _library._clang_getTranslationUnitTargetInfo_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXTargetInfo)>>
      get clang_TargetInfo_dispose => _library._clang_TargetInfo_dispose_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXTargetInfo)>>
      get clang_TargetInfo_getTriple =>
          _library._clang_TargetInfo_getTriple_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXTargetInfo)>>
      get clang_TargetInfo_getPointerWidth =>
          _library._clang_TargetInfo_getPointerWidth_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function()>>
      get clang_getNullCursor => _library._clang_getNullCursor_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXTranslationUnit)>>
      get clang_getTranslationUnitCursor =>
          _library._clang_getTranslationUnitCursor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor, CXCursor)>>
      get clang_equalCursors => _library._clang_equalCursors_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_isNull => _library._clang_Cursor_isNull_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_hashCursor => _library._clang_hashCursor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorKind => _library._clang_getCursorKind_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isDeclaration => _library._clang_isDeclaration_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_isInvalidDeclaration =>
          _library._clang_isInvalidDeclaration_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isReference => _library._clang_isReference_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isExpression => _library._clang_isExpression_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isStatement => _library._clang_isStatement_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isAttribute => _library._clang_isAttribute_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_hasAttrs => _library._clang_Cursor_hasAttrs_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isInvalid => _library._clang_isInvalid_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isTranslationUnit => _library._clang_isTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isPreprocessing => _library._clang_isPreprocessing_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>
      get clang_isUnexposed => _library._clang_isUnexposed_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorLinkage => _library._clang_getCursorLinkage_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorVisibility => _library._clang_getCursorVisibility_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorAvailability =>
          _library._clang_getCursorAvailability_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXCursor,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CXString>,
              ffi.Pointer<CXPlatformAvailability>,
              ffi.Int32)>> get clang_getCursorPlatformAvailability =>
      _library._clang_getCursorPlatformAvailability_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CXPlatformAvailability>)>>
      get clang_disposeCXPlatformAvailability =>
          _library._clang_disposeCXPlatformAvailability_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorLanguage => _library._clang_getCursorLanguage_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorTLSKind => _library._clang_getCursorTLSKind_ptr;
  ffi.Pointer<ffi.NativeFunction<CXTranslationUnit Function(CXCursor)>>
      get clang_Cursor_getTranslationUnit =>
          _library._clang_Cursor_getTranslationUnit_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursorSet Function()>>
      get clang_createCXCursorSet => _library._clang_createCXCursorSet_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXCursorSet)>>
      get clang_disposeCXCursorSet => _library._clang_disposeCXCursorSet_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursorSet, CXCursor)>>
      get clang_CXCursorSet_contains =>
          _library._clang_CXCursorSet_contains_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursorSet, CXCursor)>>
      get clang_CXCursorSet_insert => _library._clang_CXCursorSet_insert_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getCursorSemanticParent =>
          _library._clang_getCursorSemanticParent_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getCursorLexicalParent =>
          _library._clang_getCursorLexicalParent_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CXCursor, ffi.Pointer<ffi.Pointer<CXCursor>>,
              ffi.Pointer<ffi.Uint32>)>> get clang_getOverriddenCursors =>
      _library._clang_getOverriddenCursors_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CXCursor>)>>
      get clang_disposeOverriddenCursors =>
          _library._clang_disposeOverriddenCursors_ptr;
  ffi.Pointer<ffi.NativeFunction<CXFile Function(CXCursor)>>
      get clang_getIncludedFile => _library._clang_getIncludedFile_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXCursor Function(CXTranslationUnit, CXSourceLocation)>>
      get clang_getCursor => _library._clang_getCursor_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function(CXCursor)>>
      get clang_getCursorLocation => _library._clang_getCursorLocation_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceRange Function(CXCursor)>>
      get clang_getCursorExtent => _library._clang_getCursorExtent_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_getCursorType => _library._clang_getCursorType_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXType)>>
      get clang_getTypeSpelling => _library._clang_getTypeSpelling_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_getTypedefDeclUnderlyingType =>
          _library._clang_getTypedefDeclUnderlyingType_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_getEnumDeclIntegerType =>
          _library._clang_getEnumDeclIntegerType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXCursor)>>
      get clang_getEnumConstantDeclValue =>
          _library._clang_getEnumConstantDeclValue_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(CXCursor)>>
      get clang_getEnumConstantDeclUnsignedValue =>
          _library._clang_getEnumConstantDeclUnsignedValue_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getFieldDeclBitWidth =>
          _library._clang_getFieldDeclBitWidth_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_getNumArguments =>
          _library._clang_Cursor_getNumArguments_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getArgument => _library._clang_Cursor_getArgument_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_getNumTemplateArguments =>
          _library._clang_Cursor_getNumTemplateArguments_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getTemplateArgumentKind =>
          _library._clang_Cursor_getTemplateArgumentKind_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getTemplateArgumentType =>
          _library._clang_Cursor_getTemplateArgumentType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getTemplateArgumentValue =>
          _library._clang_Cursor_getTemplateArgumentValue_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getTemplateArgumentUnsignedValue =>
          _library._clang_Cursor_getTemplateArgumentUnsignedValue_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType, CXType)>>
      get clang_equalTypes => _library._clang_equalTypes_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_getCanonicalType => _library._clang_getCanonicalType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_isConstQualifiedType =>
          _library._clang_isConstQualifiedType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isMacroFunctionLike =>
          _library._clang_Cursor_isMacroFunctionLike_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isMacroBuiltin =>
          _library._clang_Cursor_isMacroBuiltin_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isFunctionInlined =>
          _library._clang_Cursor_isFunctionInlined_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_isVolatileQualifiedType =>
          _library._clang_isVolatileQualifiedType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_isRestrictQualifiedType =>
          _library._clang_isRestrictQualifiedType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_getAddressSpace => _library._clang_getAddressSpace_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXType)>>
      get clang_getTypedefName => _library._clang_getTypedefName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_getPointeeType => _library._clang_getPointeeType_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXType)>>
      get clang_getTypeDeclaration => _library._clang_getTypeDeclaration_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_getDeclObjCTypeEncoding =>
          _library._clang_getDeclObjCTypeEncoding_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXType)>>
      get clang_Type_getObjCEncoding =>
          _library._clang_Type_getObjCEncoding_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(ffi.Int32)>>
      get clang_getTypeKindSpelling => _library._clang_getTypeKindSpelling_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_getFunctionTypeCallingConv =>
          _library._clang_getFunctionTypeCallingConv_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_getResultType => _library._clang_getResultType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_getExceptionSpecificationType =>
          _library._clang_getExceptionSpecificationType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_getNumArgTypes => _library._clang_getNumArgTypes_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>
      get clang_getArgType => _library._clang_getArgType_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_Type_getObjCObjectBaseType =>
          _library._clang_Type_getObjCObjectBaseType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_Type_getNumObjCProtocolRefs =>
          _library._clang_Type_getNumObjCProtocolRefs_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXType, ffi.Uint32)>>
      get clang_Type_getObjCProtocolDecl =>
          _library._clang_Type_getObjCProtocolDecl_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_Type_getNumObjCTypeArgs =>
          _library._clang_Type_getNumObjCTypeArgs_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>
      get clang_Type_getObjCTypeArg => _library._clang_Type_getObjCTypeArg_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_isFunctionTypeVariadic =>
          _library._clang_isFunctionTypeVariadic_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_getCursorResultType => _library._clang_getCursorResultType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCursorExceptionSpecificationType =>
          _library._clang_getCursorExceptionSpecificationType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_isPODType => _library._clang_isPODType_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_getElementType => _library._clang_getElementType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXType)>>
      get clang_getNumElements => _library._clang_getNumElements_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_getArrayElementType => _library._clang_getArrayElementType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXType)>>
      get clang_getArraySize => _library._clang_getArraySize_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_Type_getNamedType => _library._clang_Type_getNamedType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXType)>>
      get clang_Type_isTransparentTagTypedef =>
          _library._clang_Type_isTransparentTagTypedef_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_Type_getNullability => _library._clang_Type_getNullability_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXType)>>
      get clang_Type_getAlignOf => _library._clang_Type_getAlignOf_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_Type_getClassType => _library._clang_Type_getClassType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXType)>>
      get clang_Type_getSizeOf => _library._clang_Type_getSizeOf_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int64 Function(CXType, ffi.Pointer<ffi.Int8>)>>
      get clang_Type_getOffsetOf => _library._clang_Type_getOffsetOf_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType)>>
      get clang_Type_getModifiedType =>
          _library._clang_Type_getModifiedType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXCursor)>>
      get clang_Cursor_getOffsetOfField =>
          _library._clang_Cursor_getOffsetOfField_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isAnonymous => _library._clang_Cursor_isAnonymous_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isAnonymousRecordDecl =>
          _library._clang_Cursor_isAnonymousRecordDecl_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isInlineNamespace =>
          _library._clang_Cursor_isInlineNamespace_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_Type_getNumTemplateArguments =>
          _library._clang_Type_getNumTemplateArguments_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXType, ffi.Uint32)>>
      get clang_Type_getTemplateArgumentAsType =>
          _library._clang_Type_getTemplateArgumentAsType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXType)>>
      get clang_Type_getCXXRefQualifier =>
          _library._clang_Type_getCXXRefQualifier_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isBitField => _library._clang_Cursor_isBitField_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_isVirtualBase => _library._clang_isVirtualBase_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getCXXAccessSpecifier =>
          _library._clang_getCXXAccessSpecifier_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_getStorageClass =>
          _library._clang_Cursor_getStorageClass_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_getNumOverloadedDecls =>
          _library._clang_getNumOverloadedDecls_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor, ffi.Uint32)>>
      get clang_getOverloadedDecl => _library._clang_getOverloadedDecl_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_getIBOutletCollectionType =>
          _library._clang_getIBOutletCollectionType_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(CXCursor, CXCursorVisitor, CXClientData)>>
      get clang_visitChildren => _library._clang_visitChildren_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_getCursorUSR => _library._clang_getCursorUSR_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(ffi.Pointer<ffi.Int8>)>>
      get clang_constructUSR_ObjCClass =>
          _library._clang_constructUSR_ObjCClass_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>
      get clang_constructUSR_ObjCCategory =>
          _library._clang_constructUSR_ObjCCategory_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(ffi.Pointer<ffi.Int8>)>>
      get clang_constructUSR_ObjCProtocol =>
          _library._clang_constructUSR_ObjCProtocol_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<ffi.Int8>, CXString)>>
      get clang_constructUSR_ObjCIvar =>
          _library._clang_constructUSR_ObjCIvar_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<ffi.Int8>, ffi.Uint32, CXString)>>
      get clang_constructUSR_ObjCMethod =>
          _library._clang_constructUSR_ObjCMethod_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<ffi.Int8>, CXString)>>
      get clang_constructUSR_ObjCProperty =>
          _library._clang_constructUSR_ObjCProperty_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_getCursorSpelling => _library._clang_getCursorSpelling_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceRange Function(CXCursor, ffi.Uint32, ffi.Uint32)>>
      get clang_Cursor_getSpellingNameRange =>
          _library._clang_Cursor_getSpellingNameRange_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Uint32 Function(CXPrintingPolicy, ffi.Int32)>>
      get clang_PrintingPolicy_getProperty =>
          _library._clang_PrintingPolicy_getProperty_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(CXPrintingPolicy, ffi.Int32, ffi.Uint32)>>
      get clang_PrintingPolicy_setProperty =>
          _library._clang_PrintingPolicy_setProperty_ptr;
  ffi.Pointer<ffi.NativeFunction<CXPrintingPolicy Function(CXCursor)>>
      get clang_getCursorPrintingPolicy =>
          _library._clang_getCursorPrintingPolicy_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXPrintingPolicy)>>
      get clang_PrintingPolicy_dispose =>
          _library._clang_PrintingPolicy_dispose_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor, CXPrintingPolicy)>>
      get clang_getCursorPrettyPrinted =>
          _library._clang_getCursorPrettyPrinted_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_getCursorDisplayName =>
          _library._clang_getCursorDisplayName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getCursorReferenced => _library._clang_getCursorReferenced_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getCursorDefinition => _library._clang_getCursorDefinition_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_isCursorDefinition => _library._clang_isCursorDefinition_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getCanonicalCursor => _library._clang_getCanonicalCursor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_getObjCSelectorIndex =>
          _library._clang_Cursor_getObjCSelectorIndex_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_Cursor_isDynamicCall =>
          _library._clang_Cursor_isDynamicCall_ptr;
  ffi.Pointer<ffi.NativeFunction<CXType Function(CXCursor)>>
      get clang_Cursor_getReceiverType =>
          _library._clang_Cursor_getReceiverType_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor, ffi.Uint32)>>
      get clang_Cursor_getObjCPropertyAttributes =>
          _library._clang_Cursor_getObjCPropertyAttributes_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_Cursor_getObjCPropertyGetterName =>
          _library._clang_Cursor_getObjCPropertyGetterName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_Cursor_getObjCPropertySetterName =>
          _library._clang_Cursor_getObjCPropertySetterName_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_getObjCDeclQualifiers =>
          _library._clang_Cursor_getObjCDeclQualifiers_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isObjCOptional =>
          _library._clang_Cursor_isObjCOptional_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_Cursor_isVariadic => _library._clang_Cursor_isVariadic_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              CXCursor,
              ffi.Pointer<CXString>,
              ffi.Pointer<CXString>,
              ffi.Pointer<ffi.Uint32>)>> get clang_Cursor_isExternalSymbol =>
      _library._clang_Cursor_isExternalSymbol_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceRange Function(CXCursor)>>
      get clang_Cursor_getCommentRange =>
          _library._clang_Cursor_getCommentRange_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_Cursor_getRawCommentText =>
          _library._clang_Cursor_getRawCommentText_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_Cursor_getBriefCommentText =>
          _library._clang_Cursor_getBriefCommentText_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCursor)>>
      get clang_Cursor_getMangling => _library._clang_Cursor_getMangling_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>>
      get clang_Cursor_getCXXManglings =>
          _library._clang_Cursor_getCXXManglings_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<CXStringSet> Function(CXCursor)>>
      get clang_Cursor_getObjCManglings =>
          _library._clang_Cursor_getObjCManglings_ptr;
  ffi.Pointer<ffi.NativeFunction<CXModule Function(CXCursor)>>
      get clang_Cursor_getModule => _library._clang_Cursor_getModule_ptr;
  ffi.Pointer<ffi.NativeFunction<CXModule Function(CXTranslationUnit, CXFile)>>
      get clang_getModuleForFile => _library._clang_getModuleForFile_ptr;
  ffi.Pointer<ffi.NativeFunction<CXFile Function(CXModule)>>
      get clang_Module_getASTFile => _library._clang_Module_getASTFile_ptr;
  ffi.Pointer<ffi.NativeFunction<CXModule Function(CXModule)>>
      get clang_Module_getParent => _library._clang_Module_getParent_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXModule)>>
      get clang_Module_getName => _library._clang_Module_getName_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXModule)>>
      get clang_Module_getFullName => _library._clang_Module_getFullName_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXModule)>>
      get clang_Module_isSystem => _library._clang_Module_isSystem_ptr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Uint32 Function(CXTranslationUnit, CXModule)>>
      get clang_Module_getNumTopLevelHeaders =>
          _library._clang_Module_getNumTopLevelHeaders_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXFile Function(CXTranslationUnit, CXModule, ffi.Uint32)>>
      get clang_Module_getTopLevelHeader =>
          _library._clang_Module_getTopLevelHeader_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXConstructor_isConvertingConstructor =>
          _library._clang_CXXConstructor_isConvertingConstructor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXConstructor_isCopyConstructor =>
          _library._clang_CXXConstructor_isCopyConstructor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXConstructor_isDefaultConstructor =>
          _library._clang_CXXConstructor_isDefaultConstructor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXConstructor_isMoveConstructor =>
          _library._clang_CXXConstructor_isMoveConstructor_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXField_isMutable => _library._clang_CXXField_isMutable_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXMethod_isDefaulted =>
          _library._clang_CXXMethod_isDefaulted_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXMethod_isPureVirtual =>
          _library._clang_CXXMethod_isPureVirtual_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXMethod_isStatic => _library._clang_CXXMethod_isStatic_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXMethod_isVirtual => _library._clang_CXXMethod_isVirtual_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXRecord_isAbstract =>
          _library._clang_CXXRecord_isAbstract_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_EnumDecl_isScoped => _library._clang_EnumDecl_isScoped_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCursor)>>
      get clang_CXXMethod_isConst => _library._clang_CXXMethod_isConst_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor)>>
      get clang_getTemplateCursorKind =>
          _library._clang_getTemplateCursorKind_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCursor Function(CXCursor)>>
      get clang_getSpecializedCursorTemplate =>
          _library._clang_getSpecializedCursorTemplate_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceRange Function(CXCursor, ffi.Uint32, ffi.Uint32)>>
      get clang_getCursorReferenceNameRange =>
          _library._clang_getCursorReferenceNameRange_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<CXToken> Function(
              CXTranslationUnit, CXSourceLocation)>> get clang_getToken =>
      _library._clang_getToken_ptr;
  ffi.Pointer<ffi.NativeFunction<CXTokenKind Function(CXToken)>>
      get clang_getTokenKind => _library._clang_getTokenKind_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXTranslationUnit, CXToken)>>
      get clang_getTokenSpelling => _library._clang_getTokenSpelling_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceLocation Function(CXTranslationUnit, CXToken)>>
      get clang_getTokenLocation => _library._clang_getTokenLocation_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXSourceRange Function(CXTranslationUnit, CXToken)>>
      get clang_getTokenExtent => _library._clang_getTokenExtent_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXTranslationUnit,
              CXSourceRange,
              ffi.Pointer<ffi.Pointer<CXToken>>,
              ffi.Pointer<ffi.Uint32>)>> get clang_tokenize =>
      _library._clang_tokenize_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CXTranslationUnit, ffi.Pointer<CXToken>, ffi.Uint32,
              ffi.Pointer<CXCursor>)>> get clang_annotateTokens =>
      _library._clang_annotateTokens_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CXTranslationUnit, ffi.Pointer<CXToken>, ffi.Uint32)>>
      get clang_disposeTokens => _library._clang_disposeTokens_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(ffi.Int32)>>
      get clang_getCursorKindSpelling =>
          _library._clang_getCursorKindSpelling_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CXCursor,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>)>>
      get clang_getDefinitionSpellingAndExtent =>
          _library._clang_getDefinitionSpellingAndExtent_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get clang_enableStackTraces => _library._clang_enableStackTraces_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32)>> get clang_executeOnThread =>
      _library._clang_executeOnThread_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(CXCompletionString, ffi.Uint32)>>
      get clang_getCompletionChunkKind =>
          _library._clang_getCompletionChunkKind_ptr;
  ffi.Pointer<
          ffi.NativeFunction<CXString Function(CXCompletionString, ffi.Uint32)>>
      get clang_getCompletionChunkText =>
          _library._clang_getCompletionChunkText_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXCompletionString Function(CXCompletionString, ffi.Uint32)>>
      get clang_getCompletionChunkCompletionString =>
          _library._clang_getCompletionChunkCompletionString_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>
      get clang_getNumCompletionChunks =>
          _library._clang_getNumCompletionChunks_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>
      get clang_getCompletionPriority =>
          _library._clang_getCompletionPriority_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCompletionString)>>
      get clang_getCompletionAvailability =>
          _library._clang_getCompletionAvailability_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXCompletionString)>>
      get clang_getCompletionNumAnnotations =>
          _library._clang_getCompletionNumAnnotations_ptr;
  ffi.Pointer<
          ffi.NativeFunction<CXString Function(CXCompletionString, ffi.Uint32)>>
      get clang_getCompletionAnnotation =>
          _library._clang_getCompletionAnnotation_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(CXCompletionString, ffi.Pointer<ffi.Int32>)>>
      get clang_getCompletionParent => _library._clang_getCompletionParent_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function(CXCompletionString)>>
      get clang_getCompletionBriefComment =>
          _library._clang_getCompletionBriefComment_ptr;
  ffi.Pointer<ffi.NativeFunction<CXCompletionString Function(CXCursor)>>
      get clang_getCursorCompletionString =>
          _library._clang_getCursorCompletionString_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(
                  ffi.Pointer<CXCodeCompleteResults>, ffi.Uint32)>>
      get clang_getCompletionNumFixIts =>
          _library._clang_getCompletionNumFixIts_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          CXString Function(
              ffi.Pointer<CXCodeCompleteResults>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<CXSourceRange>)>> get clang_getCompletionFixIt =>
      _library._clang_getCompletionFixIt_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>
      get clang_defaultCodeCompleteOptions =>
          _library._clang_defaultCodeCompleteOptions_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<CXCodeCompleteResults> Function(
              CXTranslationUnit,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Uint32)>> get clang_codeCompleteAt =>
      _library._clang_codeCompleteAt_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CXCompletionResult>, ffi.Uint32)>>
      get clang_sortCodeCompletionResults =>
          _library._clang_sortCodeCompletionResults_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CXCodeCompleteResults>)>>
      get clang_disposeCodeCompleteResults =>
          _library._clang_disposeCodeCompleteResults_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<CXCodeCompleteResults>)>>
      get clang_codeCompleteGetNumDiagnostics =>
          _library._clang_codeCompleteGetNumDiagnostics_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXDiagnostic Function(
                  ffi.Pointer<CXCodeCompleteResults>, ffi.Uint32)>>
      get clang_codeCompleteGetDiagnostic =>
          _library._clang_codeCompleteGetDiagnostic_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<CXCodeCompleteResults>)>>
      get clang_codeCompleteGetContexts =>
          _library._clang_codeCompleteGetContexts_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<CXCodeCompleteResults>, ffi.Pointer<ffi.Uint32>)>>
      get clang_codeCompleteGetContainerKind =>
          _library._clang_codeCompleteGetContainerKind_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<CXCodeCompleteResults>)>>
      get clang_codeCompleteGetContainerUSR =>
          _library._clang_codeCompleteGetContainerUSR_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXString Function(ffi.Pointer<CXCodeCompleteResults>)>>
      get clang_codeCompleteGetObjCSelector =>
          _library._clang_codeCompleteGetObjCSelector_ptr;
  ffi.Pointer<ffi.NativeFunction<CXString Function()>>
      get clang_getClangVersion => _library._clang_getClangVersion_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>
      get clang_toggleCrashRecovery => _library._clang_toggleCrashRecovery_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CXTranslationUnit, CXInclusionVisitor, CXClientData)>>
      get clang_getInclusions => _library._clang_getInclusions_ptr;
  ffi.Pointer<ffi.NativeFunction<CXEvalResult Function(CXCursor)>>
      get clang_Cursor_Evaluate => _library._clang_Cursor_Evaluate_ptr;
  ffi.Pointer<ffi.NativeFunction<CXEvalResultKind Function(CXEvalResult)>>
      get clang_EvalResult_getKind => _library._clang_EvalResult_getKind_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXEvalResult)>>
      get clang_EvalResult_getAsInt => _library._clang_EvalResult_getAsInt_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(CXEvalResult)>>
      get clang_EvalResult_getAsLongLong =>
          _library._clang_EvalResult_getAsLongLong_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXEvalResult)>>
      get clang_EvalResult_isUnsignedInt =>
          _library._clang_EvalResult_isUnsignedInt_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(CXEvalResult)>>
      get clang_EvalResult_getAsUnsigned =>
          _library._clang_EvalResult_getAsUnsigned_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(CXEvalResult)>>
      get clang_EvalResult_getAsDouble =>
          _library._clang_EvalResult_getAsDouble_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(CXEvalResult)>>
      get clang_EvalResult_getAsStr => _library._clang_EvalResult_getAsStr_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXEvalResult)>>
      get clang_EvalResult_dispose => _library._clang_EvalResult_dispose_ptr;
  ffi.Pointer<ffi.NativeFunction<CXRemapping Function(ffi.Pointer<ffi.Int8>)>>
      get clang_getRemappings => _library._clang_getRemappings_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXRemapping Function(
                  ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Uint32)>>
      get clang_getRemappingsFromFileList =>
          _library._clang_getRemappingsFromFileList_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function(CXRemapping)>>
      get clang_remap_getNumFiles => _library._clang_remap_getNumFiles_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CXRemapping, ffi.Uint32, ffi.Pointer<CXString>,
              ffi.Pointer<CXString>)>> get clang_remap_getFilenames =>
      _library._clang_remap_getFilenames_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXRemapping)>>
      get clang_remap_dispose => _library._clang_remap_dispose_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXResult Function(CXCursor, CXFile, CXCursorAndRangeVisitor)>>
      get clang_findReferencesInFile =>
          _library._clang_findReferencesInFile_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXResult Function(
                  CXTranslationUnit, CXFile, CXCursorAndRangeVisitor)>>
      get clang_findIncludesInFile => _library._clang_findIncludesInFile_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(CXIdxEntityKind)>>
      get clang_index_isEntityObjCContainerKind =>
          _library._clang_index_isEntityObjCContainerKind_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCContainerDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getObjCContainerDeclInfo =>
          _library._clang_index_getObjCContainerDeclInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCInterfaceDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getObjCInterfaceDeclInfo =>
          _library._clang_index_getObjCInterfaceDeclInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCCategoryDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getObjCCategoryDeclInfo =>
          _library._clang_index_getObjCCategoryDeclInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCProtocolRefListInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getObjCProtocolRefListInfo =>
          _library._clang_index_getObjCProtocolRefListInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxObjCPropertyDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getObjCPropertyDeclInfo =>
          _library._clang_index_getObjCPropertyDeclInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxIBOutletCollectionAttrInfo> Function(
                  ffi.Pointer<CXIdxAttrInfo>)>>
      get clang_index_getIBOutletCollectionAttrInfo =>
          _library._clang_index_getIBOutletCollectionAttrInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CXIdxCXXClassDeclInfo> Function(
                  ffi.Pointer<CXIdxDeclInfo>)>>
      get clang_index_getCXXClassDeclInfo =>
          _library._clang_index_getCXXClassDeclInfo_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXIdxClientContainer Function(ffi.Pointer<CXIdxContainerInfo>)>>
      get clang_index_getClientContainer =>
          _library._clang_index_getClientContainer_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<CXIdxContainerInfo>, CXIdxClientContainer)>>
      get clang_index_setClientContainer =>
          _library._clang_index_setClientContainer_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              CXIdxClientEntity Function(ffi.Pointer<CXIdxEntityInfo>)>>
      get clang_index_getClientEntity =>
          _library._clang_index_getClientEntity_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<CXIdxEntityInfo>, CXIdxClientEntity)>>
      get clang_index_setClientEntity =>
          _library._clang_index_setClientEntity_ptr;
  ffi.Pointer<ffi.NativeFunction<CXIndexAction Function(CXIndex)>>
      get clang_IndexAction_create => _library._clang_IndexAction_create_ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CXIndexAction)>>
      get clang_IndexAction_dispose => _library._clang_IndexAction_dispose_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Pointer<CXTranslationUnit>,
              ffi.Uint32)>> get clang_indexSourceFile =>
      _library._clang_indexSourceFile_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<CXUnsavedFile>,
              ffi.Uint32,
              ffi.Pointer<CXTranslationUnit>,
              ffi.Uint32)>> get clang_indexSourceFileFullArgv =>
      _library._clang_indexSourceFileFullArgv_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CXIndexAction,
              CXClientData,
              ffi.Pointer<IndexerCallbacks>,
              ffi.Uint32,
              ffi.Uint32,
              CXTranslationUnit)>> get clang_indexTranslationUnit =>
      _library._clang_indexTranslationUnit_ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CXIdxLoc,
              ffi.Pointer<CXIdxClientFile>,
              ffi.Pointer<CXFile>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>> get clang_indexLoc_getFileLocation =>
      _library._clang_indexLoc_getFileLocation_ptr;
  ffi.Pointer<ffi.NativeFunction<CXSourceLocation Function(CXIdxLoc)>>
      get clang_indexLoc_getCXSourceLocation =>
          _library._clang_indexLoc_getCXSourceLocation_ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(CXType, CXFieldVisitor, CXClientData)>>
      get clang_Type_visitFields => _library._clang_Type_visitFields_ptr;
}

/// A character string.
///
/// The \c CXString type is used to return strings from the interface when
/// the ownership of that string might differ from one call to the next.
/// Use \c clang_getCString() to retrieve the string data and, once finished
/// with the string data, call \c clang_disposeString() to free the string.
class CXString extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Uint32()
  external int private_flags;
}

class CXStringSet extends ffi.Struct {
  external ffi.Pointer<CXString> Strings;

  @ffi.Uint32()
  external int Count;
}

class CXTargetInfoImpl extends ffi.Opaque {}

class CXTranslationUnitImpl extends ffi.Opaque {}

/// Provides the contents of a file that has not yet been saved to disk.
///
/// Each CXUnsavedFile instance provides the name of a file on the
/// system along with the current contents of that file that have not
/// yet been saved to disk.
class CXUnsavedFile extends ffi.Struct {
  /// The file whose contents have not yet been saved.
  ///
  /// This file must already exist in the file system.
  external ffi.Pointer<ffi.Int8> Filename;

  /// A buffer containing the unsaved contents of this file.
  external ffi.Pointer<ffi.Int8> Contents;

  /// The length of the unsaved contents of this buffer.
  @ffi.Uint64()
  external int Length;
}

/// Describes a version number of the form major.minor.subminor.
class CXVersion extends ffi.Struct {
  /// The major version number, e.g., the '10' in '10.7.3'. A negative
  /// value indicates that there is no version number at all.
  @ffi.Int32()
  external int Major;

  /// The minor version number, e.g., the '7' in '10.7.3'. This value
  /// will be negative if no minor version number was provided, e.g., for
  /// version '10'.
  @ffi.Int32()
  external int Minor;

  /// The subminor version number, e.g., the '3' in '10.7.3'. This value
  /// will be negative if no minor or subminor version number was provided,
  /// e.g., in version '10' or '10.7'.
  @ffi.Int32()
  external int Subminor;
}

typedef CXIndex = ffi.Pointer<ffi.Void>;
typedef CXFile = ffi.Pointer<ffi.Void>;
typedef time_t = __darwin_time_t;
typedef __darwin_time_t = ffi.Int64;

/// Uniquely identifies a CXFile, that refers to the same underlying file,
/// across an indexing session.
class CXFileUniqueID extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint64> data;
}

typedef CXTranslationUnit = ffi.Pointer<CXTranslationUnitImpl>;
typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;

/// Identifies a specific source location within a translation
/// unit.
///
/// Use clang_getExpansionLocation() or clang_getSpellingLocation()
/// to map a source location to a particular file, line, and column.
class CXSourceLocation extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> ptr_data;

  @ffi.Uint32()
  external int int_data;
}

/// Identifies a half-open character range in the source code.
///
/// Use clang_getRangeStart() and clang_getRangeEnd() to retrieve the
/// starting and end locations from a source range, respectively.
class CXSourceRange extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> ptr_data;

  @ffi.Uint32()
  external int begin_int_data;

  @ffi.Uint32()
  external int end_int_data;
}

/// Identifies an array of ranges.
class CXSourceRangeList extends ffi.Struct {
  /// The number of ranges in the \c ranges array.
  @ffi.Uint32()
  external int count;

  /// An array of \c CXSourceRanges.
  external ffi.Pointer<CXSourceRange> ranges;
}

typedef CXDiagnosticSet = ffi.Pointer<ffi.Void>;
typedef CXDiagnostic = ffi.Pointer<ffi.Void>;

class CXTUResourceUsageEntry extends ffi.Struct {
  @ffi.Int32()
  external int kind;

  @ffi.Uint64()
  external int amount;
}

/// The memory usage of a CXTranslationUnit, broken into categories.
class CXTUResourceUsage extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Uint32()
  external int numEntries;

  external ffi.Pointer<CXTUResourceUsageEntry> entries;
}

typedef CXTargetInfo = ffi.Pointer<CXTargetInfoImpl>;

/// A cursor representing some element in the abstract syntax tree for
/// a translation unit.
///
/// The cursor abstraction unifies the different kinds of entities in a
/// program--declaration, statements, expressions, references to declarations,
/// etc.--under a single "cursor" abstraction with a common set of operations.
/// Common operation for a cursor include: getting the physical location in
/// a source file where the cursor points, getting the name associated with a
/// cursor, and retrieving cursors for any child nodes of a particular cursor.
///
/// Cursors can be produced in two specific ways.
/// clang_getTranslationUnitCursor() produces a cursor for a translation unit,
/// from which one can use clang_visitChildren() to explore the rest of the
/// translation unit. clang_getCursor() maps from a physical source location
/// to the entity that resides at that location, allowing one to map from the
/// source code into the AST.
class CXCursor extends ffi.Struct {
  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int xdata;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Void>> data;
}

/// Describes the availability of a given entity on a particular platform, e.g.,
/// a particular class might only be available on Mac OS 10.7 or newer.
class CXPlatformAvailability extends ffi.Struct {
  /// A string that describes the platform for which this structure
  /// provides availability information.
  ///
  /// Possible values are "ios" or "macos".
  external CXString Platform;

  /// The version number in which this entity was introduced.
  external CXVersion Introduced;

  /// The version number in which this entity was deprecated (but is
  /// still available).
  external CXVersion Deprecated;

  /// The version number in which this entity was obsoleted, and therefore
  /// is no longer available.
  external CXVersion Obsoleted;

  /// Whether the entity is unconditionally unavailable on this platform.
  @ffi.Int32()
  external int Unavailable;

  /// An optional message to provide to a user of this API, e.g., to
  /// suggest replacement APIs.
  external CXString Message;
}

class CXCursorSetImpl extends ffi.Opaque {}

typedef CXCursorSet = ffi.Pointer<CXCursorSetImpl>;

/// Describes the kind of type
abstract class CXTypeKind {
  /// Represents an invalid type (e.g., where no type is available).
  static const int CXType_Invalid = 0;

  /// A type whose specific kind is not exposed via this
  /// interface.
  static const int CXType_Unexposed = 1;
  static const int CXType_Void = 2;
  static const int CXType_Bool = 3;
  static const int CXType_Char_U = 4;
  static const int CXType_UChar = 5;
  static const int CXType_Char16 = 6;
  static const int CXType_Char32 = 7;
  static const int CXType_UShort = 8;
  static const int CXType_UInt = 9;
  static const int CXType_ULong = 10;
  static const int CXType_ULongLong = 11;
  static const int CXType_UInt128 = 12;
  static const int CXType_Char_S = 13;
  static const int CXType_SChar = 14;
  static const int CXType_WChar = 15;
  static const int CXType_Short = 16;
  static const int CXType_Int = 17;
  static const int CXType_Long = 18;
  static const int CXType_LongLong = 19;
  static const int CXType_Int128 = 20;
  static const int CXType_Float = 21;
  static const int CXType_Double = 22;
  static const int CXType_LongDouble = 23;
  static const int CXType_NullPtr = 24;
  static const int CXType_Overload = 25;
  static const int CXType_Dependent = 26;
  static const int CXType_ObjCId = 27;
  static const int CXType_ObjCClass = 28;
  static const int CXType_ObjCSel = 29;
  static const int CXType_Float128 = 30;
  static const int CXType_Half = 31;
  static const int CXType_Float16 = 32;
  static const int CXType_ShortAccum = 33;
  static const int CXType_Accum = 34;
  static const int CXType_LongAccum = 35;
  static const int CXType_UShortAccum = 36;
  static const int CXType_UAccum = 37;
  static const int CXType_ULongAccum = 38;
  static const int CXType_FirstBuiltin = 2;
  static const int CXType_LastBuiltin = 38;
  static const int CXType_Complex = 100;
  static const int CXType_Pointer = 101;
  static const int CXType_BlockPointer = 102;
  static const int CXType_LValueReference = 103;
  static const int CXType_RValueReference = 104;
  static const int CXType_Record = 105;
  static const int CXType_Enum = 106;
  static const int CXType_Typedef = 107;
  static const int CXType_ObjCInterface = 108;
  static const int CXType_ObjCObjectPointer = 109;
  static const int CXType_FunctionNoProto = 110;
  static const int CXType_FunctionProto = 111;
  static const int CXType_ConstantArray = 112;
  static const int CXType_Vector = 113;
  static const int CXType_IncompleteArray = 114;
  static const int CXType_VariableArray = 115;
  static const int CXType_DependentSizedArray = 116;
  static const int CXType_MemberPointer = 117;
  static const int CXType_Auto = 118;

  /// Represents a type that was referred to using an elaborated type keyword.
  ///
  /// E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
  static const int CXType_Elaborated = 119;
  static const int CXType_Pipe = 120;
  static const int CXType_OCLImage1dRO = 121;
  static const int CXType_OCLImage1dArrayRO = 122;
  static const int CXType_OCLImage1dBufferRO = 123;
  static const int CXType_OCLImage2dRO = 124;
  static const int CXType_OCLImage2dArrayRO = 125;
  static const int CXType_OCLImage2dDepthRO = 126;
  static const int CXType_OCLImage2dArrayDepthRO = 127;
  static const int CXType_OCLImage2dMSAARO = 128;
  static const int CXType_OCLImage2dArrayMSAARO = 129;
  static const int CXType_OCLImage2dMSAADepthRO = 130;
  static const int CXType_OCLImage2dArrayMSAADepthRO = 131;
  static const int CXType_OCLImage3dRO = 132;
  static const int CXType_OCLImage1dWO = 133;
  static const int CXType_OCLImage1dArrayWO = 134;
  static const int CXType_OCLImage1dBufferWO = 135;
  static const int CXType_OCLImage2dWO = 136;
  static const int CXType_OCLImage2dArrayWO = 137;
  static const int CXType_OCLImage2dDepthWO = 138;
  static const int CXType_OCLImage2dArrayDepthWO = 139;
  static const int CXType_OCLImage2dMSAAWO = 140;
  static const int CXType_OCLImage2dArrayMSAAWO = 141;
  static const int CXType_OCLImage2dMSAADepthWO = 142;
  static const int CXType_OCLImage2dArrayMSAADepthWO = 143;
  static const int CXType_OCLImage3dWO = 144;
  static const int CXType_OCLImage1dRW = 145;
  static const int CXType_OCLImage1dArrayRW = 146;
  static const int CXType_OCLImage1dBufferRW = 147;
  static const int CXType_OCLImage2dRW = 148;
  static const int CXType_OCLImage2dArrayRW = 149;
  static const int CXType_OCLImage2dDepthRW = 150;
  static const int CXType_OCLImage2dArrayDepthRW = 151;
  static const int CXType_OCLImage2dMSAARW = 152;
  static const int CXType_OCLImage2dArrayMSAARW = 153;
  static const int CXType_OCLImage2dMSAADepthRW = 154;
  static const int CXType_OCLImage2dArrayMSAADepthRW = 155;
  static const int CXType_OCLImage3dRW = 156;
  static const int CXType_OCLSampler = 157;
  static const int CXType_OCLEvent = 158;
  static const int CXType_OCLQueue = 159;
  static const int CXType_OCLReserveID = 160;
  static const int CXType_ObjCObject = 161;
  static const int CXType_ObjCTypeParam = 162;
  static const int CXType_Attributed = 163;
  static const int CXType_OCLIntelSubgroupAVCMcePayload = 164;
  static const int CXType_OCLIntelSubgroupAVCImePayload = 165;
  static const int CXType_OCLIntelSubgroupAVCRefPayload = 166;
  static const int CXType_OCLIntelSubgroupAVCSicPayload = 167;
  static const int CXType_OCLIntelSubgroupAVCMceResult = 168;
  static const int CXType_OCLIntelSubgroupAVCImeResult = 169;
  static const int CXType_OCLIntelSubgroupAVCRefResult = 170;
  static const int CXType_OCLIntelSubgroupAVCSicResult = 171;
  static const int CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = 172;
  static const int CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = 173;
  static const int CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = 174;
  static const int CXType_OCLIntelSubgroupAVCImeDualRefStreamin = 175;
  static const int CXType_ExtVector = 176;
}

/// The type of an element in the abstract syntax tree.
class CXType extends ffi.Struct {
  @ffi.Int32()
  external int kind;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> data;
}

typedef CXCursorVisitor = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(CXCursor, CXCursor, CXClientData)>>;
typedef CXClientData = ffi.Pointer<ffi.Void>;
typedef CXPrintingPolicy = ffi.Pointer<ffi.Void>;
typedef CXModule = ffi.Pointer<ffi.Void>;

/// Describes a single preprocessing token.
class CXToken extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> int_data;

  external ffi.Pointer<ffi.Void> ptr_data;
}

typedef CXTokenKind = ffi.Int32;

/// A single result of code completion.
class CXCompletionResult extends ffi.Struct {
  /// The kind of entity that this completion refers to.
  ///
  /// The cursor kind will be a macro, keyword, or a declaration (one of the
  /// *Decl cursor kinds), describing the entity that the completion is
  /// referring to.
  ///
  /// \todo In the future, we would like to provide a full cursor, to allow
  /// the client to extract additional information from declaration.
  @ffi.Int32()
  external int CursorKind;

  /// The code-completion string that describes how to insert this
  /// code-completion result into the editing buffer.
  external CXCompletionString CompletionString;
}

typedef CXCompletionString = ffi.Pointer<ffi.Void>;

/// Contains the results of code-completion.
///
/// This data structure contains the results of code completion, as
/// produced by \c clang_codeCompleteAt(). Its contents must be freed by
/// \c clang_disposeCodeCompleteResults.
class CXCodeCompleteResults extends ffi.Struct {
  /// The code-completion results.
  external ffi.Pointer<CXCompletionResult> Results;

  /// The number of code-completion results stored in the
  /// \c Results array.
  @ffi.Uint32()
  external int NumResults;
}

typedef CXInclusionVisitor = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CXFile, ffi.Pointer<CXSourceLocation>, ffi.Uint32, CXClientData)>>;
typedef CXEvalResult = ffi.Pointer<ffi.Void>;
typedef CXEvalResultKind = ffi.Int32;
typedef CXRemapping = ffi.Pointer<ffi.Void>;

class CXCursorAndRangeVisitor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, CXCursor, CXSourceRange)>> visit;
}

typedef CXResult = ffi.Int32;

/// Source location passed to index callbacks.
class CXIdxLoc extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> ptr_data;

  @ffi.Uint32()
  external int int_data;
}

/// Data for ppIncludedFile callback.
class CXIdxIncludedFileInfo extends ffi.Struct {
  /// Location of '#' in the \#include/\#import directive.
  external CXIdxLoc hashLoc;

  /// Filename as written in the \#include/\#import directive.
  external ffi.Pointer<ffi.Int8> filename;

  /// The actual file that the \#include/\#import directive resolved to.
  external CXFile file;

  @ffi.Int32()
  external int isImport;

  @ffi.Int32()
  external int isAngled;

  /// Non-zero if the directive was automatically turned into a module
  /// import.
  @ffi.Int32()
  external int isModuleImport;
}

/// Data for IndexerCallbacks#importedASTFile.
class CXIdxImportedASTFileInfo extends ffi.Struct {
  /// Top level AST file containing the imported PCH, module or submodule.
  external CXFile file;

  /// The imported module or NULL if the AST file is a PCH.
  external CXModule module;

  /// Location where the file is imported. Applicable only for modules.
  external CXIdxLoc loc;

  /// Non-zero if an inclusion directive was automatically turned into
  /// a module import. Applicable only for modules.
  @ffi.Int32()
  external int isImplicit;
}

class CXIdxAttrInfo extends ffi.Struct {
  @CXIdxAttrKind()
  external int kind;

  external CXCursor cursor;

  external CXIdxLoc loc;
}

typedef CXIdxAttrKind = ffi.Int32;

class CXIdxEntityInfo extends ffi.Struct {
  @CXIdxEntityKind()
  external int kind;

  @CXIdxEntityCXXTemplateKind()
  external int templateKind;

  @CXIdxEntityLanguage()
  external int lang;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> USR;

  external CXCursor cursor;

  external ffi.Pointer<ffi.Pointer<CXIdxAttrInfo>> attributes;

  @ffi.Uint32()
  external int numAttributes;
}

typedef CXIdxEntityKind = ffi.Int32;
typedef CXIdxEntityCXXTemplateKind = ffi.Int32;
typedef CXIdxEntityLanguage = ffi.Int32;

class CXIdxContainerInfo extends ffi.Struct {
  external CXCursor cursor;
}

class CXIdxIBOutletCollectionAttrInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxAttrInfo> attrInfo;

  external ffi.Pointer<CXIdxEntityInfo> objcClass;

  external CXCursor classCursor;

  external CXIdxLoc classLoc;
}

class CXIdxDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxEntityInfo> entityInfo;

  external CXCursor cursor;

  external CXIdxLoc loc;

  external ffi.Pointer<CXIdxContainerInfo> semanticContainer;

  /// Generally same as #semanticContainer but can be different in
  /// cases like out-of-line C++ member functions.
  external ffi.Pointer<CXIdxContainerInfo> lexicalContainer;

  @ffi.Int32()
  external int isRedeclaration;

  @ffi.Int32()
  external int isDefinition;

  @ffi.Int32()
  external int isContainer;

  external ffi.Pointer<CXIdxContainerInfo> declAsContainer;

  /// Whether the declaration exists in code or was created implicitly
  /// by the compiler, e.g. implicit Objective-C methods for properties.
  @ffi.Int32()
  external int isImplicit;

  external ffi.Pointer<ffi.Pointer<CXIdxAttrInfo>> attributes;

  @ffi.Uint32()
  external int numAttributes;

  @ffi.Uint32()
  external int flags;
}

class CXIdxObjCContainerDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxDeclInfo> declInfo;

  @CXIdxObjCContainerKind()
  external int kind;
}

typedef CXIdxObjCContainerKind = ffi.Int32;

class CXIdxBaseClassInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxEntityInfo> base;

  external CXCursor cursor;

  external CXIdxLoc loc;
}

class CXIdxObjCProtocolRefInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxEntityInfo> protocol;

  external CXCursor cursor;

  external CXIdxLoc loc;
}

class CXIdxObjCProtocolRefListInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<CXIdxObjCProtocolRefInfo>> protocols;

  @ffi.Uint32()
  external int numProtocols;
}

class CXIdxObjCInterfaceDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxObjCContainerDeclInfo> containerInfo;

  external ffi.Pointer<CXIdxBaseClassInfo> superInfo;

  external ffi.Pointer<CXIdxObjCProtocolRefListInfo> protocols;
}

class CXIdxObjCCategoryDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxObjCContainerDeclInfo> containerInfo;

  external ffi.Pointer<CXIdxEntityInfo> objcClass;

  external CXCursor classCursor;

  external CXIdxLoc classLoc;

  external ffi.Pointer<CXIdxObjCProtocolRefListInfo> protocols;
}

class CXIdxObjCPropertyDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxDeclInfo> declInfo;

  external ffi.Pointer<CXIdxEntityInfo> getter;

  external ffi.Pointer<CXIdxEntityInfo> setter;
}

class CXIdxCXXClassDeclInfo extends ffi.Struct {
  external ffi.Pointer<CXIdxDeclInfo> declInfo;

  external ffi.Pointer<ffi.Pointer<CXIdxBaseClassInfo>> bases;

  @ffi.Uint32()
  external int numBases;
}

/// Data for IndexerCallbacks#indexEntityReference.
class CXIdxEntityRefInfo extends ffi.Struct {
  @CXIdxEntityRefKind()
  external int kind;

  /// Reference cursor.
  external CXCursor cursor;

  external CXIdxLoc loc;

  /// The entity that gets referenced.
  external ffi.Pointer<CXIdxEntityInfo> referencedEntity;

  /// Immediate "parent" of the reference. For example:
  ///
  /// \code
  /// Foo *var;
  /// \endcode
  ///
  /// The parent of reference of type 'Foo' is the variable 'var'.
  /// For references inside statement bodies of functions/methods,
  /// the parentEntity will be the function/method.
  external ffi.Pointer<CXIdxEntityInfo> parentEntity;

  /// Lexical container context of the reference.
  external ffi.Pointer<CXIdxContainerInfo> container;

  /// Sets of symbol roles of the reference.
  @CXSymbolRole()
  external int role;
}

typedef CXIdxEntityRefKind = ffi.Int32;
typedef CXSymbolRole = ffi.Int32;
typedef CXIdxClientContainer = ffi.Pointer<ffi.Void>;
typedef CXIdxClientEntity = ffi.Pointer<ffi.Void>;
typedef CXIndexAction = ffi.Pointer<ffi.Void>;

/// A group of callbacks used by #clang_indexSourceFile and
/// #clang_indexTranslationUnit.
class IndexerCallbacks extends ffi.Struct {
  /// Called periodically to check whether indexing should be aborted.
  /// Should return 0 to continue, and non-zero to abort.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(CXClientData, ffi.Pointer<ffi.Void>)>> abortQuery;

  /// Called at the end of indexing; passes the complete diagnostic set.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CXClientData, CXDiagnosticSet, ffi.Pointer<ffi.Void>)>>
      diagnostic;

  external ffi.Pointer<
      ffi.NativeFunction<
          CXIdxClientFile Function(
              CXClientData, CXFile, ffi.Pointer<ffi.Void>)>> enteredMainFile;

  /// Called when a file gets \#included/\#imported.
  external ffi.Pointer<
          ffi.NativeFunction<
              CXIdxClientFile Function(
                  CXClientData, ffi.Pointer<CXIdxIncludedFileInfo>)>>
      ppIncludedFile;

  /// Called when a AST file (PCH or module) gets imported.
  ///
  /// AST files will not get indexed (there will not be callbacks to index all
  /// the entities in an AST file). The recommended action is that, if the AST
  /// file is not already indexed, to initiate a new indexing job specific to
  /// the AST file.
  external ffi.Pointer<
          ffi.NativeFunction<
              CXIdxClientASTFile Function(
                  CXClientData, ffi.Pointer<CXIdxImportedASTFileInfo>)>>
      importedASTFile;

  /// Called at the beginning of indexing a translation unit.
  external ffi.Pointer<
      ffi.NativeFunction<
          CXIdxClientContainer Function(
              CXClientData, ffi.Pointer<ffi.Void>)>> startedTranslationUnit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(CXClientData, ffi.Pointer<CXIdxDeclInfo>)>>
      indexDeclaration;

  /// Called to index a reference of an entity.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(CXClientData, ffi.Pointer<CXIdxEntityRefInfo>)>>
      indexEntityReference;
}

typedef CXIdxClientFile = ffi.Pointer<ffi.Void>;
typedef CXIdxClientASTFile = ffi.Pointer<ffi.Void>;
typedef CXFieldVisitor = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(CXCursor, CXClientData)>>;
const int CINDEX_VERSION_MAJOR = 0;

const int CINDEX_VERSION_MINOR = 59;

const int CINDEX_VERSION = 59;

const String CINDEX_VERSION_STRING = '0.59';
